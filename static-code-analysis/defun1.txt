aorist.el 60 6
  (defvar aorist-tok nil)
  (defvar aorist-id nil)
  (defvar aorist-voice nil)
  (defvar aorist-passive-P nil)
  (defvar aorist-sym nil)
  (defvar aorist-pada nil)
  (defun aorist-doc ()
  CALLS: []
  (defun Kale-459-doc ()
  CALLS: []
  (defun aorist1-doc ()
  CALLS: []
  (defun aorist2-doc ()
  CALLS: []
  (defun aorist3-doc ()
  CALLS: []
  (defun aorist6-doc ()
  CALLS: []
  (defun aorist7-doc ()
  CALLS: []
  (defun aorist4-doc ()
  CALLS: []
  (defun aorist5-doc ()
  CALLS: []
  (defun aorist-passive-doc ()
  CALLS: []
  (defun aorist-Deshpande-doc ()
  CALLS: []
  (defun aorist-varieties (dhaatu class pada upasargas)
  CALLS: ['ans', '(symbolp', 'ITRANS-parse-words-1', 'symbol-name', '(and', 'symbolp', 't', 'while', '<', 'format', 'if', 'funcall', 'intern-soft', 'append', '1+']
  (defun aorist-1-P (dhaatu class pada upasargas)
  CALLS: ['', '(not', '(member', 'i', '(and', '(kale-459-P', 'ghraa']
  (defun kale-459-P (dhaatu class &optional pada tok)
  CALLS: ['lc', 'if', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(member', 'e', '(mi', 'mii', 'dii', 'lii']
  (defun aorist-2-P (dhaatu class pada upasargas)
  CALLS: ['', '(or', 'sam', '4', '(aorist-2-542-P', '(aorist-2-543-P', '(aorist-2-544-P']
  (defun aorist-2-542-P (dhaatu class pada upasargas)
  CALLS: ['data', 'dhaatu1', 'khyaa', 'sam', 'Ri', 'sRi', 'hve', 'vach', 'sich', 'lip', 'as', 'pari', 'shak', 'uch', 'luT', 'klid', 'kShvid', 'mid', 'vid', 'shad', 'Ridh', 'gRidh', 'radh', 'gup', 'Dip', 'lup', 'nabh', 'kRish', 'bhRish', 'vRish', 'tRiSh', 'duSh', 'pluSh', 'riSh', 'ruSh', 'viSh', 'vyuSh', 'shuSh', 'kus', 'ghas', 'jas', 'tas', 'das', 'bas', 'bis', 'byus', 'mas', 'mus', 'yas', 'vas', 'vis', 'while', '(symbolp', '(not', '(equal', 'length']
  (defun aorist-2-543-P (dhaatu class pada upasargas)
  CALLS: ['data', 'dhaatu1', 'while', '(symbolp', '(not', '(equal', 'length']
  (defun aorist-2-544-P (dhaatu class pada upasargas)
  CALLS: ['if', '', 'ruch', 'ghuT', 'ruT', 'luT', 'luTh', 'dyut', 'vRit', 'shvit', 'kShvid', 'bhid', 'syand', 'svid', 'vRidh', 'shRidh', 'kLip', 'kShubh', 'tubh', 'nubh', 'shubh', 'sraMbh', 'bhrash', 'bhraMsh', 'dhvaMs', 'bhraMs', 'sraMs']
  (defun aorist-3-P (dhaatu class pada upasargas)
  CALLS: ['', '(equal', '(member', 'shri', 'dhe']
  (defun aorist-6-P (dhaatu class pada upasargas)
  CALLS: ['tok', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(not', '(member', '10', 'causal', 'i', '(and', 'ghraa', 'yam', 'mi', 'daridraa', '(kale-459-P', '(aorist-2-542-P', '(equal']
  (defun aorist-7-P (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-seT-code1a', 'solution', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '<', 'length', '(equal', 'viSh', '(and', 'aniT', 'sh', 'i', '(member', 'mRish']
  (defun aorist-4-P (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-seT-code1a', 'solution', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '', 'word-parts', '(member', '(daa', 'dhaa', 'sthaa', '(equal', 'if', '(and', 'adhi', '(lip', 'sich', 'hve', 'shak', 'vid', 'lup', 'rich', 'aorist-6-P', 'a', 'aorist-1-P', 'aorist-2-P', 'aorist-3-P', 'aorist-7-P', '<', 'length', '4', 'mRish']
  (defun aorist-5-P (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-seT-code1a', 'solution', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '', 'word-parts', '(equal', '(and', '(member', '(shak', 'vid', 'shvi', '<', 'length', '4', '(aorist-3-P', 'aorist-1-P', 'aorist-2-P', 'aorist-3-P', 'aorist-6-P', 'aorist-7-P', 'aorist-4-P', 'a', '(or', 'consonant-P', 'vowel-P']
  (defun aorist (dhaatu class pada &optional upasargas voice)
  CALLS: ['lambda', 'x', 'y', 'intern', 'format', 'construct-conjtab1a', 'defun', 'upasargas', 'n', '1-7', 'the', 'when', 'fol-msg', 'if', 'varieties', 'd', '(symbolp', '(listp', 'aorist-varieties', '1', 'elt', 'substring', 'mapcar', 'z', 'different', '(not', '(member', '4', 'jRI', '', 'vowel-P', '(equal', '10', 'dru', 't', 'intern-soft', 'funcall', 'thisans0', 'aorist-passive-3S', 'aset', 'join-arrays', 'e', 'b', 'aorist-endings', 'length', 'aa', 'vconcat', '(vowel-P', 'vrddhi', 'moved', 'make-vector', 'i=0', 'while', '<', 'augment-a', 'conjugation-join', 'sym-without-space', 'append-if-new', '1+']
  (defun conjugation-tab-aorist1 (upasargas class pada dhaatu)
  CALLS: ['ans', '', 'elt', 'substring', 'word-parts', 'if', 'aniT', 'defun', 'upasargas', 'endings', 'when', 'fol-msg', 'format', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'temp', 'construct-seT-code1a', 'solution', 'bitab', 'b', '1-', '=', '(member', '"CVC"', '[[p', 't', '-', '(equal', '(or', 'kale-459-P', 'sho', 'vconcat', 'aset', 'n', 'make-vector', 'while', '<', 'vowel-P', 'augment-a', 'conjugation-join', 'sym-without-space', '1+']
  (defun conjugation-tab-aorist2 (upasargas class pada dhaatu)
  CALLS: ['ans', '', 'elt', 'substring', 'word-parts', 'if', 'aniT', 'fol-msg', 'format', 'when', 'aorist-2-544-P', 'defun', 'upasargas', 'endings', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'temp', 'construct-seT-code1a', 'solution', 'bitab', 'b', '1-', '=', '-', '(equal', '(or', 'Ri', 'gunate-final-vowel', 'nasal-P', 'vconcat', 'n', 'make-vector', 'while', '<', '(member', 'v', 'conjugation-join', 't', 'augment-a', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-aorist3 (upasargas class pada dhaatu)
  CALLS: ['ans', 'aniT', 'defun', 'upasargas', 'dhaatu', 'when', 'fol-msg', 'format', '(listp', 'cadr', 'if', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'temp', 'construct-seT-code1a', 'solution', 'btab', 'b', 'reduplicate', '(equal', '(member', '10', 'aorist-causal-base-irreg', 'aorist-causal-base', 'aorist3-make-btab', 'progn', 'b1tab', 'join-arrays']
  (defun aorist3-make-btab (b1 endings)
  CALLS: ['n', 'length', 'make-vector', 'while', '<', 'elt', '(equal', 'substring', 'vconcat', '(member', 'v', 'conjugation-join', 't', 'augment-a', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-aorist6 (upasargas class pada dhaatu)
  CALLS: ['ans', 'aniT', 'defun', 'upasargas', 'endings', 'when', 'fol-msg', 'format', 'if', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'temp', 'construct-seT-code1a', 'solution', 'bitab', 'b', '1-', '=', '-', '(equal', '(vowel-P', 'vconcat', 'substring', 'n', 'make-vector', 'while', '<', 'augment-a', 'conjugation-join', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-aorist7 (upasargas class pada dhaatu)
  CALLS: ['ans', 'aniT', 'if', 'defun', 'upasargas', 'endings', 'when', 'fol-msg', 'format', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'temp', 'construct-seT-code1a', 'solution', 'b', '1-', '=', '-', 'n', 'make-vector', 'while', '<', 'augment-a', 'conjugation-join', 'aorist-join', 'sym-without-space', 'aset', 'duh', '0', 'w1', '<=', 'substring', '1+']
  (defun conjugation-tab-aorist4 (upasargas class pada dhaatu)
  CALLS: ['ans', 'if', 'defun', 'upasargas', 'endings', 'when', 'fol-msg', 'format', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'temp', 'construct-seT-code1a', 'solution', 'btab', 'b', '1-', '(equal', 't', 'n', 'make-vector', 'usu.', '(member', 'sRij', 'vconcat', 'substring', 'footnote', 'aorist-gunate-final-vowel', 'i', 'labial-P', '(or', 'daa', 'kale-459-P', '(and', 'upa', 'aniT', 'adhi', 'while', '<', '[s', 'consonant-P', 'nasal-P', 'semivowel-P', 'shortvowel-P', 'augment-a', 'aorist-join', 'sym-without-space', 'aset', 'w1', '1+']
  (defun conjugation-tab-aorist5 (upasargas class pada dhaatu)
  CALLS: ['ans', 'if', 'defun', 'upasargas', 'endings', 'when', 'fol-msg', 'format', 'PASSIVE=%s', 'aorist-endings', 'length', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'temp', 'construct-seT-code1a', 'solution', 'bitab', 'b', '1-', '(equal', 't', 'n', 'make-vector', 'usu.', '(member', 'sRij', 'vconcat', 'substring', 'footnote', 'kShaN', 'aorist-gunate-final-vowel', 'h', '(vowel-P', '(and', 'r', 'vad', '=', '(shortvowel-P', 'aorist-passive-P', 'example', 'gunate-final-vowel', '10', 'gup', 'kale-461-alt', 'mapcar', 'lambda', 'x1', 'while', '<', 'augment-a', 'aorist-join', 'sym-without-space', 'aset', 'w1', 'append', 'diip', 'third', 'N', '0', '1+']
  (defun aorist-passive-3S (upasargas class pada dhaatu)
  CALLS: ['c', 'ans', 'if', 'arrayp', 'length', 'when', '<', 'copy-sequence', 'elt', 'substring', 'fol-msg', 'format', '(member', 'aa', 'vconcat', '(equal', 'adhi', 'kRiSh', 'vrddhi', 'i', 'guna', 'radh', 'nasal', '(and', 'kram', 'seT-code', 'construct-seT-code1a', 'solution', 't', '(vowel-P', 'gup', 'usual', 'kale-461-alt', 'xalt', 'causal-base', '10', 'causal-603-P', 'b,c', 'aorist3-shorten-1st-vowel', 'append-if-new', 'while', 'augment-a', 'conjugation-join', 'sym-without-space', 'append']
  (defun aorist-bitab (btab itab)
  CALLS: ['n', 'length', 'make-vector', 'while', '<', 'elt', 'if', 'append', 'aset', '1+']
  (defun aorist-bitab-join (bitab endings dhaatu strengths i-insert)
  CALLS: ['ans', 'length', 'make-vector', 'while', '<', 'elt', 'aorist-join', 'if', 'sym-without-space', 'append-if-new', 'fol-msg', 'format', '%s', 'solution', 'aset', '1+']
  (defun aorist-join (base-tok seT-code sup dhaatu strength i-insert)
  CALLS: ['ans1', '(listp', 'mapcar', 'lambda', 'x', 'aorist-join', '(equal', 'seT', 't', 'aorist-join1', 'flatten', 'fol-msg', 'format']
  (defun aorist-join1 (y seT-code ending0 dhaatu strength i-insert)
  CALLS: ['ans', 'if', 'conjugation-join', 'sandhi-pair-skiprefs-set', 'elt', 'aorist-join1-adjust-y', 'length', 'substring', 'first-cons', 'when', 'fol-msg', 'format', '(and', 'vowel-P', 'aorist-join1-vowel', 'a', 'Antoine2#110', 'vconcat', 't', 'aorist-join1-t-th', 'aorist-join1-dh', 'aorist-join1-s', 'm', 'footnote', 'see', 'Kale', 'solution', 'sandhi-pair', 'sandhi-single']
  (defun aorist-join1-adjust-y (y efirst dhaatu)
  CALLS: ['(and', 'consonant-P', 'semivowel-P', 'vconcat', 'substring', 'vowel-P', 'a', 'b', 'luT', 't']
  (defun aorist-join1-vowel (y ending dhaatu)
  CALLS: ['ans', 'elt', 'substring', 'first-cons', 'length', 'when', 'fol-msg', 'format', '(and', 'i', 'Antoine2#110', 'wp', 'word-parts', 'if', '<', '-', '(equal', 'vconcat', "'i", 'u']
  (defun aorist-join1-t-th (y ending dhaatu)
  CALLS: ['ans', 'elt', 'substring', 'first-cons', 'length', 'when', 'fol-msg', 'format', '(and', '<=', '[a', 'vconcat', '<', '[ch', 'if', 'vector', '(member', 'vah', 'by', 'muh', 'Kale', 'Kale,', 'ans1', 'luT', 'aorist4', 'ylast1', '(equal', 't', 'dih', 'lih', 'lengthen-vowel', 'j', '[bh', 'has', 'dh', 'de-aspirate', 'm']
  (defun aorist-join1-s (y ending dhaatu)
  CALLS: ['ans', 'elt', 'substring', 'first-cons', 'length', 'when', 'fol-msg', 'format', '(member', 'sh', 'vconcat', 'bh', 'dh', 'if', 'aspirate-first-cons', '(equal', 'n', 'v', 'd', '(and', '<', '[ch', 'Antoine2', 'j', 'p.', 'k']
  (defun aorist-join1-dh (y ending dhaatu)
  CALLS: ['atmanepada', 'ans', 'elt', 'substring', 'first-cons', 'length', 'when', 'fol-msg', 'format', '(member', 'dih', 'vconcat', 'aspirate-first-cons', 'lih', 'vector', 'lengthen-vowel', 'vah', 'by', 'ch', '(equal']
  (defun conjugation-tab-aoristX (upasargas class pada dhaatu)
  CALLS: ['ans', '', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'word-parts', 'if', 'construct-seT-code1a', 'solution', '(equal', 'ans1', 'conjugation-tab-aoristX', 'vconcat', 'sym-without-space', '(vowel-P', 'gunate-final-vowel', 'when', 'conjugation-tab-aoristX-main', 'seT', 'join-arrays', '(and', 'a', 'b', 'handled', '1', 'below', 'Kale', '(member', 'sRij', 'gunated', 'one', 'along', 'aniT', 'kRiSh', 'lRiT', 'iSh', 'veT', '<', 'length', 'to', 'atmanepada', 'p', 'dhaatukosha', 'svRi', 'fol-msg', 'format', 'kLip', 'above', 'implicitly', 'whose', 'kRit', 'non-conjugational', 'periphrastic', 'inserts', 'adhi', '3', 'dhaa', 'a~nj', 'gup', 'defun', 'upasargas', 'endings', 'conj-class', 'intern-soft', 'sanget', 'copy-sequence', 'temp', "'t'", 'i', 'while', 'aref', 'aset', '1+', 'bitab', '1-', '=', '"CVC"', '[[p', 't', '-', 'labial-P', 'a~nch', '(samprasaaraNa-P', 'samprasaaraNa', '(or', 'daa', 'aa', 'original', 'b1', 'e', '6', 'mii', '5', '9', '4', 'dhaatu-a~Nga', '([g', '(count', 'angas', 'mapcar', 'lambda', 'anga', 'meaning', '(kuTaadi-P', 'c', 'diidhii', '2', 'bfirst', 'augment-a', 'append-if-new', 'aorist-bitab', 'aorist-bitab-join']
  (defun aorist-causal-base-irreg (dhaatu class pada upasargas Eng-def)
  CALLS: ['(equal', '[s', '(and', 'adhi', '[a', '[e', '[j', '[ch', '[p']
  (defun aorist-causal-base (dhaatu class pada upasargas Eng-def)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', '', 'elt', 'substring', 'word-parts', 'if', 'causal-base', 'class10-base', 'fol-msg', 'format', 'cb1', 'while', 'aorist3-alter10', 'when', 'u', 'aorist3-alter10a', 'sru', 'a', 'append-if-new', 'bhraaj', 'reduplicate', '(causal-603-P', 'aorist3-lengthen-final-vowel', '(member', 'lup', 'aset', 'append', 'it', 'length', '=', '-', '(and', 'kale-400-P', 'no', 'tok', 'copy-sequence', '<', 'vowel-P', '1+', 'uun', 'c', 'nasal-P', 'd', 'b', 'v', 'vector', 'reduplicate-cons', 'nasal-match', 'vconcat', '(equal', 't', "a'", 'Ri']
  (defun nasal-match (c)
  CALLS: ['(guttural-P', '(palatal-P', '(cerebral-P', '(dental-P', '(labial-P', 't']
  (defun reduplicate-cons (c)
  CALLS: ['r', 'reduplicate', 'vector', 'elt']
  (defun aorist3-alter10 (tok &optional dhaatu)
  CALLS: ['a', 'ans', 'fol-msg', 'format', 'aorist3-reduplicate', 'i.e.,', 'causal', 'word-parts', 'elt', 'length', 'substring', '(and', '<=', '+', 'when', 'shortvowel-P', 'prosodially-long-P', 'aset', 'vconcat', 'flatten', 'smRi', 'b2', 'copy-sequence', 'while', '<', 'vowel-P', '1+', '(member', '', 't']
  (defun aorist3-reduplicate (tok &optional dhaatu)
  CALLS: ['b', 'fol-msg', 'format', 'substring', 'cheShT', 'if', '[k', 'aorist3-shorten-1st-vowel', '', '<', 'length', 'consonant-P', 'elt', 'reduplicate']
  (defun aorist3-alter10a (tok)
  CALLS: ['fol-msg', 'format', 'ans', 'copy-sequence', 'length', 'while', '<', 'elt', 'when', 'vowel-P', '1+', 'i', 'if', '+', 'labial-P', 'semivowel-P', 'a', 'aset']
  (defun aorist3-shorten-1st-vowel (tok)
  CALLS: ['ntok', 'copy-sequence', 'length', 'while', '<', 'elt', 'when', 'vowel-P', 'aorist3-shorten-vowel', 'aset', '1+']
  (defun aorist3-shorten-vowel (v)
  CALLS: ['allv', 'vconcat', 'length', 'while', '<', 'when', 'elt', '1+']
  (defun aorist3-lengthen-final-vowel (tok)
  CALLS: ['ntok', 'copy-sequence', 'length', 'while', '<', '1-', 'elt', 'when', 'vowel-P', 'aorist3-lengthen-vowel', 'aset']
  (defun aorist3-lengthen-vowel (v)
  CALLS: ['allv', 'vconcat', 'length', 'while', '<', 'when', 'elt', '1+']
  (defun short-syllable-P (parts)
  CALLS: ['constants-vowel', '?', 'a', 'b', 'shortvowel-P', 'elt']
  (defun prosodially-long-P (parts ivowel)
  CALLS: ['n', 'length', '<', '1-', 'shortvowel-P', 'elt', '1+']
  (defun old-aorist3-class10-base (tok)
  CALLS: ['s', 'ending', 'b1', 'sym-without-space', '(member', 'shout', 'This', "'kuuNay'", 'Kale', 'vconcat', 'dhaatu-a~Nga-10', '(equal', 'if']
  (defun aorist-gunate-final-vowel (tok &optional vriddhi-flag)
  CALLS: ['ans', 'length', 'while', '<', '1-', 'elt', 'when', 'vowel-P', 'if', 'vrddhi1', 'guna', 'aset', 'vconcat', 'substring', '1+']
  (defun aorist-endings (&optional tense-sym)
  CALLS: ['endings', 'if', 'conj-class', 'format', 'fol-msg', 'intern-soft', 'sanget', 'copy-sequence', 'when', 'aset']
  (defun kale-461-alt (dhaatu)
  CALLS: ['xalt', 'when', 'gup', '(equal']
causal.el 23 0
  (defun causal-doc-600 ()
  CALLS: []
  (defun causal-doc-601 ()
  CALLS: []
  (defun causal-doc-602 ()
  CALLS: []
  (defun causal-doc-603 ()
  CALLS: []
  (defun causal-doc-604 ()
  CALLS: []
  (defun causal-doc-605 ()
  CALLS: []
  (defun causal-doc-606 ()
  CALLS: []
  (defun causal-doc-607 ()
  CALLS: []
  (defun causal-doc-608 ()
  CALLS: []
  (defun causal-doc-609 ()
  CALLS: []
  (defun causal-doc-610 ()
  CALLS: []
  (defun causal-doc-611 ()
  CALLS: []
  (defun causal-base1a (dhaatu &optional class pada upasargas Eng-def)
  CALLS: ['mapcar', 'causal-base']
  (defun causal-base (dhaatu &optional class pada upasargas  Eng-def)
  CALLS: ['tok', 'ITRANS-parse-words-1', 'symbol-name', '(setq', 'kale-610', '(and', 'vam', 'a', 'vconcat', 'gunate-final-vowel', 'class10-base', 'append', '(member', 'mi', 'substring', 'kShai', 'glai', '(equal', '(or', 'sho', 'jabh', 'if', 'gup', 'solution', '(causal-603-P', 'fol-msg', 'format', '(indicatory-m1-P', 'diidhii', 'kale-459-P', 'Ri', 't', 'ans1', 'while', 'causal-adjust']
  (defun causal-adjust (b dhaatu class pada upasargas Eng-def)
  CALLS: ['ans', 'if', 'substring', '[aa]', 'vconcat']
  (defun causal-603-P (tok dhaatu)
  CALLS: ['', '(equal', '(and', '(indicatory-m-P', '<', 'length', 'substring']
  (defun indicatory-m-P (dhaatu)
  CALLS: ['indicatory-m-P-1']
  (defun indicatory-m1-P (dhaatu)
  CALLS: ['Chad']
  (defun indicatory-m-P-1 (dhaatu)
  CALLS: ['data']
  (defun indicatory-m-P-2 (dhaatu class pada upasargas Eng-def)
  CALLS: ["'Chaadayati'", 'def', 'modify-Eng-def']
  (defun modify-Eng-def (Eng-def)
  CALLS: ['def', 'if', 'flatten']
  (defun kale-610 (dhaatu &optional class upasargas)
  CALLS: ['dhaatus', '(not', '(equal', '[aa', '(member', 'knuu', '[ch', '(and', '[d', '[bh', '[r', '[l', '[v', '[s', '[sh', '[p']
  (defun kale-400-P (dhaatu)
  CALLS: ['if']
construct.el 152 3
  (defvar noisy-load nil)
  (defvar join-array-method nil)
  (defvar perppart1a-data nil)
  (defun maximal-prefix-sym (tab-in &optional min-pfx-len)
  CALLS: ['ans1', 'maximal-prefix', 'mapcar']
  (defun maximal-prefix (tab-in &optional min-pfx-len)
  CALLS: ['this', 'ans', 'if', 'flatten', 'all', 'while', 'append-if-new', 'length', 'make-vector', '<', 'elt', 'aset', 'ITRANS-parse-words-1', 'symbol-name', '1+', 'maximal-prefix-helper']
  (defun maximal-prefix-helper (toks min-pfx-len)
  CALLS: ['it', 'ans', '*', 'maximal-prefix-helper1', '1+', 'while', '<=', '=', 'length']
  (defun maximal-prefix-helper1 (toks min-pfx-len)
  CALLS: ['it', 'ans', 'length', 'while', '<', 'elt', '1+', 'min', 'substring', 'append-if-new']
  (defun dcpu-sym (dhaatu class pada upasargas)
  CALLS: ['ans', '(and', 'sym-without-space', 'vector', 'while', '=', 't']
  (defun sym-dcpu (sym)
  CALLS: ['sparts', 'gen-word-list', 'symbol-name', 'fol-msg', 'format', 'if', 'intern', 'elt', 'when', '<', 'length', 'string-to-number', '<=', 'substring', 'P']
  (defun load-subfields (tabnames dirname &optional appendflag useX)
  CALLS: ['tabname', 'if', 'while', 'sangram-filename', 'load-subfields-1']
  (defun load-subfields-1 (filename  appendflag useX)
  CALLS: ['buf', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'if', 'while', 'condition-case', 'read', 'XsanAppendElt2', 'Xsanput2', 'sanAppendElt2', 'load-subfields-keep', 'sanput2', '1+', '+', 'end-of-file', 'fol-msg', 'format', '%s', 'kill-buffer']
  (defun load-subfields-keep (key subkey val)
  CALLS: ['nkept', 'laT-P', '(not', 'sanput2', '(member', 'elt', 'Eng-def', 'load-subfields-keep-class', 'load-subfields-keep-classPada']
  (defun load-subfields-keep-class (key subkey val)
  CALLS: ['dhaata-classPada-upasargas', 'nkept', 'sym-dcpu', 'elt', 'dcpu-sym', 'sanget2', '(not', 'sanput2', '(equal', 'if', 'fol-msg', 'format']
  (defun load-subfields-keep-classPada (key subkey val)
  CALLS: ['dhaata-classPada-upasargas', 'nkept', 'sym-dcpu', 'elt', '(not', 'sanput2', 'dcpu-sym', 'sanget2', '(equal', 'if', 'fol-msg', 'format']
  (defun construct-cleartemp (&optional OBARRAY)
  CALLS: ['if', 'mapatoms']
  (defun construct-cleartemp1 (sym)
  CALLS: ['if', 'get', 'sanput']
  (defun construct-dhaatukosha (&optional intab indir outtab outdir)
  CALLS: ['construct-cleartemp', 'nrec', 'if', 'read-colon-file-table', 'length', 'fol-msg', 'format', 'while', '<', 'elt', 'dhaatu', 'field0', 'upasarga', 'upasarga1', '(=', 'vec0', 'vconcat', 'substring', '1-', 'append', 'gather-fields', '(equal', 'vector', '(member', 'P', 't', 'when', 'sanput', 'append-if-new', 'lambda', 'x', 'sanAppendElt', '1+', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert', 'keys', 'sanget', 'flatten', 'dcpu-sym', 'V', 'save-buffer', 'kill-buffer']
  (defun all-prefix-files (pfx sfx dirin)
  CALLS: ['dir', 'length', 'file-name-as-directory', 'sangram-filename', 'directory-files', 'fol-msg', 'format', 'while', '(not', 'substring', '-', 't', 'append-if-new']
  (defun all-dhaatukosha-inputs ()
  CALLS: ['all-prefix-files']
  (defun all-subanta-inputs ()
  CALLS: ['all-prefix-files']
  (defun strip-pfx-sfx (s pfx sfx)
  CALLS: ['ans', '(not', 'stringp', 'length', '<=', 'substring', 'when', '-']
  (defun construct-dhaatukosha-all ()
  CALLS: ['files', 'all-dhaatukosha-inputs', 'mapcar']
  (defun extract-dhaatukosha-forms (tabname &optional dirname)
  CALLS: ['filename', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', 'end-of-line', '1+', 'fol-msg', 'format', '%s', 'append', 'end-of-file', 'kill-buffer']
  (defun construct-dhaatu-forms1 (&optional form-files)
  CALLS: ['if', 'all-dhaatukosha-inputs', 'apply', 'mapcar']
  (defun construct-dhaatu-forms-all (&optional outtab outdir)
  CALLS: ['construct-cleartemp', 'forms', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'fol-msg', 'format', 'while', 'form', '1+', 'tmp', 'sym-dcpu', 'sanAppendElt', 'append-if-new', 'sanget', 'insert', 'D', 'save-buffer', 'kill-buffer']
  (defun dhaatukosha-forms-sorted ()
  CALLS: ['forms1', 'construct-dhaatu-forms1', 'fol-msg', 'format', 'length', 'while', 'f', 'sym-dcpu', 'if', 'elt', 'cons', 'sort']
  (defun sanforms-lt (form1 form2)
  CALLS: ['dcpu1', 'sym-dcpu', 'fol-msg', 'format', '(ITRANS-lt-sym', 'elt', '(not', '(<', '(and', 'ACTIVE', '2nd', 'takes', '1st', 'could']
  (defun construct-join-arrays (old new)
  CALLS: ['(not', 'join-arrays', '(equal', 'append']
  (defun construct-conjtabs (formtab outtab &optional outdir)
  CALLS: ['dhaatu', 'keys', 'if', 'when', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'form', 'read', 'current-buffer', 'forward-line', 'elt', '1+', 'message', 'format', 'translate-SLP1-ITRANS', 'lambda', 'tense', 'construct-conjtab-helper', 'save-buffer', 'kill-buffer']
  (defun construct-conjtab-helper (bufout tense dhaatu class pada upasargas dict)
  CALLS: ['form', 'lambda', 'voice', '(and', 'laT', '1', 'construct-conjtab-base1a', '(equal', 'construct-conjtab-base-luT', 'construct-conjtab-base-lRiT', '(member', 'lu~N1', 'construct-conjtab-base-lu~N', 'construct-conjtab1a', 'when', 'fol-msg', 'format', 'with-current-buffer', 'subkey', 'plist-get', 'elt', 'solution', 'SL-construct-output-base', 'SL-construct-output1']
  (defun construct-conjtab-base-luT (dhaatu class pada upasargas voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'when', 'celts', 'elt', 'if', 'while', 'symbol-name', 'substring', 'intern', 'append', '', 'plist-get2', 'mapcar', 'lambda', 'e', 'sym-concat', 'vconcat', 'join-arrays', 'fol-msg', 'format', '%s']
  (defun construct-conjtab-base-lRiT (dhaatu class pada upasargas voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'when', 'kLip', 'lRiT', 'above', 'celts', 'elt', 'if', 'while', 'symbol-name', 'substring', 'intern', 'append', '', 'plist-get2', 'mapcar', 'lambda', 'e', 'sym-concat', 'vconcat', 'join-arrays', 'fol-msg', 'format', '%s']
  (defun construct-conjtab-base-aashiirli~N (dhaatu class pada upasargas voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'when', 'kLip', 'lRiT', 'above', 'celts', 'elt', 'if', 'while', 'symbol-name', 'substring', 'intern', 'append', '', 'plist-get2', 'mapcar', 'lambda', 'e', 'sym-concat', 'vconcat', 'join-arrays', 'fol-msg', 'format', '%s']
  (defun construct-conjtab-base-lRi~N (dhaatu class pada upasargas voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'when', 'kLip', 'lRiT', 'above', 'celts', 'elt', 'if', 'while', 'symbol-name', 'substring', 'intern', 'append', '', 'plist-get2', 'mapcar', 'lambda', 'e', 'sym-concat', 'vconcat', 'join-arrays', 'fol-msg', 'format', '%s']
  (defun construct-conjtab-base-liT-p (dhaatu class pada upasargas voice)
  CALLS: ['keyval', 'when', 'periphrastic-liT-P', 'if', 'periphrastic-base']
  (defun construct-conjtab-base-lu~N (tense dhaatu class pada upasargas voice)
  CALLS: ['except', 'ctab', 'construct-conjtab1a', 'when', 'celts', 'if', 'plist-get2', 'elt', 'length', 'symbol-name', 'while', 'substring', '-', 'intern', 'append', '', 'lambda', 'e1', 'ans', 'mapcar', 'e', 'sym-concat', 'solution', 'vconcat', 'join-arrays', 'lu~N4', 'fol-msg', 'format', '%s']
  (defun construct-conjtab-base1a (tense dhaatu class pada upasargas voice)
  CALLS: ['keyval', 'construct-conjbase1a', 'when', 'fol-msg', 'format', 'lambda', 'x', 'sym-concat', 'defun', 'dhaatu', '', '(equal', 'causal-conjtab1a', '(member', 'laT', 'construct-conjtab1a-spcltense', 'liT-p', 'construct-conjtab1a-gentense']
  (defun construct-conjtab1a-spcltense (dhaatu class pada upasargas tense voice)
  CALLS: ['bases', 'construct-conjbase1a', 'if', 'while', 'arrayp', 'sym-without-space', 'conjugation-tab', 'append-if-new', 'construct-join-arrays']
  (defun construct-conjtab1a-gentense (dhaatu class pada upasargas tense voice)
  CALLS: ['fol-msg', 'format', 'ctabs', 'substring', 'symbol-name', 'string-to-number', '(equal', 'if', 'periphrastic-liT-P', 'conjugation-tab-liT-p', 'reduplicative-liT-P', 'conjugation-tab-liT-r', '(member', '1', 'conjugation-tab-aorist', 'conjugation-tab-lRiT']
  (defun construct-conjbase1a (dhaatu class pada upasargas &optional voice)
  CALLS: ['base', '(equal', 'construct-conjpassbase1a', 'if', '(member', '1', 'class-a-base', 'mapcar', '2', 'class-b-base']
  (defun construct-causalconjtabs (formtab outtab &optional outdir)
  CALLS: ['dhaatu', 'keys', 'if', 'when', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'form', 'read', 'current-buffer', 'forward-line', 'elt', '1+', 'message', 'format', 'translate-SLP1-ITRANS', 'lambda', 'tense', 'construct-conjtab-helper', 'save-buffer', 'kill-buffer', 'defun', 'ans', '(member', 'laT', 'causal-conjtab1a-spcltense', 'liT-p', 'causal-conjtab1a-gentense', 'solution', 'causal-conjtab1a-chk']
  (defun causal-conjtab1a-chk (dhaatu class pada upasargas tense voice ans)
  CALLS: ['bases', 'when', 'fol-msg', 'format', 'elt', 'symbol-name', 'length', 'make-vector', 'while', '<', 'if', 'symbolp', '<=', 'substring', 'append', 'intern', 'solution', 'aset', '1+', 'p', 'sanput2', '%s']
  (defun causal-conjtab1a-spcltense (dhaatu class pada upasargas tense voice)
  CALLS: ['bases', 'causal-base1b', 'if', 'while', 'arrayp', 'sym-without-space', 'conjugation-tab', 'append-if-new', 'construct-join-arrays', 'defun', 'dhaatu', 'causal-conjtab1a-bases-a', 't', '(equal', 'length', 'elt', 'sym-concat']
  (defun causal-conjtab1a-gentense (dhaatu class pada upasargas tense voice)
  CALLS: ['ctabs', 'if', 'ACTIVE', 'substring', 'symbol-name', 'string-to-number', 'intern-soft', 'format', 'when', 'liT-p', 'while', 'fol-msg', 'conjugation-tab-aorist', 'funcall', 'construct-join-arrays', 'defun', 'dhaatu', 'bases', '(member', 'laT', 'causal-base1b', 'causal-bases-gentense', 'la~N', 'lambda', 'base', 'sym-concat']
  (defun causal-bases-gentense (dhaatu class pada upasargas tense voice)
  CALLS: ['ctabs', 'if', 'ACTIVE', 'substring', 'symbol-name', 'string-to-number', '(let', 'tok', 'ITRANS-parse-words-1', 'elt', 'vowel-P', '(and', 'toks', 'aorist-causal-base', 'lambda', 'sym-without-space', 'vconcat', 'ctab', 'conjugation-tab-aorist', 'when', 'fol-msg', 'format', '(equal', 'causal-base1b', '(member', 'luT', 'while', 'append-if-new']
  (defun causal-base1b (dhaatu class pada upasargas voice)
  CALLS: ['toks', 'causal-base', 'when', 'lambda', 'tok', 'vconcat', 'substring', 'mapcar']
  (defun construct-seT-code1a (dhaatu class pada upasargas &optional dtype)
  CALLS: ['fol-msg', 'format', '1', 'insert', '#144', 'a', '2', 'do', '3', 'optionally', 'see', 'p.', 'ref', 'Whitney', 'ans', 'daridraa', 'shak', 'radh', '(equal', '(member', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'wparts', 'word-parts', '(consonant-P', 'RI', '(>', 'length', 't', 'when']
  (defun construct-seTPERF-code1a (dhaatu class pada upasargas)
  CALLS: ['kRi', 'a', 'only', 'Kale', 'otherwise,', 'based', 'tok', 'aniT', 'seT', 'veT', 'sanget2', 'dhaatu', 'construct-seT-code1a', 'solution', 'if', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'length', '(and', 'vowel-P', '<', 's', 'consonant-P', 'fol-msg', 'format', 'excep', 'plist-get', 'when']
  (defun construct-conjpassbase1a (dhaatu class pada upasargas)
  CALLS: ['a', 'b', 'c', 'original', 'to', 'class', 'd', 'class=2', 'appendix', 'ans', 'ITRANS-parse-words-1', 'symbol-name', '(member', 'khan', 'vconcat', 'substring', '(equal', '(and', '[p', '[g', '[k', '[Ri', '[v', 'cb', 'construct-conjbase1a', 'lambda', '(or', 'de', '1', 'elt', 'aa', 'benedictive-base', 'with', 'when', 'length', 'arrayp', 'if', 'sym-without-space', 'solution']
  (defun load-dhaatukosha (files)
  CALLS: ['lambda', 'x', 'load-subfields']
  (defun Xconstruct (tabname dirname outtab outdir)
  CALLS: ['filename', 'construct-cleartemp', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', 'if', 'Xalgorithm', 'sanAppendElt', 'append-if-new', 'message', 'symbol-name', '1+', 'end-of-file', 'fol-msg', 'format', 'kill-buffer', 'fileout', 'length', 'erase-buffer', 'data', 'sanget', 'elt', 'dhaatu', 'X1', 'insert', 'save-buffer']
  (defun Xalgorithm (xin)
  CALLS: ['ans1', 'flatten', 'maximal-prefix-sym', 'length', 'when', '<', '/']
  (defun getdhaatu (dhaatu class pada upa-syms subkey)
  CALLS: ['form', 'if', 'dcpu-sym', 'sanget2', 'cons', 'when', 'getdhaatu']
  (defun getdhaatu-ver0 (dhaatu class pada upa-syms subkey)
  CALLS: ['form', 'dcpu-sym', 'sanget2', 'when', 'if', 'getdhaatu']
  (defun get-seTPERF-code (dhaatu class pada upa-syms)
  CALLS: ['getdhaatu']
  (defun get-seT-code (dhaatu class pada upa-syms)
  CALLS: ['getdhaatu']
  (defun sandefs (dhaatu)
  CALLS: ['forms', 'sanget2', 'dhaatu', 'while', 'solution', 'fol-msg', 'format']
  (defun construct-init ()
  CALLS: ['fol-ob-init', 'parse_INIT', 'init-transliteration', 'init-Sangram', 'init-sets', 'init-properties', 'init-vowelstrength', 'init-semivowels', 'message', 'format', 'Sandhi-init', 'Sandhi-unload', 'Sandhi-load-init', 'Subanta-initAll', 'init-sup', 'init-vsup', 'load-library', 'fol-msg', 'my-load-library']
  (defun explore-Xconjgentab (&optional dhaatus)
  CALLS: ['dhaatu', 'when', 'sanget2', 'dhaatus', 'while', 'form', '1+', 'Xsanget2', 'tmp', 'sym-dcpu', 'dcpu-sym', 'elt', 'length', 'fol-msg', 'format']
  (defun explore-Xconjtab (&optional dhaatus)
  CALLS: ['dhaatu', 'when', 'sanget2', 'dhaatus', 'while', 'form', '1+', 'Xsanget2', 'tmp', 'sym-dcpu', 'dcpu-sym', 'elt', 'length', 'fol-msg', 'format']
  (defun explore-dhaatu-tenses (&optional dhaatus)
  CALLS: ['dhaatu', 'when', 'sanget2', 'dhaatus', 'while', 'form', '1+', 'tmp', 'sym-dcpu', 'dcpu-sym', 'elt', 'plist-get', 'c', 'if', 'fol-msg', 'format', 'SL=', 'add', 'absolutive', 'gerundive']
  (defun construct-participles-all (&optional outtab outdir)
  CALLS: ['forms', 'extract-dcpforms', 'if', 'concat', 'construct-participles', 'construct-participles-reformat']
  (defun construct-participles-reformat (outtab intab &optional outdir)
  CALLS: ['fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'more', 'while', 'read', 'current-buffer', 'elt', 'plist-get', '(member', 'IPP', 'format', 'I', '(and', 'S', 'PASSP', '(equal', 't', 'insert', 'forward-line', '<', 'point', 'point-max', 'save-buffer', 'kill-buffer']
  (defun construct-participles-reformat1 (outtab &optional outdir)
  CALLS: ['s', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'remove-partial-duplicates', '[^(', '"', 'save-buffer', 'kill-buffer', 'fol-msg', 'format']
  (defun construct-participles (formtab outtab &optional outdir)
  CALLS: ['fol-msg', 'format', 'keys', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'form', 'read', 'current-buffer', 'forward-line', 'elt', '1+', 'message', 'construct-participles1', 'save-buffer', 'kill-buffer']
  (defun construct-participles1 (bufout SL-dhaatu class pada &optional dict)
  CALLS: ['condition-case', 'construct-participles1-helper', 'fol-msg', 'format', 'defun', 'bufout', 'key', 'translate-SLP1-ITRANS', 'base', '(<base-syms>', '<base-sym>', '<base-syms>', 'construct-prespart-base-alt', 'if', 'bases', 'elt', 'when', 'translate-ITRANS-SLP1', 'lambda', 'with-current-buffer', 'insert', 'SL-construct-output-base', 'construct-passpart-base-alt', 'past', 'construct-pppart1a', 'sym-delete-last', 'mapcar', 'x', 'sym-concat', 'indeclineable', 'construct-ippart1a-tvaa', 'gerundive?', 'construct-ippart1a-ya', 'infinitive', 'construct-inf1a', 'potential', 'construct-potpart1a', 'reduplicate', 'construct-rppart1a', '(<strong', 'while', 'basevals', 'Xalgorithm', 'solution', 'active', 'construct-futpart1a', 'FMP', 'passive', 'construct-futppart1a']
  (defun sym-delete-last (sym)
  CALLS: ['val', 'if', 'lambda', 'x', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'fol-msg', 'format']
  (defun construct-prespart1a-alt (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-prespart-base-alt', 'when', 'fol-msg', 'format', 'M', 'if', 'while', 'declension-pres-part-alt', 'construct-join-arrays', 'solution', 'append']
  (defun declension-pres-part-alt (praatipadikas gender class pada)
  CALLS: ['if', 'declension-pres-part-P-alt', 'declension-pres-part-A-alt']
  (defun declension-pres-part-P-alt (praatipadikas gender &optional class)
  CALLS: ['base', '', 'elt', 'plist-get2', 'when', 'lambda', 'e1', 'if', 'e', 'sym-concat', 'vconcat']
  (defun declension-pres-part-A-alt (praatipadika gender &optional class)
  CALLS: ['ans1', 'plist-get2', 'lambda', 'e', 'sym-concat', 'vconcat', 'if', 'construct-join-arrays']
  (defun construct-prespart-base-alt (dhaatu class pada upasargas)
  CALLS: ['(equal', 'construct-prespart-base-alt-P', 'construct-prespart-base-alt-A', 't']
  (defun construct-prespart-base-alt-P (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-conjtab1a', 'solution', 'if', 'i', 'when', 'elt', 'length', 'while', '<', 'join-arrays', '1+', 'construct-prespart-base-alt-P-1', 'append']
  (defun construct-prespart-base-alt-P-1 (ctabelt dhaatu class)
  CALLS: ['1', '2', 'weak', '#669,', 'ans', 'if', 'while', 'tok', '15.7', 'ITRANS-parse-words-1', 'symbol-name', 'fol-msg', 'format', 'when', 'substring', 'class', 'vconcat', 'construct-prespart-base-alt-P-1', 'remove', "'yaa'", '[a', 'sym-without-space', '(member', '(equal', 'shaas', 't', 'append', 'bases', 'mapcar', 'solution']
  (defun construct-prespart-base-alt-A (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-conjtab1a', 'solution', 'if', 'ctab', 'while', 'elt', 'construct-prespart-base-alt-A-1', 'append']
  (defun construct-prespart-base-alt-A-1 (ctabelt dhaatu class )
  CALLS: ['ans', 'if', 'while', 'tok', '15.8', '#669', 'ITRANS-parse-words-1', 'symbol-name', '(member', '1', 'substring', 'vconcat', 'conjugation-join', '5', '(equal', 'a', 'sym-without-space']
  (defun construct-prespart-base (dhaatu class pada upasargas)
  CALLS: ['(equal', 'construct-prespart-base-P', 'construct-prespart-base-A', 't']
  (defun construct-prespart-base-P (dhaatu class pada upasargas)
  CALLS: ['1', '2', 'weak', '#669,', 'ans', 'construct-conjtab1a', 'solution', 'if', 'i', 'when', 'elt', 'length', 'while', '<', 'join-arrays', '1+', 'pres-part-praatipadikas']
  (defun construct-prespart-base-A (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-conjtab1a', 'solution', 'if', 'i', 'when', 'elt', 'length', 'while', '<', 'join-arrays', '1+', 'pres-part-praatipadikas']
  (defun pres-part-praatipadikas (conjelt class pada dhaatu)
  CALLS: ['when', 'lambda', 'c', 'pres-part-praatipadikas', 'Eng-def', '(equal', 'tok', '15.7', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'if', 'vconcat', 'sym-without-space', '(member', '1', '(and', 'dname', '<=', 'length', 't', '15.8', '#669', 'conjugation-join', '5', 'a', 'fol-msg', 'format', '%s']
  (defun construct-passpart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'gender', 'fol-msg', 'construct-passpart-base-alt', 'sanput', 'subkey', 'insert', 'Xalgorithm', 'save-buffer', 'kill-buffer']
  (defun construct-passpart-base-alt   (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-conjpassbase1a', 'if', 'lambda', 'x', 'ending', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'conjugation-join', 'substring', 'sym-without-space']
  (defun construct-passpart1a (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-conjpassbase1a', 'if', 'lambda', 'x', 'ending', 'declension-join', 'M', 'while', 'declension-pres-part', 'append']
  (defun construct-pppart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'with', 'construct-pppart1a', 'lambda', 'x', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'sanput', 'subkey', 'insert', 'past', 'sym-concat', 'save-buffer', 'kill-buffer']
  (defun construct-ippart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'with', 'construct-ippart1a', 'sanput', 'subkey', 'insert', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'save-buffer', 'kill-buffer']
  (defun construct-inf (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'with', 'construct-inf1a', 'sanput', 'subkey', 'insert', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'save-buffer', 'kill-buffer']
  (defun construct-potpart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'with', 'construct-potpart1a', 'sanput', 'subkey', 'insert', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'save-buffer', 'kill-buffer']
  (defun rppart-doc ()
  CALLS: []
  (defun construct-rppart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'construct-rppart1a', 'sanput', 'subkey', 'insert', 'flatten', 'save-buffer', 'kill-buffer']
  (defun construct-rppart1a (dhaatu class pada upasargas)
  CALLS: ['ending', 'ans1', 'construct-rppart1b', '(not', '(equal', 'mapcar']
  (defun construct-rppart1a-mod (x)
  CALLS: ['ends', 'ans', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'if', 'vconcat', 'declension-join', 'sym-without-space']
  (defun construct-rppart1b (dhaatu class pada upasargas)
  CALLS: ['when', 'reduplicative-liT-P', 'ans', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'bitab', '([n', 'NA', '(and', 'nasal-P', 'vconcat', 'fc', 'labial-P', 'sym-without-space', 't', 'liT-main-get-bitab', 'mapcar', 'reduplicate-perfect', 'fol-msg', 'format', 'while', '(equal', 'word-parts', '(member', '"V"', 'aa', 'perfect-join1', 'append-if-new', 'babhuuv', 'jajanv', 'chakhanv', 'jagmiv', 'jaghniv', 'vividv', 'dadRishiv', 'vivishiv']
  (defun perppart-doc ()
  CALLS: []
  (defun construct-perppart (&optional forms outtab Xouttab outdir)
  CALLS: ['construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'construct-perppart1a', 'sanput', 'subkey', 'insert', 'flatten', 'save-buffer', 'kill-buffer']
  (defun construct-perppart1a (dhaatu class pada upasargas)
  CALLS: ["'vas'", 'P', 'if', 'init-perppart1a-data', 'when', 'periphrastic-liT-P', 'ans', 'periphrastic-base', 'solution', 'elt', 'lambda', 's', 'x', 'b1', 'conjugation-join-sym']
  (defun init-perppart1a-data ()
  CALLS: ['lambda', 'pair', 'x', 'conjugation-join-sym', 'solution', 'construct-rppart1a']
  (defun construct-futpart (&optional forms outtab Xouttab outdir)
  CALLS: ['active', 'construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'construct-futpart1a', 'sanput', 'subkey', 'insert', 'save-buffer', 'kill-buffer']
  (defun construct-futppart (&optional forms outtab Xouttab outdir)
  CALLS: ['active', 'construct-cleartemp', 'keys', 'if', 'construct-dhaatu-forms1', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'form', '1+', 'message', 'format', 'sym-dcpu', 'elt', 'dcpu-sym', 'when', 'sanget', 'construct-futppart1a', 'sanput', 'subkey', 'insert', 'save-buffer', 'kill-buffer']
  (defun construct-verb-all ()
  CALLS: ['sfx', '"dhaatukosha.txt"', 'all-dhaatukosha-inputs', 'mapcar', 'lambda', 'file', 'strip-pfx-sfx', 'construct-verb-one']
  (defun construct-verb-one (dhaatu-sfx)
  CALLS: ['dhaatu-filename', 'construct-init', 'format', 'construct-dhaatukosha', 'construct-dhaatu-forms-all', 'lambda', 'fun-sfx', 'construct-verb-one-a', 'prespart', 'takes', '2nd', '1st']
  (defun filter-dhaatu-forms (forms option)
  CALLS: ['ans', 'while', 'sym-dcpu', 'elt', '(equal', 'dcpu-sym', 'append-if-new', 't']
  (defun construct-verb-one-a (dhaatu-sfx fun-sfx)
  CALLS: ['fol-msg', 'format', 'current-time-string', 'dhaatu-pfx', 'construct-dhaatu-forms1', 'filter-dhaatu-forms', 'fun-name', 'sym-concat', 'concat', 'funcall']
  (defun construct-verb-one-a1 (dhaatu-sfxes fun-sfx)
  CALLS: ['mapcar', 'lambda', 'dhaatu-sfx', 'construct-verb-one-a']
  (defun construct-verb-causal-one (dhaatu-sfx)
  CALLS: ['fol-msg', 'format', 'current-time-string', 'dhaatu-pfx', 'construct-dhaatu-forms1', 'fun-name', 'sym-concat', 'concat', 'funcall']
  (defun load-construct-all ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'load-dhaatukosha', 'all-dhaatukosha-inputs', 'load-subfields', 'mapcar', 'load-subanta-files', 'load-causal-files']
  (defun load-subanta-files ()
  CALLS: ['files', '"subanta.txt"', 'all-subanta-inputs', 'mapcar', 'lambda', 'file', 'message', 'format', 'load-subfields', 'concat']
  (defun all-dhaatukosha-suffixes ()
  CALLS: ['dhaatu-files', 'all-dhaatukosha-inputs', 'while', 'strip-pfx-sfx', 'append']
  (defun load-construct-all-verbal (pfx)
  CALLS: ['sfx', 'message', 'format', 'all-dhaatukosha-suffixes', 'mapcar', 'lambda', 'sfx1']
  (defun load-causal-files ()
  CALLS: ['file', 'message', 'format', 'all-dhaatukosha-suffixes', 'mapcar', 'lambda', 'sfx1']
  (defun construct-subanta (intab &optional indir outtab outdir)
  CALLS: ['nrec', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'erase-buffer', 'while', 'condition-case', 'progn', 'read', 'error', 'read-colon-line-fields', 'current-line', 'forward-line', '1+', 'subanta', 'elt', 'solution', 'message', 'format', 'translate-SLP1-ITRANS', 'convert-subanta-lexinfo', 'tmp', 'cadr', 'construct-subanta-helper', 'when', 'M', 'fol-msg', 'construct-subanta-base', 'val1', 'e.g.,', 'SL-construct-output-base', 'construct-subanta1', '', 'type', '(M', 'lambda', 'gender', 'plist-get', 'cons', 'append', 'SL-construct-output1', '%s', '1-', '<', 'save-buffer', 'kill-buffer', 'length']
  (defun convert-subanta-lexinfo (subanta lexinfo)
  CALLS: ['forms', 'formin', 'elt', 'intern', 'upcase', 'symbol-name', '(equal', 'M', 'F', 't', 'when', 'subanta-convert-form', 'if', 'progn', 'while', 'cons']
  (defun subanta-convert-form (subanta formin)
  CALLS: ['tok', 'init-subanta-type-data', 'plist-get', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'length', 'when', 'fol-msg', 'format', '(and', 'M', 'c', 'sandhi-n-N', 'tmp', 'word-parts', 'NOUN', 'relation', 'prathama', 'turiiya', '(equal', '<=', '[m', 'if', 'consonant-P', '[i', 'sym-without-space', '[v', 'dhvas', '[ii', 'string-match', 'concat', 'make-regexp', 'Nii', 'bhuu', '(vowel-P', 'vector']
  (defun init-subanta-type-data ()
  CALLS: ['', 'a', 'esp.', 'half']
  (defun SL-construct-output-base (bufout bases key subkey &optional dict)
  CALLS: ['key1', 'translate-ITRANS-SLP1', 'if', 'lambda', 'base', 'replace-prefix', 'with-current-buffer', 'insert', 'format']
  (defun SL-construct-output1 (bufout key subkey keyval &optional dict)
  CALLS: ['Xvals', 'translate-ITRANS-SLP1', 'Xalgorithm', 'if', 'length', 'with-current-buffer', 'key1', 'replace-prefix', 'insert', 'format', 'n', 'while', '<', 'elt', '1+']
  (defun replace-prefix0 (pfx val r)
  CALLS: ['ans-s', 'replace-prefix0-string', 'symbol-name', 'if', 'intern']
  (defun replace-prefix (pfx vals r)
  CALLS: ['mapcar-LE', 'lambda', 'val', 'replace-prefix0']
  (defun replace-prefix0-string (pfx val r)
  CALLS: ['n', 'if', 'string-match', 'length', 'substring', 'concat']
  (defun construct-output-base (bufout bases key subkey)
  CALLS: ['', 'if', 'when', 'fol-msg', 'format', 'lambda', 'base', 'with-current-buffer', 'insert']
  (defun construct-output1 (bufout key subkey keyval)
  CALLS: ['Xvals', 'Xalgorithm', 'if', 'length', 'with-current-buffer', 'insert', 'format', 'n', 'while', '<', 'elt', '1+']
  (defun construct-subanta-base (subanta gender form)
  CALLS: ['without', '', '(sanget', '(not', '(M', 'N', 'F', 'ADJ', 'M', 'subanta-base']
  (defun subanta-base (citation-sym gender form)
  CALLS: ['praatipadikas', 'ITRANS-parse-words-1', 'symbol-name', 'length', '(<=', '(member', 'manC', 'sym-without-space', 'substring', '(M', 'M', 'tok1', 'elt', '(equal', 'vconcat', 'n', '(F', 'F', 'a', 'b', 'e.g.', 'type', 'o', 'Pan.', 'i.e.,', '(and', '<=', 'if', 'dos', 'Kale', "'au'", 'sat', 'asat', 't', 'solution', 'when', 'fol-msg', 'format', 'subanta-base']
  (defun construct-subanta1a (subanta formin gender)
  CALLS: ['form1', 'tmp', 'if', 'subanta-convert-form', 'elt', '(equal', 't', 'when', 'fol-msg', 'format', 'construct-subanta1', '(form', 'M', 'plist-get']
  (defun construct-subanta1 (subanta gen-or-mtype form &optional dbg)
  CALLS: ['when', 'fol-msg', 'format', 'ans', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'prathama', '<=', 'length', 'substring', 'I', 'sym-without-space', 'vconcat', 'if', 'construct-subanta2-ADJ-at', 'construct-subanta2', 'M', 'while', '(and', 'info2', 'elt', 'cons', 'apply', 'old', 'append', 'aset']
  (defun construct-subanta2 (citation-sym  genderin form)
  CALLS: ['genders', 'when', 'fol-msg', 'format', 'subanta-base', 'if', 'M', 'intern-soft', 'intern', 'while', 'sanget2', 'append-if-new']
  (defun construct-subanta2-ADJ-at (citation-sym  genderin form &optional dbg)
  CALLS: ['genders', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'when', 'fol-msg', 'format', 'vconcat', 'substring', 'M', 'while', 'intern-soft', 'sanget2', 'append-if-new']
  (defun SL-construct-subanta1 (SL-subanta SL-gender &optional SL-form dbg)
  CALLS: ['when', 'fol-msg', 'format', 'subanta', 'translate-SLP1-ITRANS', 'intern', 'upcase', 'symbol-name', 'if', 'forms', 'convert-subanta-lexinfo', 'caar', '(member', 'manC', '(equal', 'construct-subanta1', 'type', 'NOUN', 'noun', 'downcase', 'cons', 'elt', 'M', 'while', 'mapcar-LE', 'nreverse']
  (defun construct-subanta-all ()
  CALLS: ['files', '"subanta.txt"', 'all-subanta-inputs', 'mapcar', 'lambda', 'file', 'construct-subanta']
  (defun construct-dcpforms (intab &optional outtab indir outdir)
  CALLS: ['fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'point-min', 'while', '<', 'point', 'point-max', 'condition-case', 'forms', 'read-colon-line-fields', 'current-line', 'elt', 'e', 'cons', 'nreverse', 'solution', 'normalize-class-padas', '(class', 'when', 'fol-msg', 'format', 'lambda', 'cp', 'insert', 'append', 'end-of-file', 'forward-line', 'save-buffer', 'kill-buffer']
  (defun additional-preverbforms (intab intab1 outtab &optional outdir)
  CALLS: ['fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'current-line', 'forward-line', 'substring', 'string-match', 'search-forward-regexp', 'concat', 'when', '1+', 'message', 'format', 'insert', 'save-buffer', 'kill-buffer', 'fol-msg']
  (defun merge-dcpforms (outtab intabs &optional indir outdir)
  CALLS: ['fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', 'insert-file', 'goto-char', 'point-max', 'remove-partial-duplicates', 'save-buffer', 'kill-buffer', 'fol-msg', 'format']
  (defun remove-partial-duplicates ( regexp)
  CALLS: ['s', 'sort-lines', 'point-min', 'point-max', 'goto-char', 'current-line', 'string-match', 'match-end', 'if', 'substring', 'forward-line', 'fol-msg', 'format', 'ERROR', 'while', '<', 'point', '1+', 'kill-line']
  (defun normalize-class-padas (cps)
  CALLS: ['ans', 'while', '(numberp', 'cons', '(not', 'fol-msg', 'format', 'nreverse', 'numberp', 'lambda', 'c', '(member', 'P', '(equal']
  (defun extract-dcpforms (&optional outtab outdir)
  CALLS: ['dhaatu-classPada', 'fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'form', 'read', 'end-of-line', 'append', 'cons', 'end-of-file', 'fol-msg', 'format', 'kill-buffer', 'nreverse']
  (defun construct-avyayapada-all ()
  CALLS: ['construct-avyayapada']
  (defun construct-avyayapada (tabname &optional outtab outdir)
  CALLS: ['nrec', 'if', 'read-colon-file-table', 'length', 'fol-msg', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', '<', 'elt', '1+', 'key', 'gather-fields', 'solution', 'insert', 'I', 'save-buffer', 'kill-buffer']
  (defun Sandhi-construct ()
  CALLS: ['Sandhi-init', 'Sandhi-unload', 'Sandhi-load-init']
  (defun construct-mw-all ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'construct-subanta', 'construct-avyayapada', 'construct-dcpforms', 'additional-preverbforms', 'merge-dcpforms', '"dcpforms-MW-verb.txt"', 'construct-conjtabs', 'construct-participles', 'construct-participles-reformat']
  (defun SL-conjtab (root class evoice upas sltense dtype)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', 'mapcar', '(equal', 't', 'format', 'SL-tense-tran', 'symbol-name', 'while', 'construct-conjtab1a', 'solution', 'mapcar-LE', 'when', 'fol-msg', 'construct-join-arrays', 'if', 'append', 'join-arrays', 'cons']
  (defun SL-prespart-base (root class evoice)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'construct-prespart-base-alt', '<base>', 'lambda', 'x', 'translate-ITRANS-SLP1', 'cadr', 'mapcar', 'construct-passpart-base-alt']
  (defun SL-prespart-base1 (root class evoice ctabeltin)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'construct-prespart-base-alt-P-1', '<base>', 'lambda', 'x', 'translate-ITRANS-SLP1', 'cadr', 'construct-prespart-base-alt-A-1', 'mapcar', 'when', 'fol-msg']
  (defun SL-prespart-declension (root class evoice ctabeltin)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 'construct-prespart-base-alt-P-1', 'construct-prespart-base-alt-A-1', 't', 'format', 'M', 'if', 'while', 'declension-pres-part-alt', 'fol-msg', 'construct-join-arrays', 'solution', 'intern', 'downcase', 'symbol-name', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun SL-ppfactn (root class evoice &optional dtype)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'fol-msg', 'periphrastic-liT-P', 'when', 'ans1', 'periphrastic-base', 'if', 'while', 'translate-ITRANS-SLP1', 'sym-concat', 'cons', 'nreverse']
  (defun SL-inf (root class evoice &optional dtype)
  CALLS: ['ans', 'SL-conjtab', 'solution', 'if', 'fol-msg', 'format', 'lambda', 'ctab', 'elt', 'append', 'when', 'while', 'symbol-name', 'length', '<', 'substring', '(equal', 'concat', 't', 'intern', 'append-if-new']
  (defun SL-abs (root class evoice &optional dtype)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'ans1', 'construct-ippart1a-tvaa', 'if', 'construct-ippart1a-ya', 'when', 'eq', 'append', 'while', 'translate-ITRANS-SLP1', 'cons', 'mapcar-LE', 'nreverse']
  (defun SL-ppp (root class evoice &optional dtype)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'ans1', 'construct-pppart1a', 'fol-msg', 'if', 'while', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun SL-ppp-declension (ppp)
  CALLS: ['ans', 'translate-SLP1-ITRANS', 'construct-subanta1', '(ADJ', 'M', 'elt', 'while', 'intern', 'downcase', 'symbol-name', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun SL-pap-declension (ppp)
  CALLS: ['ans', 'ppp1', 'symbol-name', 'substring', 'intern', 'translate-SLP1-ITRANS', 'M', 'construct-subanta1', '(ADJ', 'elt', 'while', 'declension-perf-part-active', 'downcase', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun SL-gerundive (root class evoice)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'ans1', 'construct-potpart1a', 'fol-msg', 'if', 'while', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun SL-gerundive-declension (gerundive)
  CALLS: ['ans', 'translate-SLP1-ITRANS', 'construct-subanta1', '(ADJ', 'M', 'elt', 'while', 'intern', 'downcase', 'symbol-name', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
  (defun old-construct-all ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'construct-init', 'construct-dhaatukosha-all', 'construct-dhaatu-forms-all', 'construct-dcpforms', 'construct-conjtabs-all', 'construct-participles-all', 'construct-causalconjtabs-all', 'construct-subanta-all', 'construct-avyayapada-all']
  (defun construct-conjtabs-all (&optional outtab outdir)
  CALLS: ['forms', 'extract-dcpforms', 'if', 'construct-conjtabs']
  (defun construct-causalconjtabs-all (&optional outtab outdir)
  CALLS: ['forms', 'extract-dcpforms', 'if', 'old-construct-causalconjtabs']
  (defun old-construct-causalconjtabs (formsin outtab outdir)
  CALLS: ['construct-cleartemp', 'keys', '(P', 'A', 'P', '2nd', 'takes', '1st', 'ans', 'lambda', 'tense', 'vp', 'append', 'when', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'dhaatu', 'fol-msg', 'format', 'while', 'form', 'sym-dcpu', 'elt', 'append-if-new', 'cons', 'nreverse', '1+', 'message', 'translate-SLP1-ITRANS', 'vpt', 'subkey', 'solution', 'SL-construct-output-base', 'save-buffer', 'kill-buffer']
  (defun old-SL-inf (root class evoice)
  CALLS: ['dhaatu', 'translate-SLP1-ITRANS', '(equal', 't', 'format', 'ans1', 'construct-inf1a', 'fol-msg', 'if', 'while', 'translate-ITRANS-SLP1', 'cons', 'nreverse']
dictionary12.el 3 0
  (defun sortdict (bufin)
  CALLS: ['sout', 'with-current-buffer', 'goto-char', 's', 'while', 'eobp', 'point', 'end-of-line', 'buffer-substring', 'make-item', 'when', 'concat', 'fol-msg', 'format', 'forward-line', 'sort', 'insert', 'sort-lines', 'point-min', 'point-max', 'search-forward']
  (defun make-item1 (s)
  CALLS: ['ans', 'word-list', 'length', 'while', '<', 'aref', 'ITRANS-parse-word-string', 'vconcat', '1+']
  (defun make-item (s)
  CALLS: ['s1', 'insert', 'goto-char', 'search-forward', 'when', 'eq', '-', 'buffer-substring', 'make-item1', 'length', 'while', '<', 'eval', 'aref', 'format', '1+']
endings.el 32 136
  (defvar at-endings nil)
  (defvar PRESPART-endings nil)
  (defvar PASSPART-endings nil)
  (defvar PPPART-endings nil)
  (defvar ADJ-a-endings nil)
  (defvar ADJ-a-endings-nN nil)
  (defvar RPPART-P-endings nil)
  (defvar conjtab-endings nil)
  (defvar causal-endings nil)
  (defvar explain-subanta-endings nil)
  (defvar laT-2-P-endings laT-1-P-endings)
  (defvar la~N-2-P-endings la~N-1-P-endings)
  (defvar laT-2-P-strengths [S W W S W W S W W])
  (defvar la~N-2-P-strengths [S W W S W W S W W])
  (defvar loT-2-P-strengths [S W W W W W S S S])
  (defvar vidhili~N-2-P-strengths [W W W W W W W W W])
  (defvar laT-2-A-strengths [W W W W W W W W W])
  (defvar la~N-2-A-strengths [W W W W W W W W W])
  (defvar loT-2-A-strengths [W W W W W W S S S])
  (defvar vidhili~N-2-A-strengths [W W W W W W W W W])
  (defvar laT-1-P-endings-Goldman laT-1-P-endings)
  (defvar laT-2-P-endings-Goldman laT-1-P-endings-Goldman)
  (defvar vsup-list)
  (defvar da-save nil)
  (defvar sup-list)
  (defvar gender-form-data-0)
  (defvar gender-form-data-1)
  (defvar gender-form-data-2)
  (defvar gender-form-data-3)
  (defvar gender-form-data-4)
  (defvar gender-form-data-all)
  (defvar ending-consonants-1cons nil)
  (defvar declension-cons-forms nil)
  (defvar sup-F-normal sup-M-normal)
  (defvar sup-F-Ri-A sup-M-Ri-A)
  (defvar sup-M-a-ADJ sup-M-a)
  (defvar sup-F-a-ADJ sup-F-aa)
  (defvar sup-N-a-ADJ sup-N-a)
  (defvar sup-M-i-ADJ sup-M-i)
  (defvar sup-F-i-ADJ sup-F-i)
  (defvar sup-M-u-ADJ sup-M-u)
  (defvar sup-M-Ri-ADJ sup-M-Ri-A)
  (defvar sup-M-aI-ADJ sup-M-a)
  (defvar sup-F-aI-ADJ sup-F-ii)
  (defvar sup-N-aI-ADJ sup-N-a)
  (defvar sup-M-a-PRON sup-M-adj-PRON)
  (defvar sup-F-a-PRON sup-F-adj-PRON)
  (defvar sup-F-c-PRON sup-F-adj-PRON)
  (defvar sup-N-d-PRON sup-N-adj-PRON)
  (defvar sup-F-d-PRON sup-F-adj-PRON)
  (defvar sup-M-b-PRON sup-M-a-PRON)
  (defvar sup-F-b-PRON sup-F-a-PRON)
  (defvar sup-N-b-PRON sup-N-a-PRON)
  (defvar sup-M-IRR-PRON sup-empty)
  (defvar sup-F-IRR-PRON sup-empty)
  (defvar sup-N-IRR-PRON sup-empty)
  (defvar sup-F-CARD-PRON sup-empty)
  (defvar sup-N-CARD-PRON sup-empty)
  (defvar sup-F-CARD-PRON sup-M-CARD-PRON)
  (defvar sup-N-CARD-PRON sup-M-CARD-PRON)
  (defvar sup-M-ORDb-PRON sup-M-a-ADJ)
  (defvar sup-F-ORDb-PRON sup-F-a-ADJ)
  (defvar sup-N-ORDb-PRON sup-N-a-ADJ)
  (defvar sup-M-ORD-PRON sup-M-a)
  (defvar sup-F-ORD-PRON sup-F-ii)
  (defvar sup-N-ORD-PRON sup-N-a)
  (defvar sup-M-1cons sup-M-normal)
  (defvar sup-F-1cons sup-F-normal)
  (defvar sup-N-1cons sup-N-normal)
  (defvar sup-M-2cons sup-M-normal)
  (defvar sup-F-2cons sup-F-normal)
  (defvar sup-N-2cons sup-N-normal)
  (defvar sup-M-vat sup-M-normal)
  (defvar sup-F-vat sup-F-ii)
  (defvar sup-N-vat sup-N-normal)
  (defvar sup-M-vat-ADJ sup-M-normal)
  (defvar sup-F-vat-ADJ sup-F-ii)
  (defvar sup-N-vat-ADJ sup-N-normal)
  (defvar sup-M-mat sup-M-normal)
  (defvar sup-F-mat sup-F-ii)
  (defvar sup-N-mat sup-N-normal)
  (defvar sup-M-mat-ADJ sup-M-normal)
  (defvar sup-F-mat-ADJ sup-F-ii)
  (defvar sup-N-mat-ADJ sup-N-normal)
  (defvar sup-M-at-ADJ sup-M-normal)
  (defvar sup-F-at-ADJ sup-F-ii)
  (defvar sup-N-at-ADJ sup-N-normal)
  (defvar sup-M-iiyas-ADJ sup-M-normal)
  (defvar sup-F-iiyas-ADJ sup-F-ii)
  (defvar sup-N-iiyas-ADJ sup-N-normal)
  (defvar sup-F-in sup-F-ii)
  (defvar sup-M-in-ADJ sup-M-in)
  (defvar sup-F-in-ADJ sup-F-in)
  (defvar sup-N-in-ADJ sup-N-in)
  (defvar sup-F-an sup-F-ii)
  (defvar sup-M-an-ADJ sup-M-an)
  (defvar sup-F-an-ADJ sup-F-an)
  (defvar sup-N-an-ADJ sup-N-an)
  (defvar sup-F-vas-ADJ sup-F-ii)
  (defvar sup-N-vas-ADJ sup-N-normal)
  (defvar sup-F-ach-ADJ sup-F-ii)
  (defvar sup-M-aach-ADJ sup-M-ach-ADJ)
  (defvar sup-F-aach-ADJ sup-F-ii)
  (defvar sup-N-aach-ADJ sup-N-ach-ADJ)
  (defvar sup-M-3cons sup-M-normal)
  (defvar sup-F-3cons sup-F-normal)
  (defvar sup-N-3cons sup-N-normal)
  (defvar sup-M-IRR sup-empty)
  (defvar sup-F-IRR sup-empty)
  (defvar sup-N-IRR sup-empty)
  (defvar sup-N-i1 sup-N-normal)
  (defvar sup-M-o ; from a stem that drops o (e.g.,for 'go', from 'g')
  (defvar sup-F-o sup-M-o)
  (defvar sup-M-au sup-F-au)
  (defvar luT-1-P-strengths [S S S  S S S  S S S])
  (defvar luT-1-A-strengths [S S S  S S S  S S S])
  (defvar lRiT-1-P-strengths [S S S  S S S  S S S])
  (defvar lRiT-1-A-strengths [S S S  S S S  S S S])
  (defvar lRi~N-1-P-strengths [S S S  S S S  S S S])
  (defvar lRi~N-1-A-strengths [S S S  S S S  S S S])
  (defvar aashiirli~N-1-P-strengths [W W W  W W W  W W W])
  (defvar aashiirli~N-1-A-strengths [S S S  S S S  S S S])
  (defvar lu~N1-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N2-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N2-1-A-strengths [S S S  S S S  S S S])
  (defvar lu~N3-1-P-endings lu~N2-1-P-endings)
  (defvar lu~N3-1-A-endings lu~N2-1-A-endings)
  (defvar lu~N3-1-P-strengths lu~N2-1-P-strengths)
  (defvar lu~N3-1-A-strengths lu~N2-1-P-strengths)
  (defvar lu~N4-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N4-1-A-strengths [S S S  S S S  S S S])
  (defvar lu~N5-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N5-1-A-strengths [S S S  S S S  S S S])
  (defvar lu~N6-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N7-1-P-strengths [S S S  S S S  S S S])
  (defvar lu~N7-1-A-strengths [S S S  S S S  S S S])
  (defun solution (x)
  CALLS: ['y', 'while', 'length']
  (defun flatten (in)
  CALLS: ['i', 'length', 'while', '<', 'elt', '1+', '(stringp', 'append', '(sequencep', 'flatten']
  (defun list-replace (l old new)
  CALLS: ['lambda', 'x', 'if']
  (defun construct-endings-all ()
  CALLS: ['bufin', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'construct-endings-1', 'construct-endings-2', 'elt', 'vconcat', 'mapcar', 'sup-get', 'x', 'while', 'w', 'gen-word-list', 'symbol-name', 'if', 'length', 'fol-msg', 'format', 'mapconcat', 'plist-get', '(equal', 't', 'lambda', 'strength', 'endings', 'plist-get2', 'S', 'tmp', 'M', 'i', 'preceded', 'a', 'ni', 'nI', 'Ri', 'RI', 'save-buffer', 'defun', 'gender', 'goto-char', 'point-max', 'insert', 'format-endings', 'endings-in', 'ans', '(member', 'P', 'translate-ITRANS-SLP1', '<', 'sym-without-space', 'e1', 'concat', '1+']
  (defun init-one-sup (endar-sym)
  CALLS: ['i', 'eval', 'ITRANS-parse-words-1', 'list-replace', 'sublist-gather', 'vconcat', 'sanput']
  (defun sublist-gather (xin open-list close-list)
  CALLS: ['xout', 'length', 'while', '<', 'elt', '1+', '(equal', 'xin1', 'if', 'append', 'when', 'sublist-gather', 'vconcat', 'fol-msg', 'format']
  (defun init-ending-consonants ()
  CALLS: ['(k', 'kh', 'g', 'gh', '~N', 'ch', 'Ch', 'j', 'jh', '~n', 'T', 'Th', 'D', 'Dh', 'N', 't', 'th', 'd', 'dh', 'n', 'p', 'ph', 'b', 'bh', 'm', 'y', 'r', 'l', 'v', 'h', 'Sh', 'sh', 's', 'H', 'M']
  (defun init-one-vsup (sup-sym)
  CALLS: ['sup-string', 'symbol-name', 'sym', 'intern', 'format', 'eval', 's', 'string-match', 'substring', '1+', 'ITRANS-parse-words-1', 'vconcat', 'length', 'while', '<', 'elt', 'when', 'aset', 'sanput', 'append']
  (defun init-one-vsup-strength (sup-sym)
  CALLS: ['sup-string', 'symbol-name', 'intern', 'format', 'when', 'condition-case', 'eval', 'sanput', 'error']
  (defun init-vsup-list ()
  CALLS: []
  (defun init-vsup ()
  CALLS: ['init-vsup-list', 'all', 'while', 'init-one-vsup', 'init-one-vsup-strength', 'init-ADJ-a-endings', 'init-explain-subanta-endings', 'init-conjtab-endings', 'init-causal-endings', 'init-PRESPART-endings', 'init-PASSPART-endings', 'init-PPPART-endings', 'init-RPPART-P-endings', 'M']
  (defun Subanta-initAll ()
  CALLS: ['put']
  (defun Subanta-initElt (prop)
  CALLS: ['sanput']
  (defun init-gender-form-data ()
  CALLS: ['(M', 'F', 'N', 'M', 'PRON', 'ADJ', '(F', '12-09-03', '(ADJ', 'append']
  (defun init-sup-list ()
  CALLS: ['init-gender-form-data', 'all', 'while', 'gender', 'elt', 'when', 'M', 'format', 'intern', 'append']
  (defun init-sup ()
  CALLS: ['all', 'init-sup-list', 'init-gender-form-data', 'while', 'init-one-sup']
  (defun sup-get (v1 v2 &optional pfx sym)
  CALLS: ['prop', 'if', 'intern', 'format', 'sanget', 'fol-msg', 'vectorp', 'vconcat']
  (defun conj-endings (tense-sym class pada)
  CALLS: ['conj-class', 'if', '1', 'format', 'intern-soft', 'sanget', 'copy-sequence']
  (defun conj-strengths (tense-sym class pada)
  CALLS: ['conj-class', 'if', '1', 'format', 'intern-soft', 'sanget', 'copy-sequence']
  (defun old-init-class-a-mod-endings ()
  CALLS: ['ans', 'laT', 'while', 'modify-conj-endings-1', 'mapcar', 'append']
  (defun init-causal-endings ()
  CALLS: ['laT', 'P', 'ayitaa', 'ayitaarau', 'ayitaaraH', 'ayitaase', 'ayitaasaathe', 'ayitaadhve', 'ayitaahe', 'ayitaasvahe', 'ayitaasmahe', 'ayiShyate', 'ayiShyete', 'ayiShyante', 'ayiShyase', 'ayiShyethe', 'ayiShyadhve', 'ayiShye', 'ayiShyaavahe', 'ayiShyaamahe', 'ayiShyata', 'ayiShyetaam', 'ayiShyanta', 'ayiShyathaaH', 'ayiShyethaam', 'ayiShyadhvam', 'ayiShyaavahi', 'ayiShyaamahi', 'ayiShiiShTa', 'ayiShiiyaastaam', 'ayiShiiran', 'ayiShiiShThaaH', 'ayiShiiyaasthaam', 'ayiShiidhvam', 'ayiShiiya', 'ayiShiivahi', 'ayiShiimahi', 'iShaataam', 'iShata', 'iShThaaH', 'iShaathaam', 'idhvam', 'iShi', 'iShvahi', 'iShmahi', 'aamaasa', 'aamaasatuH', 'aamaasuH', 'aamaasitha', 'aamaasathuH', 'aamaasiva', 'aamaasima', 'aamaase', 'aamaasaate', 'aamaasire', 'aamaasiShe', 'aamaasaathe', 'aamaasidhve', 'aamaasivahe', 'aamaasimahe']
  (defun init-conjtab-endings ()
  CALLS: ['laT', 'P', 'aamaasa', 'aamaasatuH', 'aamaasuH', 'aamaasitha', 'aamaasathuH', 'aamaasiva', 'aamaasima']
  (defun init-PRESPART-endings ()
  CALLS: ['M', 'tii', 'tyau', 'tyaH', 'tiim', 'tiiH', 'tyaa', 'tiibhyaam', 'tiibhiH', 'tyai', 'tiibhyaH', 'tyaaH', 'tyoH', 'tiinaam', 'tyaam', 'tiiShu', 'ti']
  (defun init-PASSPART-endings ()
  CALLS: ['M']
  (defun init-PPPART-endings ()
  CALLS: ['PPPART', 'kta', 'M', 'ktavat']
  (defun init-ADJ-a-endings ()
  CALLS: ['M']
  (defun get-ADJ-a-endings (base gender)
  CALLS: ['if', 'nN-P', 'plist-get']
  (defun nN-P (base)
  CALLS: ['if', 'sandhi-single', 'sym-concat']
  (defun init-RPPART-P-endings ()
  CALLS: []
  (defun make-explain-subanta-endings (form)
  CALLS: ['toks', 'fol-msg', 'format', '%s\\n"', 'lambda', 'g', 'sup-get', 'tok', 'if', 'mapcar', 'solution', 'vconcat', 'M']
  (defun init-explain-subanta-endings ()
  CALLS: ['yai', 'yaaH', 'yaam', 'ine', 'inaH', 'inoH', 'ini', 'i', 'iNe', 'iNaH', 'iNoH', 'iNi', 'vai', 'vaaH', 'vaam', 'u', 'uH', 'uu', 'avaH', 'um', 'uuH', 'vaa', 'ubhyaam', 'ubhiH', 'ubhyaH', 'voH', 'uunaam', 'uShu', 'o', 'une', 'unaH', 'unoH', 'uni', 'uuNaam', 'uNe', 'uNaH', 'uNoH', 'uNi']
  (defun get-explain-subanta-endings (type form base gender)
  CALLS: ['fol-msg', 'format', 's', 'if', 'nN-P', 'intern', 'plist-get2', 'imperfect', 'imperative', 'potential,', 'incomplete', 'method', 'S', 'this', 'vocative', 'section', 'i.e', 'except', 'balii', 'raajaa', 'vol2,', 'p.', '11-22-03', 'antelope', 'way,', 'sun', 'e.g.,for']
explain.el 93 33
  (defvar explain-dbg nil)
  (defvar explain-pflag t)
  (defvar explain-pchk nil)
  (defvar explain-ans nil)
  (defvar explain-verbosity nil)
  (defvar explain-shortest-flag t)
  (defvar upasarga-Implied-flag nil)
  (defvar explain-upasarga-alwaysTry t)
  (defvar explain-exclude-types nil)
  (defvar explain-verb-forms)
  (defvar explain-part-forms)
  (defvar explain-ADJ-forms)
  (defvar explain-upasarga-forms)
  (defvar explain-other-forms)
  (defvar explain-pr-forms)
  (defvar explain-forms)
  (defvar save-explain-forms)
  (defvar save-explain-upasarga-forms)
  (defvar explain-forms-aagama)
  (defvar declension-buffer nil)
  (defvar declension-buffer-key nil)
  (defvar explain-knowlev nil)
  (defvar explain-step2-num 0)
  (defvar explain1-cur nil)
  (defvar explain1-cur1 nil)
  (defvar explain1-cpd nil)
  (defvar explain1-cpd1 nil)
  (defvar explain1-cur-pr nil)
  (defvar explain1-cpd-pr nil)
  (defvar cpd-flags nil)
  (defvar explain-dhaatu-plist nil)
  (defvar cpd-form nil)
  (defvar san-key-sfx nil)
  (defun explain-chapsII (n1 &optional n2)
  CALLS: ['sfxes', 'if', 'numberp', 'while', '<=', 'append', '1+', 'explain-file', 'format']
  (defun explain-chaps (n1 &optional n2)
  CALLS: ['sfxes', 'if', 'numberp', 'while', '<=', 'append', '1+', 'savelev', 'exclude-form', 'explain-file', 'format', 'init-explain-forms']
  (defun explain-chk (chap)
  CALLS: ['qfile', 'explain-chaps', 'format', 'fol-msg', 'explain-file', 'compare-table-files', 'if']
  (defun explain-chk-chaps (n1 n2)
  CALLS: ['i', 'while', '<=', 'explain-chk', '1+']
  (defun read-explain-file (file)
  CALLS: ['ans', 'read-colon-file-table', 'mapcar', 'while', 'when', 'fol-msg', 'format', 'append', 'read-explain-file1a']
  (defun read-explain-file1a (s)
  CALLS: ['ans', 'while', 'numberp', 'when', 'append', 'flatten']
  (defun compare-table-files (file1 file2)
  CALLS: ['s1', 'read-explain-file', 'length', 'when', 'fol-msg', 'format', 'i', 'while', '<', 'elt', 'compare-table-files1a', 'lambda', 'y', 'y1', '%s', '1+']
  (defun compare-table-files1a (x y)
  CALLS: ['ans', '(equal', '(or', '(not', 'length', 'x1', 'while', 'when', 'copy-sequence', 'compare-table-files1b', '(and', '<', 'fol-msg', 'format', 'y3', 'append', 't', 'sort']
  (defun compare-table-files1b (x)
  CALLS: ['ans', 'when', 'while', 'append']
  (defun lt-stringRep (x y)
  CALLS: ['string<', 'format']
  (defun explain-all-files ()
  CALLS: ['mapcar']
  (defun explain-file (vfile)
  CALLS: ['bufout', 'if', 'concat', 'fol-msg', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'read-colon-file-table', 'explain-file1', 'save-buffer', 'kill-buffer']
  (defun explain-file1 (data)
  CALLS: ['n', 'fol-msg', 'format', 'length', 'while', '1+', 'elt', 'if', '<', 'chapnum', 'mapconcat', 'message', 'explain']
  (defun explain-chap-unknowns (chap)
  CALLS: ['file', 'format', 'read-colon-file-table', 'length', 'while', '<', 'elt', '1+', 'lambda', 'x', 'when', 'unknown']
  (defun explain-chap-unknowns-all ()
  CALLS: ['chaps', 'lambda', 'chap', 'n', 'explain-chap-unknowns', 'if', 'fol-msg', 'format']
  (defun explain-Antoine1 (&optional chk)
  CALLS: ['mapcar', 'lambda', 'x', 'if', 'message', 'format', 'fol-msg', 'current-time-string', 'explain-chk', 'explain-chaps', '2']
  (defun explain-pr (ans)
  CALLS: ['ians', 'length', 'while', '<', 'x', 'elt', '1+', 'if', 'fol-msg', 'format', 'explain-pr0']
  (defun explain-pr0 (pfxin ians sym expls)
  CALLS: ['explpfx', 'if', 'format', 'fol-msg', 'lambda', 'expl', '1+', 'explain-pr1']
  (defun explain-pr1 (pfxin jexpl expl)
  CALLS: ['j', 'format', 'plist-get', 'if', 'fol-msg', 'see', 'x2', 'lambda', 'x', 'substring', 'while', '1+', '(or', 'vector', '<=', 'length', 'ERROR', '(and', '<', 'elt', 'w', 'pfx1', 'explain-pr-CPD-item', 'plist-put', '%s', 'explain-pr-item', 'explain-CPD-straighten', 'progn', 'explain-pr-CPD', 'x4', 't', 'explain-pr0']
  (defun explain-pr-item (pfx defs)
  CALLS: ['x', 'explain-pr-keyval-modify-a', 'flatten', 'fol-msg', 'format', 'make-string', 'length', 'elt', 'while']
  (defun explain-pr-CPD-item (pfx cpds)
  CALLS: ['cpd', 'fol-msg', 'format', 'while', '1+', 'elt', 'explain-pr-CPD']
  (defun explain-CPD-straighten (csym)
  CALLS: ['cprev', 'while', 'plist-get', '(not', 'append', 'length', 'vectorp', 'elt', 'fol-msg', 'format', 'solution', 'if']
  (defun explain-pr-CPD (pfx wlist)
  CALLS: ['j', 'while', '1+', 'if', 'plist-get', 'fol-msg', 'format', 'see', 'pfx1', 'explain-pr-item', 'plist-put', 'cpds', 'explain-pr-CPD-item']
  (defun explain-pr-keyval-modify-a (xin)
  CALLS: ['x', 'solution', 'if', 'symbolp', 'mapcar']
  (defun explain-pr-keyval-modify (xlist)
  CALLS: ['ans', 'vconcat', 'length', 'make-vector', 'while', '<', 'elt', 'aset', '1+', 'when', 'fol-msg', 'format', 'explain-pr-keyval-modify1', 'append']
  (defun explain-pr-keyval-modify1 (x)
  CALLS: ['key', 'ifx', 'lambda', 'x0', 'elt', 'vector', 'append-if-new', 'if', 'append', 'vconcat', 'length', 'while', '<', 'this', 'when', 'aset', '1+', 'kv', 'solution']
  (defun explain (string &optional optional)
  CALLS: ['ans', 'tmp', 'sandhi-separate3-str', 'elt', 'length', 'make-vector', 'while', '<', 'word-list', 'thisans', 'explain-exactly-1', 'when', 'append', 'explain-exactly-1-shortest', 'aset', '1+', 'explain-pr']
  (defun explain-exactly-1 (sym1 &optional verbose)
  CALLS: ['explain-declension-init', 'when', 'fol-msg', 'format', 'verbose=%s', 'ans1', 'praatar-modify', 'explain1', '(string-match', 'symbol-name', 'explain-pair', 'explain-single', '(and', 'ans2a', 'ans2b', 'if']
  (defun explain-single (sym)
  CALLS: ['explain1']
  (defun explain1 (sym1)
  CALLS: ['when', 'fol-msg', 'format', 'ans', 'plist-get', 'explain1a', 'plist-AppendElt', 'vector', 'explain-cpd', 'if']
  (defun explain-cpd (sym &optional verbose)
  CALLS: ['when', 'fol-msg', 'format', 'verbose=%s', 'seps', 'cons', 'cpd-separate', 'while', 'sep', 'elt', 'explain-cpd1', 'explain-cpd', 'plist-AppendElt', 'vconcat']
  (defun explain-cpd1 (sym1 cpd-form-in)
  CALLS: ['ans', 'plist-get', 'when', 'explain-str', 'symbol-name', 'lambda', 'thisans', 'append', 'plist-AppendElt', 'if']
  (defun explain1a (sym1)
  CALLS: ['if', 'fol-msg', 'format', 'string', 'symbol-name', 'explain-str', 'plist-AppendElt', 'upasarga-forms', 'while', 'elt', 'append-if-new']
  (defun explain-pair (sym &optional verbose)
  CALLS: ['ans', 'explain-pair1']
  (defun explain-pair1 (sym &optional verbose)
  CALLS: ['seps', 'sandhi-separate', 'while', 'sep', 'elt', 'explain1', 'explain-pair1', 'when', 'plist-AppendElt', 'vconcat']
  (defun cpd-separate (sym)
  CALLS: ['ans', 'vowel-separate', 'cons-separate', 'sandhi-separate', 'append']
  (defun vowel-separate (sym)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'length', 'if', 'while', '<', '1+', 'substring', 'sym-without-space', 'vconcat', 'flatten', 'vector', 'append', '+']
  (defun cons-separate (sym)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'length', 'while', '<', '1+', 'when', 'substring', 'vconcat', 'flatten', 'sym-without-space', 'vector', 'append']
  (defun explain-exactly-1-shortest (expls)
  CALLS: ['fol-msg', 'format', 'explain-exactly-1-shortest-remove-aa', 'if', 'expl', 'vconcat', 'length', 'EXPX1', 'EXP1-or-EXPPAIR', 'while', '<', 'elt', '1+', 'when', 'newexpls', 'append', 'aset', 'sym', 'apply', 'mapcar', '=', 'cons']
  (defun explain-exactly-1-shortest-remove-aa (expls)
  CALLS: ['expl', 'vconcat', 'length', 'EXPX1', 'EXP1-or-EXPPAIR', 'while', '<', 'elt', '1+', 'when', 'newexpls', 'append', 'if', 'sym', 'solution', 'fol-msg', 'format', 'lambda', 'x1', 'symbolp', 'shortest-check', 'cons']
  (defun shortest-check (syms)
  CALLS: ['sym', 'while', 'aa']
  (defun praatar-modify (sym1)
  CALLS: ['(equal', 't']
  (defun explain-str (s theforms &optional extra)
  CALLS: ['when', 'fol-msg', 'format', 'the', 'theforms1', 'forms', 'while', 'if', 'append-if-new', 'explain-str-step1-incr', 's-aagamas', 'inverse-aagama']
  (defun explain-str-step1-incr (s s0 theforms &optional extra)
  CALLS: ['when', 'fol-msg', 'format', 's-sym', 'intern', 'ITRANS-parse-words-1', 'length', 'while', '<=', 'sym-without-space', 'substring', 'if', '=', '1+', '(equal', 'Xsangetall', 'explain-str-step2', 'append-if-new']
  (defun explain-str-step2 (s-sym san-key san-key-info expforms &optional extra)
  CALLS: ['1+', 'when', 'fol-msg', 'format', 'formans', 'while', '(equal', 'sub-info-key', 'plist-get', 'explain-str-step2-CAUSAL', 'if', 'symbolp', 'elt', 'tense-sym', 'update-form-ans', 'explain-str-subanta', 'COMPAR', 'explain-ADJ-degree', 'explain-str-INDECL', 'defun', 't']
  (defun update-form-ans (formans ans xtype)
  CALLS: ['when', 'VERB', 'mapcar', 'cons', 'append-if-new', 'skipped', 'while', 'thisans', 'elt', 'append']
  (defun adjust-dhaatu-forms (forms upa-syms)
  CALLS: ['ans', 'while', 'sym-dcpu', 'elt', 'when', 'append-if-new', 'dcpu-sym', '(not', 'sanget2', 'dhaatu', 'defun', 's-sym', 'fol-msg', 'format', 'explain-knowlev-P', 'stense', 'symbol-name', 'substring', 'intern', 'getdhaatu', 'solution', 'if', 'i', '(equal', 'plist-get2', 'base', 'nN-P', 'loT', 'length', '<', 'join-arrays', '1+', 't', 'v', 'temp', 'lambda', 'x', 'form', 'sym-concat']
  (defun explain-knowlev-P (xtype &rest args)
  CALLS: ['', 'fol-msg', 'format', '(equal', 'laT-P', 'dhaatu', 'elt', '(member', 'kRi', '1', 't', 'tense', 'if', 'laT', 'defun', 's-sym', 'when', 'ans', '(and', 'progn', 'explain-PART-IPP', 'explain-PART-INF', 'explain-str-PART1', 'while', 'sym-dcpu', 'getdhaatu', 'PRESPART', 'M', 'base', 'plist-get2', 'PPPART', 'get-ADJ-a-endings', 'strength', 's', 'symbol-name', 'intern', 'substring', 'RPPART', 'as', 'length', '<', 'symbolp', 'append-if-new', '1+', 'gerund', 'dcpu-sym', 'sanget2']
  (defun explain-str-subanta (s-sym san-key san-key-info subanta-type)
  CALLS: ['if', 'explain-str-subanta-cpd', 'explain-str-subanta-normal']
  (defun explain-str-subanta-normal (s-sym san-key san-key-info subanta-type)
  CALLS: ['ans', 'when', 'fol-msg', 'format', 'while', 'gender-forms', 'M', 'base', 'sanget2', 'data1', 'if', 'elt', '(or', '(M', 'N', 'F', 'get-ADJ-a-endings', 'i', 'get-explain-subanta-endings', 'explain-substring-subanta1']
  (defun explain-str-subanta-cpd (s-sym san-key san-key-info subanta-type)
  CALLS: ['ans', 'when', 'fol-msg', 'format', 'while', 'gender-forms', 'M', 'base', 'sanget2', 'data1', 'if', 'elt', '(equal', 'tok', '%s', 'ITRANS-parse-words-1', 'symbol-name', '<=', 'length', 'substring', 'sym-without-space', 'append-if-new', 'defun', 'm', '<', 'symbolp', 'append', '1+']
  (defun explain-ADJ-degree (s-sym san-key san-key-info)
  CALLS: ['subanta-type', 'plist-get2', 'when', 'fol-msg', 'format', 'while', 'gender-forms', 'sanget2', 'if', 'elt', 'base', 'get-ADJ-a-endings', 'get-explain-subanta-endings', 'sym-concat', '%s', 'ITRANS-parse-words-1', 'symbol-name', 'vconcat', 'substring', 'declension-join', '+', 'length', '(<', '(equal', 'newdata', 'sym-without-space', 'construct-subanta1', 'M', '<', 'thisans', 'append', 'explain-subanta-makeans', '1+', 'defun', 'subanta', 'key0', 'solution', 'vector']
  (defun explain-str-INDECL (s-sym san-key san-info)
  CALLS: ['s', 'intern', 'sanget', 'plist-get', 'when', 'plist-get2', 'avyayapada', 'fol-msg', 'format', 'remove-INDECL-upasarga']
  (defun upasarga-forms (s &optional oldans)
  CALLS: ['ans', 'upasarga-forms2', 'fol-msg', 'format', 'thisans', 'while', 'when', 'elt', 'append-if-new', 'upasarga-forms', 'symbol-name', 'disjoint-P', 'append']
  (defun upasarga-forms2 (s)
  CALLS: ['ansx', 'upasarga-forms1', 'while', 'elt', '(equal', 'nir', 'nis', 'append-if-new']
  (defun upasarga-forms1 (s)
  CALLS: ['ans', 'upasarga-forms-nosandhi', 'upasarga-forms-sandhi', 'append', 'pfxsym', 'pfxdef-syms', '(pfxsym1', '(pfxdef1-syms', 'lambda', 'x', 'thisans', 'elt', 'ITRANS-parse-words-1', 'symbol-name', 'if', 'upasarga-forms1-check', 'append-if-new']
  (defun upasarga-forms1-check (pfx-sym sfx-sym)
  CALLS: ['pfx', 'copy-sequence', 'symbol-name', 'old', 'string-match', 'when', 'sfx2', 'aset', 'intern', 'sym-without-space', 'vector', 'ITRANS-parse-words-1', 'sandhi-n-N']
  (defun upasarga-forms-sandhi (s)
  CALLS: ['ans', 'sandhi-separate', 'intern', 'while', 'pair', 'elt', 'upasarga-P', 'when', 'append']
  (defun upasarga-forms-nosandhi (s)
  CALLS: ['ans', 'length', '1-', 'while', '<', 'substring', 'upasarga-P', 'intern', 'when', 'sym1', 'append', '1+']
  (defun saveold-upasarga-P (sym)
  CALLS: ['other-info', 'sanget2', 'avyayapada', 'when', 'fol-msg', 'format', 'while']
  (defun upasarga-P (sym &optional code)
  CALLS: ['other-info', 'if', 'upasargas-get']
  (defun SL-upasarga-P (sym &optional code)
  CALLS: ['other-info', 'if', 'SL-upasargas-get']
  (defun upasargas-get (code)
  CALLS: ['standard_upasargas', 'also', '(equal', 'append']
  (defun SL-upasargas-get (code)
  CALLS: ['standard_upasargas', 'also', '(equal', 'append']
  (defun SL-upasarga-forms (s)
  CALLS: ['definition', 'sym', 'intern', 'translate-SLP1-ITRANS', 'symbol-name', 'upasarga-forms', 'while', 'elt', 'translate-ITRANS-SLP1', 'cons', 'fol-msg', 'format', 'SL-upasarga-forms1', 'nreverse']
  (defun SL-upasarga-forms1 (old-forms)
  CALLS: ['SL-upasarga-forms', '((aBi', 't', '(aBi', 'ans', 'while', 'elt', 'symbol-name', 'fol-msg', 'format', '(<', 'length', '(not', 'substring', '(let', 'lastpfx', 'nreverse', '"i"', 'intern', 'concat', 'cons']
  (defun inverse-aagama (s)
  CALLS: ['a~Nga', 'ITRANS-parse-words-1', 'elt', '(not', 'vowel-P', '(equal', 'substring', 'inverse-vrddhis', 'while', 'symbol-name', 'sym-without-space', 'append-if-new', 'defun', 'tense-sym', 'key0', 'if', 'append', '08-06-03', 'when', 'progn', 'vector', 'fol-msg', 'format', 'mapcar', 'solution']
  (defun explain-PRON (s-sym a~Nga san-info)
  CALLS: ['fol-msg', 'format', 'ans', 'sanget2', 'PRON', 'plist-get2', 'while', 'ai', 'subanta', 'aham', 'tat', 'a', 'tvam', 'elt', 'when', 'a~Nga', 'praatipadikas', 'M', 'explain-declension-pron', 'length', '<', 'symbolp', 'append-if-new', '1+', 'defun', 'key0', 'sym-without-space', 'vector', 'solution']
  (defun explain-ADJ (s-sym a~Nga san-info)
  CALLS: ['ans', 'plist-get2', 'ADJ', 'while', 'ai', 'subanta', 'diirgha', 'fol-msg', 'format', 'when', 'elt', 'sanget2', 'a~Nga', '6-22-03', 'x', 'si', '(equal', '(and', '', 'M', 'explain-declension-adj', 'length', '<', 'symbolp', 'append-if-new', '1+', 'defun', 'key0', 'sym-without-space', 'vector', 'solution', 'if', 'type', 'append', '08-06-03', 'progn', 'mapcar', 'explain-PART-IPP-makeans']
  (defun remove-INDECL-upasarga (x-list)
  CALLS: ['ans', 'while', 'xtype', 'xdef', 'if', 'solution', 'append']
  (defun extract-Subanta ()
  CALLS: ['all', 'sangetall', 'while', 'length', '<', 'x', 'extract-Subanta1', 'elt', '1+', 'fol-msg', 'format']
  (defun extract-Subanta1 (x sym)
  CALLS: ['an', 'if', 'vector', 'ans', 'length', '1-', 'elt', 'substring', 'when', 'vconcat', 'append', 'replace-n', 'sym-name', 'symbol-name', 'string-match', 'i']
  (defun replace-n (x)
  CALLS: ['ans', 'vconcat', 'sandhi-n-N', 'when', 'substring', 'fol-msg', 'format']
  (defun inverse-vrddhis (tok)
  CALLS: ['ans', 'length', 'mapcar', 'lambda', 'v', 'vrddhi-tok', 'sanget', '<=', 'substring', 'when', 'vconcat', 'vector', 'append']
  (defun check-duals (w1 ans1 w2)
  CALLS: ['Antoine', 'xtype', 'elt', 'sym-ends-with', 'ii', 'vowel-P', 'sym-begins-with', 'while', 'expl', 'lataa', 'like', 'when', 'if', 'append', 'cons']
  (defun init-explain-forms ()
  CALLS: ['explain-upasarga-forms-nonpfx', '(VERB', 'VERB', '(PART', 'PART', 'append', '(ADJ', '(NOUN', 'INDECL', 'PRON', 'dhaatu']
  (defun explain-declension-init (sym)
  CALLS: ['']
  (defun explain-declension-get (type key)
  CALLS: ['ans', 'while', 'when', 'cadr', 'fol-msg', 'format']
  (defun explain-declension-put (type key ans)
  CALLS: ['tk', 'fol-msg', 'format', 'append-if-new']
  (defun explain-declension-noun (subanta)
  CALLS: ['ans', 'explain-declension-get', 'when', 'declension-citation', 'explain-declension-put']
  (defun explain-declension-perperf-part (praatipadikas gender pada)
  CALLS: ['active', 'ans', 'fol-msg', 'format', 'explain-declension-get', 'when', 'declension-perperf-part', 'explain-declension-put']
  (defun explain-declension-pron (subanta praatipadikas gender form-sym)
  CALLS: ['ans', 'explain-declension-get', 'when', 'declension-pron', 'explain-declension-put']
  (defun explain-declension-adj (subanta praatipadikas gender form-sym)
  CALLS: ['ans', 'explain-declension-get', 'when', 'declension-adj', 'explain-declension-put']
  (defun explain-conjugation (a~Nga tense-sym classtmp padatmp dhaatu)
  CALLS: ['ans', 'fol-msg', 'format', 'explain-declension-get', 'when', 'conjugation-tab', 'explain-declension-put']
  (defun Sx1 (s)
  CALLS: ['ans', 'length', '1+', 'while', '<', 'substring', 'fol-msg', 'format', 'Sx1-pfx', 'data', 'elt', '(equal', 'category', 'if', '(M', 'N', 'F', 'M', 'SL-n-P', 'when', 'Sx1-endmatch', 'Sx1-updateans', 'a', 'append', 'class', 'tmp', '(and', '1', '1S', 'cons', '(arrayp', 'Sx1-tabmatch', 'concat', '(numberp', '(not', 'sym-without-space']
  (defun Sx1-updateans (ans word parms ans1 dict)
  CALLS: ['thisans', 'while', 'cons']
  (defun Sx1-tabmatch (s tab inflection)
  CALLS: ['fol-msg', 'format', 'ans', 'length', 'while', '<', 'elt', 'if', 'mapcar', 'lambda', 'sym2', 'symbolp', 'when', 'symbol-name', '(equal', 'sym-without-space', 'cons', '1+']
  (defun Sx1-pfx (pfx)
  CALLS: ['bufin', 'format', 'while', 'Sx1-pfxa']
  (defun Sx1-pfxa (regexp filename ans)
  CALLS: ['word', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read', 'current-buffer', 'if', 'symbol-name', 'when', 'elt', 'p', 'point', 'beginning-of-line', 'substring', 'concat', 'intern', 'cons']
  (defun Sx1-endmatch (regexp &optional bufin)
  CALLS: ['ans', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read', 'current-buffer', 'cons']
  (defun SL-n-P (base)
  CALLS: ['x', 'if', 'symbolp', 'symbol-name', 'sandhi-single', 'translate-SLP1-ITRANS', 'intern', 'concat']
  (defun SL-n-P0 (base)
  CALLS: ['x', 'if', 'symbolp', 'intern', 'translate-SLP1-ITRANS', 'symbol-name', 'ITRANS-parse-words-1', 'sandhi-n-N']
  (defun old-Sx1-pfxa (regexp filename ans)
  CALLS: ['word', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read', 'current-buffer', 'when', 'p', 'point', 'beginning-of-line', 'cons']
fileutil.el 21 0
  (defun write-table-file (nout out filename &optional dirname)
  CALLS: ['fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'while', '<', 'elt', '1+', '(arrayp', 'append', '(not', 'fol-msg', 'format', 'when', 'save-buffer', 'kill-buffer']
  (defun read-colon-file-table (tabname nfields &optional dirname)
  CALLS: ['filename', 'if', 'sangram-filename', 'read-colon-file']
  (defun read-colon-file-validation (fname nfields)
  CALLS: ['filename', 'san-validation-filename', 'read-colon-file']
  (defun read-colon-file (filename nfields)
  CALLS: ['buf', 'find-file-noselect', 'fol-msg', 'format', 'read-colon-buffer']
  (defun read-colon-buffer (buf nfields &optional sep)
  CALLS: ['nline', 'if', 'with-current-buffer', 'point-max', 'point-min', 'while', '<', 'mod', 'message', 'format', 'goto-char', 'end-of-line', 'point', 'buffer-substring', 'a~nch', 'read-colon-line', '1+', 'gather-fields', '=', 'length', 'when', 'fol-msg', 'vconcat', 'append', 'cons', 'kill-buffer', '', 'nreverse']
  (defun read-colon-line (stemp)
  CALLS: ['a~nch', 'x', 'insert', 'goto-char', 'while', 'condition-case', 'read', 'current-buffer', 'append', 'error']
  (defun read-colon-line-fields (stemp sep)
  CALLS: ['xin', 'read-colon-line', 'gather-fields']
  (defun read-string-fields (s sep &optional keepsep)
  CALLS: ['ans', 'insert', 'goto-char', 'read-buffer-fields']
  (defun read-buffer-fields (sep &optional keepsep)
  CALLS: ['ans', 'end-of-line', 'point', 'beginning-of-line', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'cons', 'when', 'match-end', 'nreverse']
  (defun read-expr-file-table (tabname nfields &optional dirname)
  CALLS: ['filename', 'if', 'sangram-filename', 'read-expr-file']
  (defun read-expr-file (filename nfields)
  CALLS: ['buf', 'find-file-noselect', 'fol-msg', 'format', 'read-expr-buffer']
  (defun read-expr-buffer (buf &optional nfields skips)
  CALLS: ['nline', 'with-current-buffer', 'point-min', 'goto-char', 'point-max', 'while', '<', 'read', 'current-buffer', 'if', 'cons', 'point', 'fol-msg', 'format', 'nreverse', 'kill-buffer', '']
  (defun gather-fields (xin separator)
  CALLS: ['fol-msg', 'format', 'when', 'xfields', 'while', '(equal', 'append', 'vconcat', 'vector']
  (defun load-roots-seT ()
  CALLS: ['load-dhaatu-data']
  (defun load-dhaatu-data (tabname &optional subkey do-inversion)
  CALLS: ['nrec', 'if', '', 'read-colon-file-table', 'length', 'while', '<', 'elt', 'dhaatu', 'fol-msg', 'format', 'field0', 'upasarga', 'upasarga1', '(=', 'vec0', 'vconcat', 'substring', '1-', 'append', 'solution', 'sanput2', 'sanAppendElt2', 'when', 'thisval', 'sanAppendElt', '1+']
  (defun fol-delete-files (dirin ending &optional verbose)
  CALLS: ['ans', 'file-name-as-directory', 'fol-filename', 'directory-files', 'when', 'fol-msg', 'format', 'while', 'substring', 'length', '-', 'string=', 'delete-file', '1+']
  (defun sangram-clean ()
  CALLS: ['dir', 'while', 'fol-delete-files', 'format']
  (defun remove-duplicate-lines (intab indir &optional remove-orig)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'p1', 'current-line', 'end-of-line', 'search-forward', 'beginning-of-line', 'kill-line', '1+', 'if', 'forward-line', 'save-buffer', 'kill-buffer']
  (defun non-system-files (dir)
  CALLS: ['files', 'directory-files', 'while', 'when', 'substring', 'cons', 'nreverse']
  (defun dispLineLim (file)
  CALLS: ['with-current-buffer']
  (defun fol-search-files (dirin regexp &optional verbose)
  CALLS: ['ans', 'file-name-as-directory', 'fol-filename', 'directory-files', 'while', 'when', 'substring', '1+', 'buf', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'search-forward-regexp', '>', 'fol-msg', 'format', 'kill-buffer']
forms.el 107 0
  (defun doc_v-root-make ()
  CALLS: ['see']
  (defun doc_v-root-filenames-make ()
  CALLS: ['eg.', 'of', 'e.g.,', 'as']
  (defun doc_v-file-init1 ()
  CALLS: ['v-file-init1', 'v-file-init1-helper']
  (defun doc_v-file-init1-file (tab)
  CALLS: []
  (defun doc_v-file-init2a (intab indir)
  CALLS: ['v-file-init2', 'BU', 'heq', 'SLP1', 'middle', 'active', 'class']
  (defun doc_v-file-init2b--incomplete ()
  CALLS: ['v-file-init2', 'BU', 'heq', 'SLP1', 'middle', 'active', 'class', 'This', 'some-pfx-sandhi-at-hyphens']
  (defun doc_v-root-files ()
  CALLS: []
  (defun doc_v-file-init3 (action intab indir)
  CALLS: []
  (defun doc_v-file-init3-pre (tab)
  CALLS: ['voice=a/m', 'e.g.']
  (defun doc_v-file-init3-pre-p (tab)
  CALLS: ['voice=a/m']
  (defun doc_v-file-init3-prespart (tab)
  CALLS: ['e.g.,']
  (defun doc_v-file-init3-ppfactn (tab)
  CALLS: ['voice=a/m', 'a', 'b']
  (defun doc_v-file-init3-inf (tab)
  CALLS: ['voice=a/m']
  (defun doc_v-file-init3-abs (tab)
  CALLS: ['voice=a/m', 'always?', 'for']
  (defun doc_v-file-init3-prf (tab)
  CALLS: []
  (defun doc_v-file-init3-ppp (tab)
  CALLS: ['kta', 'ends']
  (defun doc_v-file-init3-pap (tab)
  CALLS: ['based']
  (defun doc_v-file-init3-gerundive (tab)
  CALLS: ['potential', 'ends']
  (defun doc_v-file-init3-fut (tab)
  CALLS: ['fut', 'pft', 'con', 'ben']
  (defun doc_v-file-init-aor (intab indir)
  CALLS: ['v-file-init-aor', 'form-file-init3-ptrs-helper', 'v-file-ptrs', 'SL-conjtab']
  (defun doc_v-file-init-aor1 (tab class voice aornum)
  CALLS: []
  (defun doc_v-derived ()
  CALLS: ['p.']
  (defun doc-emacs-array ()
  CALLS: ['x1', 'separated']
  (defun doc_v-file-init3-ptrs ()
  CALLS: []
  (defun doc_v-file-ptrs (outtab &optional outdir)
  CALLS: []
  (defun doc_s-file-init3-ptrs ()
  CALLS: ['s-file-init3-ptrs-helper']
  (defun doc_s-file-init3-ptrs-helper (tab)
  CALLS: ['see']
  (defun doc_s-file-ptrs (outtab outdir)
  CALLS: []
  (defun doc_form-file-ptrs-helper (tab subdir)
  CALLS: []
  (defun v-root-remake0 ()
  CALLS: ['v-root-make', 'v-root-filenames-make']
  (defun v-root-remake ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'v-file-init1', 'v-file-init2a', 'v-file-init3', 'v-file-init-aor', 'v-file-init3-ptrs', 'v-file-ptrs', 's-file-init3-ptrs', 's-file-ptrs', 'i-file-init3-ptrs', 'i-file-ptrs', 'vc-file-init3-ptrs', 'vc-file-ptrs', 's-file-init']
  (defun vc-root-remake ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'vc-file-init1', 'vc-file-init2a', 'vc-root-remake-file', 'vc-file-init3-ptrs', 'vc-file-ptrs']
  (defun vc-root-remake-file (file)
  CALLS: ['vc-root-remake-file', 'vc-file-init3', 'vc-file-init-aor', 'vc-file-init3-ptrs', 'vc-file-ptrs']
  (defun forms-remake-extra ()
  CALLS: ['s-file-init', 'i-file-init']
  (defun v-root-remake1 (tab)
  CALLS: ['fol-msg', 'format', 'current-time-string', 'v-file-init1-file', 'v-file-init3-pre', 'v-file-init3-pre-p', 'v-file-init3-prespart', 'v-file-init3-ppfactn', 'v-file-init3-inf', 'v-file-init3-abs', 'v-file-init3-prf', 'v-file-init3-ppp', 'v-file-init3-pap', 'v-file-init3-gerundive', 'v-file-init3-fut', 'message', 'form-file-init3-ptrs-helper', 'v-file-ptrs']
  (defun vc-root-remake1 (root)
  CALLS: ['fol-msg', 'format', 'current-time-string', 'vc-root-remake1-helper', 'vc-root-remake-file', 'message', 'v-root-filename-get', 'vc-file-ptrs']
  (defun vc-root-remake1-helper (tab tmpfile)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'insert', 'format', 'save-buffer', 'kill-buffer']
  (defun v-root-make ()
  CALLS: ['intab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'x', 'read', 'current-buffer', 'forward-line', 'symbol-name', 'if', 'cons', 'sort', 'fol-msg', 'format', 'length', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-root-filenames-make ()
  CALLS: ['intab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'x', 'read', 'current-buffer', 'forward-line', 'intern', 'downcase', 'symbol-name', 'plist-AppendElt', 'lx', 'insert', 'format', '1+', 'save-buffer', 'kill-buffer']
  (defun v-root-filename-get (root)
  CALLS: ['intab', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'when', 'search-forward-regexp', 'p1', 'point', 'end-of-line', 'buffer-substring']
  (defun v-file-init1 ()
  CALLS: ['intab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'word-list', 'current-line', 'elt', 'v-file-init1-helper', 'forward-line']
  (defun v-file-init1-helper (root file)
  CALLS: ['outtab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert', 'format', 'save-buffer', 'kill-buffer']
  (defun v-file-init1-file (file)
  CALLS: ['outtab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'beginning-of-line', 'kill-line', 'save-buffer', 'kill-buffer']
  (defun v-file-init2a (intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'BU', '', 'p1', 'forward-char', 'end-of-line', 'backward-char', 'buffer-substring', 'word-list', 'elt', 'fol-msg', 'format', 'v-file-init2a-helper', 'forward-line']
  (defun v-file-init2a-helper (root class pada)
  CALLS: ['outtab', 'v-root-filename-get', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'buffer-substring', 'outline', 'format', 'when', 'search-forward', 'point-max', 'insert', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun v-file-init3 (action intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'in', 'p1', 'end-of-line', 'buffer-substring', 'word-list', 'elt', 'v-root-filename-get', 'procname', 'format', 'intern', 'funcall', 'forward-line']
  (defun v-file-init3-pre (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'append', 'elt', 'pre', 'tense', 'intern', 'SL-conjtab', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-pre-p (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'append', 'elt', 'pre', 'tense', 'intern', 'SL-conjtab', 'when', 'cons', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-fut (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'when', 'concat', 'append', 'cons', 'elt', 'fut', 'passive', 'middle', 'a', 'voice', 'intern', 'SL-conjtab', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-prespart (tab &optional dir1)
  CALLS: ['dir', 'if', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'causal', 'while', '[0-9c]+\\\\', '[amp]\\\\', 'class0', 'point', '"c"', 'string-to-int', 'intern', 'read', 'current-buffer', 'elt', 'vid,', 'e.g.', 'vidanti', 'SL-prespart-declension', 'when', 'dtabs', 'd0', 'symbol-name', 'concat', 'substring', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-ppfactn (tab &optional dir1)
  CALLS: ['dir', '(equal', 't', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'while', 'search-forward-regexp', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'class0', 'string-to-int', 'intern', 'SL-ppfactn', 'cons', 'when', 'outline', 'flatten', 'vconcat', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-inf (tab &optional dir1)
  CALLS: ['dir', '(equal', 't', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'class', 'intern', 'SL-inf', 'cons', 'when', 'outline', 'flatten', 'vconcat', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-abs (tab &optional dir1)
  CALLS: ['dir', '(equal', 't', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'class', 'intern', 'SL-abs', 'cons', 'when', 'outline', 'flatten', 'vconcat', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-prf (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'translate-SLP1-ITRANS', 'intern', 'when', 'reduplicative-liT-P', 'concat', 'append', 'a', 'voice', 'SL-conjtab', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-ppp (tab &optional dir1)
  CALLS: ['dir', '(equal', 't', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'intern', 'SL-ppp', 'append', 'outline-pfx', 'beginning-of-line', 'kill-line', 'SL-ppp-declension', 'dtabs', 'elt', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-pap (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'intern', 'SL-ppp', 'append', 'sym-concat', 'SL-pap-declension', 'dtabs', 'elt', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-gerundive (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'intern', 'SL-gerundive', 'append', 'SL-gerundive-declension', 'dtabs', 'elt', 'beginning-of-line', 'kill-line', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init-aor (intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'p1', 'end-of-line', 'buffer-substring', 'word-list', 'elt', 'string-to-number', 'intern', 'v-root-filename-get', 'v-file-init-aor1', 'forward-line']
  (defun v-file-init-aor1 (tab class voice aornum)
  CALLS: ['SL-conjtab', 'dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'when', 'outline', 'alltabs', 'intern', 'elt', '-', 'while', 'beginning-of-line', 'kill-line', 'point-max', 'insert', 'save-buffer', 'kill-buffer']
  (defun v-file-init3-ptrs ()
  CALLS: ['form-file-init3-ptrs']
  (defun v-file-ptrs (outtab outdir)
  CALLS: ['form-file-ptrs']
  (defun form-file-ptrs (outtab outdir subdir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'file-name-as-directory', 'non-system-files', 'fol-msg', 'format', 'length', 'while', 'message', 'ptrs', 'form-file-ptrs-helper', 'if', 'arrayp', 'append', 'insert', 'sort-lines', 'point-min', 'point-max', 'save-buffer', 'kill-buffer']
  (defun form-file-ptrs-helper (tab subdir)
  CALLS: ['dir', 'concat', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'when', 'search-forward-regexp', 'words', 'gen-word-list', 'current-line', 'elt', 'substring', 'parse-string-to-array', 'kill-buffer']
  (defun parse-dict-ref (dict)
  CALLS: ['d', 'gen-word-list', 'if', '<=', 'length', 'substring']
  (defun v-file-init3-helper (root)
  CALLS: ['outtab', 'v-root-filename-get', 'sangram-filename', 'v-file-init3-helpera']
  (defun v-file-init3-helpera (fileout)
  CALLS: ['bufout', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'buffer-substring', 'fol-msg', 'format', 'save-buffer', 'kill-buffer']
  (defun parse-string-to-array (sin)
  CALLS: ['ans', 'read-from-string', 'mapcar-LE']
  (defun s-work1a (intab outtab &optional indir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'line', 'current-line', 'gen-word-list', 'elt', 'reg-word-list', 'fol-msg', 'format', 'substring', 'when', 'length', 'insert', 'forward-line', 'save-buffer', 'kill-buffer']
  (defun s-work1b (intab intab1 outtab &optional indir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'search-forward-regexp', 'line', 'current-line', 'gen-word-list', 'elt', 'reg-word-list', 'fol-msg', 'format', 'substring', 'when', 'length', 'insert', '1+', 'message', 'forward-line', 'mod', 'save-buffer', 'kill-buffer']
  (defun s-work2a (intab outtab npfx &optional indir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'goto-char', 'prev', 'downcase', 'buffer-substring', 'point', '+', 'while', '<', 'point-max', '1+', 'insert', 'format', 'message', 'forward-line', 'save-buffer', 'kill-buffer']
  (defun s-file-init (intab indir &optional outdir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'line', 'downcase', 'buffer-substring', '+', 'current-line', 'fol-msg', 'format', 'condition-case', 'gen-word-list', 'string-trim', 'elt', 'reg-word-list', 'if', 's-file-init-helper', '%s', 'forward-line', 'kill-buffer']
  (defun s-file-init-helper (outtab subanta fg mw-word &optional outdir)
  CALLS: ['when', 'fol-msg', 'format', 'fileout', 'if', 'sangram-filename', 'find-file-noselect', 'condition-case', 'forms', 'gen-word-list', 'apply', 'append', 'vector', 'elt', 'substring', 's-file-init-genform', 'while', 'cadr', 'SL-construct-subanta1', 'intern', 's-file-init-helper1', 'with-current-buffer', 'goto-char', 'search-forward-regexp', 'beginning-of-line', 'kill-line', 'point-max', 'insert', '%s', 'save-buffer', 'kill-buffer']
  (defun s-file-init-helper1 (subwords dtab)
  CALLS: ['pfx', 'substring', 'append', 'if', 'apply', 'lambda', 'x', 'concat', 'symbol-name', 'vconcat']
  (defun s-file-init-genform (subanta fg)
  CALLS: ['ans', 'translate-SLP1-ITRANS', 'intern', 'convert-subanta-lexinfo', 'while', 'elt', '(member', 'manC', '(equal', 'cons', 'nreverse']
  (defun form-file-init3-ptrs-helper (tab subdir)
  CALLS: ['dir', 'length', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'words', 'gen-word-list', 'current-line', 'elt', 'substring', 'parse-string-to-array', 'flatten', 'maximal-prefix-helper', 'if', '>', '*', 'when', 'fol-msg', 'cons', 'sort', 'p', 'insert', 'point', 'kill-line', 'vconcat', 'save-buffer', 'kill-buffer']
  (defun form-file-init3-ptrs (subdir)
  CALLS: ['ans', 'file-name-as-directory', 'sangram-filename', 'non-system-files', 'while', 'message', 'form-file-init3-ptrs-helper']
  (defun s-file-init3-ptrs ()
  CALLS: ['form-file-init3-ptrs']
  (defun s-file-ptrs (outtab outdir)
  CALLS: ['form-file-ptrs']
  (defun subtler-s-file-ptrs (outtab outdir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'file-name-as-directory', 'non-system-files', 'fol-msg', 'format', 'length', 'while', 'message', 'ptrs', 'form-file-ptrs-helper', 'if', 'arrayp', 'append', 'cons', '<', 'substring', 'insert', 'sort-lines', 'point-min', 'point-max', 'save-buffer', 'kill-buffer']
  (defun i-file-init (intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'line', 'downcase', 'buffer-substring', '+', 'current-line', 'fol-msg', 'format', 'condition-case', 'gen-word-list', 'string-trim', 'elt', 'reg-word-list', 'if', 'i-file-init-helper', '%s', 'forward-line', 'kill-buffer']
  (defun i-file-init-helper (outtab subanta fg mw-word)
  CALLS: ['fol-msg', 'format', 'fileout', 'sangram-filename', 'find-file-noselect', 'forms', 'gen-word-list', 'elt', 'substring', 's-file-init-genform', 'vector', 'with-current-buffer', 'goto-char', 'when', 'search-forward-regexp', 'beginning-of-line', 'kill-line', 'point-max', 'insert', 'save-buffer', 'kill-buffer']
  (defun i-file-init3-ptrs ()
  CALLS: ['form-file-init3-ptrs']
  (defun i-file-ptrs (outtab outdir)
  CALLS: ['form-file-ptrs']
  (defun chk-s-file-init (intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'line', 'downcase', 'buffer-substring', '+', 'current-line', 'fol-msg', 'format', 'condition-case', 'gen-word-list', 'string-trim', 'elt', 'reg-word-list', 'when', 'chk-s-file-init-helper', 'message', '%s', 'forward-line', 'kill-buffer']
  (defun chk-s-file-init-helper (outtab subanta fg mw-word)
  CALLS: ['fol-msg', 'format', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', 'kill-buffer']
  (defun work-praps (&optional tabout)
  CALLS: ['ans', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'file-name-as-directory', 'non-system-files', 'while', 'message', 'work-praps-helper', 'lambda', 's', 'insert', 'format', 'save-buffer', 'kill-buffer']
  (defun work-praps-helper (tab)
  CALLS: ['ans', 'length', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'while', 'words', 'gen-word-list', 'current-line', 'elt', 'cons', 'kill-buffer', 'nreverse', 'mapcar', 'lambda', 'x', 'prap']
  (defun work-praps1 (&optional tabin tabout)
  CALLS: ['ans', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'fol-msg', 'format', 'goto-char', 'while', '<', 'point', 'point-max', 'line', 'current-line', 'gen-word-list', 'elt', 'regexp-lines', 'sangram-buffer', 'stab', 'substring', 'downcase', 'regexp-kill-lines', 'save-buffer', 'kill-buffer', 'insert', 'forward-line']
  (defun vc-file-init1 ()
  CALLS: ['intab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'word-list', 'current-line', 'elt', 'vc-file-init1-helper', 'forward-line']
  (defun vc-file-init1-helper (root file)
  CALLS: ['outtab', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert', 'format', 'save-buffer', 'kill-buffer']
  (defun vc-file-init2a (intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'BU', '', 'p1', 'forward-char', 'end-of-line', 'backward-char', 'buffer-substring', 'word-list', 'elt', 'fol-msg', 'format', 'if', 'vc-file-init2a-helper', 'forward-line']
  (defun vc-file-init2a-helper (root class pada)
  CALLS: ['fol-msg', 'format', 'outtab', 'v-root-filename-get', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'buffer-substring', 'outline', 'when', 'search-forward', 'point-max', 'insert', 'save-buffer', 'kill-buffer']
  (defun vc-file-init3 (action intab indir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'in', 'p1', 'end-of-line', 'buffer-substring', 'word-list', 'elt', 'v-root-filename-get', 'procname', 'format', 'intern', 'fol-msg', 'funcall', 'forward-line']
  (defun vc-file-init3-prefut (tab)
  CALLS: ['dir', '(pre', 'pre', 'ipf', 'ipv', 'pop', 'fut', 'pft', 'con', 'ben', 'format', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'point-max', 'while', '[0-9]+\\\\', '[am]\\\\', 'forward-line', 'outline', 'append-if-new', 'tv', 'elt', 'intern', 'beginning-of-line', 'kill-line', 'SL-conjtab', 'point-min', 'when', 'search-forward', 'insert', 'save-buffer', 'kill-buffer']
  (defun vc-file-init3-prespart (tab)
  CALLS: ['v-file-init3-prespart']
  (defun vc-file-init3-inf (tab)
  CALLS: ['fol-msg', 'format', 'v-file-init3-inf']
  (defun vc-file-init3-ppfactn (tab)
  CALLS: ['fol-msg', 'format', 'v-file-init3-ppfactn']
  (defun vc-file-init3-abs (tab)
  CALLS: ['fol-msg', 'format', 'v-file-init3-abs']
  (defun vc-file-init3-ppp (tab)
  CALLS: ['fol-msg', 'format', 'v-file-init3-ppp']
  (defun vc-file-init3-ptrs ()
  CALLS: ['form-file-init3-ptrs']
  (defun vc-file-ptrs (outtab outdir)
  CALLS: ['form-file-ptrs']
  (defun old-s-file-init3-ptrs-helper (tab)
  CALLS: ['dir', 'length', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'words', 'gen-word-list', 'current-line', 'elt', 'substring', 'parse-string-to-array', 'flatten', 'maximal-prefix-helper', 'if', '>', '*', 'when', 'fol-msg', 'format', 'cons', 'sort', 'p', 'insert', 'point', 'kill-line', 'vconcat', 'save-buffer', 'kill-buffer']
  (defun old-i-file-init3-ptrs-helper (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'words', 'gen-word-list', 'current-line', 'elt', 'substring', 'parse-string-to-array', 'flatten', 'maximal-prefix-helper', 'if', '>', '*', 'length', 'when', 'fol-msg', 'format', 'cons', 'sort', 'p', 'insert', 'point', 'kill-line', 'vconcat', 'save-buffer', 'kill-buffer']
  (defun old-v-file-init3-ptrs (tab)
  CALLS: ['dir', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'if', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'point-max', 'while', 'words', 'gen-word-list', 'current-line', 'elt', 'substring', 'parse-string-to-array', 'flatten', 'maximal-prefix-helper', '>', '*', 'length', 'when', 'cons', 'sort', 'p', 'forward-line', 'insert', 'point', 'kill-line', 'vconcat', 'save-buffer', 'kill-buffer']
  (defun old-i-file-ptrs (outtab outdir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'file-name-as-directory', 'non-system-files', 'fol-msg', 'format', 'length', 'while', 'message', 'ptrs', 'form-file-ptrs-helper', 'if', 'arrayp', 'append', 'insert', 'sort-lines', 'point-min', 'point-max', 'save-buffer', 'kill-buffer']
  (defun old-v-file-ptrs (intabs indir outtab &optional outdir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'lambda', 'intab', 'insert-file-contents', 'save-buffer', 'old-v-file-ptrs-main']
  (defun old-v-file-ptrs-main (intab indir outtab &optional outdir)
  CALLS: ['filein', 'sangram-filename', 'find-file-noselect', 'if', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'root', 'in', 'p1', 'end-of-line', 'buffer-substring', 'word-list', 'elt', 'v-root-filename-get', 'ptrs', 'form-file-ptrs-helper', 'arrayp', 'append', 'insert', 'format', 'forward-line', 'sort-lines', 'point-min', 'save-buffer', 'kill-buffer']
gram1.el 62 26
  (defvar shortsimplevowel-set)
  (defvar longsimplevowel-set)
  (defvar simplevowel-set)
  (defvar diphthong-set)
  (defvar vowel-set)
  (defvar K-set)
  (defvar CH-set)
  (defvar TT-set)
  (defvar T-set)
  (defvar P-set)
  (defvar semivowel-set)
  (defvar sibilant-set)
  (defvar consonant-set)
  (defvar guttural-set)
  (defvar palatal-set)
  (defvar cerebral-set)
  (defvar dental-set)
  (defvar labial-set)
  (defvar hardnonaspirate-set)
  (defvar hardaspirate-set)
  (defvar softnonaspirate-set)
  (defvar softaspirate-set)
  (defvar nasal-set)
  (defvar hard-set)
  (defvar soft-set)
  (defvar mute-set)
  (defun init-sets-helper (s)
  CALLS: ['w', 'ITRANS-parse-words-1', 'apply', 'append']
  (defun init-sets ()
  CALLS: ['x', 'ITRANS-parse-words-3', 'append', 'temp', 'dhaatu']
  (defun init-vs-helper (s1 p s2)
  CALLS: ['sym', 'elt', 'ITRANS-parse-words-2', 'sanput', 'fol-msg', 'format']
  (defun init-vowelstrength ()
  CALLS: ['init-vs-helper', 'of']
  (defun init-semivowels ()
  CALLS: ['sanput']
  (defun set-to-property (s p)
  CALLS: ['sym', 'while', 'sanput']
  (defun init-properties ()
  CALLS: ['x', 'set-to-property']
  (defun init-Sangram-helper (sym)
  CALLS: ['if', 'get', 'put']
  (defun init-Sangram (&optional OBARRAY)
  CALLS: ['if', 'mapatoms']
  (defun count-Sangram ()
  CALLS: ['natom', 'mapatoms', 'lambda', 'x', 'if', 'get', '1+']
  (defun sangetall (sym)
  CALLS: ['get']
  (defun sanget (sym prop)
  CALLS: ['Sangram', 'get', 'plist-get']
  (defun plist-get2 (plist proplist)
  CALLS: ['prevans', 'while', 'plist-get']
  (defun plist-AppendElt (plist prop newelt)
  CALLS: ['p', 'plist-get', 'when', 'append', 'plist-put']
  (defun sanget2 (sym proplist)
  CALLS: ['prevans', 'get', 'while', 'plist-get']
  (defun sanput (sym prop val)
  CALLS: ['Sangram', 'get', 'plist-put', 'put']
  (defun sanput2 (sym proplist val)
  CALLS: ['(chal', 'xgram', 'vconcat', 'length', '1+', 'make-vector', 'get', 'fol-msg', 'format', 'before', 'aset', 'while', '<', 'elt', 'plist-get', '1-', 'plist-put', 'after', 'put']
  (defun sanAppendElt (sym prop newelt)
  CALLS: ['Sangram', 'get', 'plist-get', 'when', 'append', 'plist-put', 'put']
  (defun sanAppendElt2 (sym proplist val)
  CALLS: ['(chal', 'when', 'fol-msg', 'format', 'xgram', 'vconcat', 'length', '1+', 'make-vector', 'get', 'aset', 'while', '<', 'elt', 'plist-get', 'append-if-new', '1-', 'plist-put', 'put']
  (defun shortsimplevowel-P (tok)
  CALLS: ['sanget']
  (defun disjoint-P (list1 list2)
  CALLS: ['(not', 'isect-lists']
  (defun isect-lists (list1 list2)
  CALLS: ['apply', 'mapcar', 'lambda', 'x1', 'if']
  (defun append-if-new (ans thisans)
  CALLS: ['if', 'append']
  (defun longsimplevowel-P (tok)
  CALLS: ['sanget']
  (defun simplevowel-P (tok)
  CALLS: ['sanget']
  (defun diphthong-P (tok)
  CALLS: ['sanget']
  (defun vowel-P (tok)
  CALLS: ['sanget']
  (defun K-P (tok)
  CALLS: ['sanget']
  (defun CH-P (tok)
  CALLS: ['sanget']
  (defun TT-P (tok)
  CALLS: ['sanget']
  (defun T-P (tok)
  CALLS: ['sanget']
  (defun P-P (tok)
  CALLS: ['sanget']
  (defun semivowel-P (tok)
  CALLS: ['sanget']
  (defun sibilant-P (tok)
  CALLS: ['sanget']
  (defun consonant-P (tok)
  CALLS: ['sanget']
  (defun guttural-P (tok)
  CALLS: ['sanget']
  (defun palatal-P (tok)
  CALLS: ['sanget']
  (defun cerebral-P (tok)
  CALLS: ['sanget']
  (defun dental-P (tok)
  CALLS: ['sanget']
  (defun labial-P (tok)
  CALLS: ['sanget']
  (defun hardnonaspirate-P (tok)
  CALLS: ['sanget']
  (defun hardaspirate-P (tok)
  CALLS: ['sanget']
  (defun softnonaspirate-P (tok)
  CALLS: ['sanget']
  (defun softaspirate-P (tok)
  CALLS: ['sanget']
  (defun nasal-P (tok)
  CALLS: ['sanget']
  (defun hard-P (tok)
  CALLS: ['sanget']
  (defun soft-P (tok)
  CALLS: ['sanget']
  (defun mute-P (tok)
  CALLS: ['sanget']
  (defun guna (tok)
  CALLS: ['if', 'simplevowel-P', 'sanget', 'vector']
  (defun vrddhi (tok)
  CALLS: ['if', 'simplevowel-P', 'sanget', 'vector']
  (defun shortvowel-P (v)
  CALLS: ['shortsimplevowel-P']
  (defun longvowel-P (v)
  CALLS: ['longsimplevowel-P']
  (defun count-XSangram ()
  CALLS: ['natom', 'mapatoms', 'lambda', 'x', 'if', 'get', '1+']
  (defun Xsangetall (sym)
  CALLS: ['get']
  (defun Xsanget (sym prop)
  CALLS: ['XSangram', 'get', 'plist-get']
  (defun Xsanget2 (sym proplist)
  CALLS: ['prevans', 'get', 'while', 'plist-get']
  (defun Xsanput (sym prop val)
  CALLS: ['XSangram', 'get', 'plist-put', 'put']
  (defun Xsanput2 (sym proplist val)
  CALLS: ['xgram', 'vconcat', 'length', '1+', 'make-vector', 'get', 'aset', 'while', '<', 'elt', 'plist-get', '1-', 'plist-put', 'put']
  (defun XsanAppendElt (sym prop newelt)
  CALLS: ['XSangram', 'get', 'plist-get', 'when', 'append', 'plist-put', 'put']
  (defun XsanAppendElt2 (sym proplist val)
  CALLS: ['xgram', 'vconcat', 'length', '1+', 'make-vector', 'get', 'aset', 'while', '<', 'elt', 'plist-get', 'append-if-new', '1-', 'plist-put', 'put']
  (defun listify (x)
  CALLS: ['if']
  (defun prog-comments (tab &optional dir)
  CALLS: ['file', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'while', 'forward-list', 'fol-read', 'current-buffer', 'when', 'fname', 'fol-msg', 'format', 'elt', 'stringp', 'point-max', 'kill-buffer']
gram2-101403.el 52 4
  (defvar Sangram-types)
  (defvar passive-irregs)
  (defvar passive-data)
  (defvar participle-list)
  (defun word-parts (tokar)
  CALLS: ['types', 'length', 'vector', 'while', '<', 'elt', 'consonant-P', 'if', 'vowel-P', 'when', 'vconcat', '1+', 'concat']
  (defun dhaatu-parts (tokar)
  CALLS: ['parts', 'word-parts', 'elt', 'vector', '(<', 'length', '[s', 'substring', 'u', 'append', '[s]', 'apply', 'vconcat', '(=', '(equal', 't']
  (defun dhaatu-a~Nga (dhaatu class pada)
  CALLS: ["'P", 's', 'a~Nga', 'Sangram', '03-26-03', 'get', 'plist-get', 'when', 'Eng-def', 'fol-msg', 'format', 'a~Ngas', 'lambda', 'info-class-pada', '((REGULAR', 'aeu', 'xes', 'elt', 'while', '(and', 'eq', '1', 'dhaatu-a~Nga-a-REGULAR', '(member', 'x-string', 'symbol-name', 'ITRANS-parse-words-1', '(eq', '2', 'P', 'append-if-new', 'solution', 'cons']
  (defun dhaatu-a~Nga-a-REGULAR (dhaatu class pada)
  CALLS: ['conjugation', "'P", 'a~Nga', 'intern', 'format', 'when', 'get', 'Warning', 'symbol-name', 'ITRANS-parse-words-1', '(=', 'dhaatu-a~Nga-1', 'dhaatu-a~Nga-4', 'dhaatu-a~Nga-6', 'dhaatu-a~Nga-10', '(member', '2', 't', 'fol-msg', 'Error']
  (defun dhaatu-a~Nga-1 (tokar)
  CALLS: ['ans', 'dhaatu-parts', 'elt', '(or', 'string=', 'guna', '(and', 'i', '<', 'length', 'kale-395', 'c2', 'it', '=', 'shortsimplevowel-P', 'long', '(equal', 'kale-394', 'if', 'sandhi-internal-diphthong-A', 'vconcat']
  (defun dhaatu-a~Nga-4 (tokar)
  CALLS: ['ans', 'vconcat', 'dhaatu-parts', 'elt', '(and', 'i', '<', 'length', 'kale-395', '(equal', 'kale-394']
  (defun dhaatu-a~Nga-6 (tokar)
  CALLS: ['ans', 'dhaatu-parts', 'elt', '(and', 'i', '<', 'length', 'kale-395', '(=', '(member', 'vconcat', 'u', '(equal']
  (defun dhaatu-a~Nga-10 (tokar)
  CALLS: ['p.', 'except', 'ans', 'dhaatu-parts', 'elt', '(or', 'string=', 'vrddhi', 'sandhi-internal-diphthong-A', '(and', '=', 'length', 'Kale', 'i', '<', 'kale-395', 'shortsimplevowel-P', 'other', 'c2', 'it', 'guna', '(equal', 'long', 'when', 'kale-394', 'vconcat']
  (defun class10-base (tok &optional Eng-def)
  CALLS: ['s', 'ending', 'b1', 'sym-without-space', 'modify-Eng-def', '(member', 'shout', 'This', "'kuuNay'", 'Kale', 'vconcat', 'few', 'dhaatu-a~Nga-10', '(and', '(equal', 'if']
  (defun class-a-base (dhaatu class pada)
  CALLS: ['conjugation', "'P", 'base', 'symbol-name', 'ITRANS-parse-words-1', '(class-a-base-irreg', '(=', 'dhaatu-a~Nga-1', 'dhaatu-a~Nga-4', 'dhaatu-a~Nga-6', 'class10-base', 't', 'if']
  (defun class-a-base-irreg (dhaatu class pada)
  CALLS: ['ans', '(=', '(equal', '(and', 'sar', 'gir', 'vichCh', 'aMsay', 'kalay', 'kRipay', 'karpay', 'paTay', 'puTay', 'lajay', 'vasay', 'shaThay', 't', 'when', 'if', 'lambda', 'x', 'ITRANS-parse-words-1', 'symbol-name']
  (defun class-b-base (dhaatu class pada upasargas)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'if', '<', 'length', '(equal', '(and', 'nasal-P', 'vowel-P', 'vconcat', '(kale-414-P', 'shorten-vowel', 'vector', '(kale-414-opt-P', 'tok1', 'longvowel-P', 'krii', '', 'lii', 'when', 'fol-msg', 'format', '%s']
  (defun kale-414-P (dhaatu)
  CALLS: ['laT,', 'if']
  (defun kale-414-opt-P (dhaatu)
  CALLS: ['if', 'kShii']
  (defun kale-394 (c1 v c2 type)
  CALLS: ['sec.', 'long', '(string=', 'if', 'labial-P', 'elt', 't']
  (defun kale-395 (c1 v c2 type)
  CALLS: ['sec.', '(=', 'length', '(not', 'elt', 'r', '(<', 'vector', 'lengthen-vowel', 't']
  (defun get-form-tab (class pada)
  CALLS: ['class-type', 'if', '1', 'eval', 'intern-soft', 'format']
  (defun get-conj-elt-table (tense-sym a~Nga class pada)
  CALLS: ['a~Nga-tok', 'ITRANS-parse-words-1', 'symbol-name', 'get-form-tab', 'lambda', 'form-sym', 'sym-without-space', 'get-conj-elt-1']
  (defun conjugation-tab-pr (a~Nga class pada dhaatu)
  CALLS: ['lambda', 'tense', 'fol-msg', 'format', 'citation-pr', 'conjugation-tab']
  (defun conjugation-tab-upa-pr (a~Nga class pada dhaatu upa)
  CALLS: ['lambda', 'tense', 'fol-msg', 'format', 'citation-pr', 'vconcat', 'mapcar', 'x', 'conjugation-join-sym', 'conjugation-tab']
  (defun conjugation-tab (a~Nga-sym tense-sym class pada dhaatu &optional voice)
  CALLS: ['if', '(equal', 'a', 'conjugation-tab-1', '(member', '1', 'conjugation-tab-5', 'conjugation-citation-irreg', 'conjugation-tab-8', 'conjugation-tab-9', 'to', 'conjugation-tab-2', 'conjugation-tab-3', 'conjugation-tab-7', 't', 'conjugation-tab-liT', 'conjugation-tab-luT', 'conjugation-tab-lRiT']
  (defun conjugation-tab-1 (a~Nga-sym tense-sym class pada)
  CALLS: ['ending', 'ITRANS-parse-words-1', 'symbol-name', 'conj-endings', 'length', 'when', 'these', 'i', 'while', '<', 'elt', 'if', 'vector', '(equal', 'Antoine', 't', 'conjugation-join', 'aset', '1+', 'fol-msg', 'format', '2', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'make-vector', 'solution', 'sandhi-single', 'sym-without-space']
  (defun modify-conj-endings-1 (tense-sym pada)
  CALLS: ['class', 'conj-endings', 'length', 'copy-sequence', 'these', 'i', 'while', '<', 'elt', 'if', 'vector', '(equal', 'Antoine', 't', 'conjugation-join', 'aset', '1+', 'fol-msg', 'format', '1', '2']
  (defun conjugation-tab-5 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'a', 'progn', '(vowel-P', '(member', 'v', 't', 'b', 'conjugation-join', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-8 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'progn', '(vowel-P', '(member', 'v', 't', 'conjugation-join', 'solution', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-9 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'consonant-P', 'conjugation-join', 'solution', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-2 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['as', 'endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'when', 'u', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'fol-msg', 'format', 'i', 'it', 'word-parts', '(equal', 'part1', 'guna', 'vectorp', 'vector', 'flatten', '=', 'shortsimplevowel-P', 't', 'while', '<', 'de-aspirate', 'aspirate', 'copy-sequence', '(and', "'A", '(member', '(vowel-P', 'like', 'other', '(or', 'nasal-P', 'semivowel-P', 'consonant-P', '3', '[t]', 'aset', 'sandhi-legalise-final-cons', 'append-if-new', 'solution', '/=', 'v', 'lengthen-vowel', 'i.e.,', 'Dh', 'Note:', 'to', '(not', 'soft-P', 'dental-P', '(let', 'k', 'conjugation-join', 'sym-without-space', 'thisans1', 'rether', 'laT', 'stu', 'ending1', '2A', '2P/2A', '2P', '0', '2P/A', '#431', "'j'", '1', '2', '[t', 'a', 'b', 'ending', 'an', '[s]', '(consonant-P', 'chakaas', 'AntoineI-54', 'Kale', 'already', 'thus', 'usual', 'the', '1+']
  (defun conjugation-tab-3 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'reduplicative-pfx', 'to', 'when', 'nij', 'gunate-final-vowel', 'elt', 'substring', 'u', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'fol-msg', 'format', 'i', 'aset', 'i.e.,', 'rather', 'daa', '3A', 'strong', '3P', 'abandon', 'word-parts', 'while', '<', 'in', '=', 'a0', 'labial-P', 'consonant-P', 'de-aspirate', 'aspirate', 'copy-sequence', 'a', 'b', 'short', '(and', '(equal', '(member', 'guna', '(vowel-P', 'other', '(or', 'nasal-P', 'semivowel-P', 'vector', '3', '[t]', 'sandhi-legalise-final-cons', 'append-if-new', 'solution', 't', '/=', 'v', 'lengthen-vowel', 'Dh', 'Note:', '(not', 'soft-P', 'dental-P', '(let', 'part1', 'k', 'flatten', 'conjugation-join', 'sym-without-space', 'sacrifice', 'regular', 'jahaahi', 'done', 'but', "'j'", 'Ri', '%s', '1+']
  (defun conjugation-tab-7 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['1', '2', '3', '4', 'endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'rtok', 'tmp', 'substring', 'elt', 'when', 'nasal-P', 'vconcat', 'u', 'if', 'vowel-P', 'vrddhi', 'fol-msg', 'format', 'i', 'sandhi-n-N', 'weak-nasal', '(guttural-P', '(palatal-P', '(cerebral-P', 't', 'while', '<', '7P', 'consonant-P', 'de-aspirate', 'aspirate', 'copy-sequence', '(vowel-P', 'other', '(or', 'semivowel-P', 'beginning', 'vector', '(and', '[t]', 'aset', 'sandhi-legalise-final-cons', '(equal', 'append-if-new', 'solution', '/=', 'v', 'lengthen-vowel', 'i.e.,', 'Dh', 'Note:', 'to', '(not', 'soft-P', 'dental-P', '(let', 'part1', 'k', 'flatten', 'conjugation-join', 'sym-without-space', '=', '(member', 'j', "'j'", '1+']
  (defun conjugation-join-sym (base-sym sup-sym &optional option)
  CALLS: ['sym-without-space', 'ITRANS-parse-words-1', 'symbol-name']
  (defun conjugation-join (base-tok sup &optional option)
  CALLS: ['of', '(listp', 'mapcar', 'lambda', 'x', 'conjugation-join1', 't']
  (defun conjugation-join1 (y ending option)
  CALLS: ['ans', 'sandhi-pair-skiprefs-set', 'solution', 'sandhi-pair', 'vconcat', 'if', 'sandhi-single', 'defun', 'dhaatu', 'citations', 'conjugation-citation', 'while', 'c', 'elt', 'when']
  (defun conjugation-citation (dhaatu tense-sym)
  CALLS: ['cpas', 'class-pada-a~Ngas', '02-01-03', 'while', 'cpa', 'elt', '(equal', 'conjugation-citation-irreg', 'when', 'vconcat', '(member', '1', 'conjugation-tab', 'if', 'append']
  (defun conjugation-citation-irreg (dhaatu tense-sym class pada)
  CALLS: ['form', 'format', 'intern', 'sanget2']
  (defun class-pada-a~Ngas (dhaatu)
  CALLS: ['class', 'apply', 'mapcar', 'lambda', 'class-pada', 'elt', 'dhaatu-a~Nga', 'aeu', 'a~Nga', 'sym-without-space', 'append', 'dhaatu-class-padas']
  (defun dhaatu-class-padas (dhaatu)
  CALLS: ['ans', 'get', 'plist-get', 'when', 'Eng-def', 'numbers', 'name1', 'while', 'P,', 'append']
  (defun sym-with-space (symseq)
  CALLS: ['intern', 'mapconcat']
  (defun sym-without-space (x)
  CALLS: ['fol-msg', 'format', 'y', '(listp', 'mapcar', '(vectorp', 'mapconcat', 'if', 'stringp', 'intern']
  (defun san-symbol-name (x)
  CALLS: ['y', '(symbolp', '(equal', 'symbol-name', 't', 'symnum-name', 'fol-msg', 'format']
  (defun symnum-name (x)
  CALLS: ['if', 'symbolp', 'symbol-name', 'format']
  (defun sym-begins-with (x)
  CALLS: ['s', 'symbol-name', 'ITRANS-parse-words-1', 'if', '<', 'length', 'elt']
  (defun sym-ends-with (x)
  CALLS: ['s', 'symbol-name', 'ITRANS-parse-words-1', 'if', '<', 'length', 'elt', 'substring']
  (defun sym-concat2 (s1 s2)
  CALLS: ['intern', 'concat', 'symbol-name']
  (defun sym-concat (s1 &rest all)
  CALLS: ['ans', 'while', 'sym-concat2']
  (defun apply-seT (tok code)
  CALLS: ['toki', 'conjugation-join', '(equal', 't']
  (defun upasarga-join (upasargas sym)
  CALLS: ['ans', 'append', 'lambda', 'u', 'ITRANS-parse-words-1', 'symbol-name', 'while', 'solution', 'sandhi-pair', 'vconcat', 'sym-without-space']
  (defun old-conjugation-root-item (tense-sym dhaatu class pada person number)
  CALLS: ['ans', 'if', '1', 'lambda', 'p', 'format', '(=', 'dhaatu-a~Nga', 'aeu', 'a~Nga', 'elt', 'get-conj-elt-1', 'fol-msg', 'sym-without-space', 'append-if-new', 'dhaatu-a~Nga-non-a']
  (defun old-get-conj-elt-1 (a~Nga tense-sym form-sym)
  CALLS: ['y', 'if', 'elt', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'sanget', 'vector', '(equal', 'Antoine', 't', 'sandhi-internal-A-simplevowel', 'conjugation-join', 'while', '=', 'length', 'sandhi-single', 'fol-msg', 'format']
  (defun init-dhaatu-a~Nga-a (tabname)
  CALLS: ['nrec', 'read-colon-file-table', 'length', 'fol-msg', 'format', 'while', '<', 'elt', 'dhaatu', 'field0', 'upasarga', 'upasarga1', '(=', 'vec0', 'vconcat', 'substring', '1-', 'append', 'tmp', 'when', 'dhaatu-a~Nga-a-REGULAR', 'sym-without-space', 'gather-fields', 'mapcar', 'plist-put', 'if', 'Sangram', 'get', 'plist-get', 'Eng-def', 'a', 'b', 'xtemp', 'saarvadhaatuka', 'eq', 'put', '1+']
  (defun init-dhaatu-a~Nga ()
  CALLS: ['init-dhaatu-a~Nga-a', 'init-dhaatu-single']
  (defun init-participles ()
  CALLS: ['init-dhaatu-single']
  (defun init-dhaatu-single (tabname fname)
  CALLS: ['nrec', 'read-colon-file-table', 'length', 'fol-msg', 'format', 'while', '<', 'elt', 'dhaatu', 'field0', 'upasarga', 'upasarga1', '(=', '%s', 'when', 'forms', 'sanget2', 'Xsanput2', '1+']
gram2-future.el 34 1
  (defvar ForC-sym nil)
  (defun future-doc ()
  CALLS: []
  (defun luT-doc-Antoine ()
  CALLS: []
  (defun luT-doc-Kale ()
  CALLS: []
  (defun lRiT-doc-Antoine ()
  CALLS: []
  (defun lRiT-lRi~N-doc-Kale ()
  CALLS: []
  (defun future-passive-doc-Antoine ()
  CALLS: []
  (defun future-passive-doc-Kale()
  CALLS: []
  (defun aashiirli~N-doc-Antoine ()
  CALLS: []
  (defun Kale-459-doc ()
  CALLS: []
  (defun Kale-502-doc ()
  CALLS: []
  (defun aashiirli~N-doc-Kale ()
  CALLS: []
  (defun future-part-doc ()
  CALLS: []
  (defun participles-at-doc ()
  CALLS: []
  (defun future-part-doc-Antoine ()
  CALLS: []
  (defun conjugation-tab-lRiT (upa-syms class pada dhaatu &optional voice)
  CALLS: ['conjugation-tab-ForC']
  (defun conjugation-tab-lRi~N (upa-syms class pada dhaatu &optional voice)
  CALLS: ['conjugation-tab-ForC']
  (defun conjugation-tab-luT (upa-syms class pada dhaatu &optional voice)
  CALLS: ['conjugation-tab-ForC', 'defun', 'upa-syms']
  (defun conjugation-tab-ForC (upa-syms class pada dhaatu &optional voice)
  CALLS: ['ans', '', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'word-parts', 'if', '(equal', 'construct-seT-code1a', 'solution', '(or', 'ans1', 'conjugation-tab-ForC', 'vconcat', 'sym-without-space', '(vowel-P', 'vrddhi', 'gunate-final-vowel', '(member', '10', 'cb', 'causal-base', '(not', 'arrayp', 't', 'when', 'conjugation-tab-ForC-main', 'seT', 'join-arrays', '(and', 'a', 'b', 'handled', '2', '1', 'below', 'Kale', 'sRij', 'gunated', 'one', 'along', 'aniT', 'kRiSh', 'lRiT', 'iSh', 'veT', '<', 'length', 'to', 'atmanepada', 'p', 'dhaatukosha', 'svRi', 'fol-msg', 'format', 'kLip', 'above', 'implicitly', 'whose', 'kRit', 'non-conjugational', 'periphrastic', 'inserts', 'adhi', '3', 'dhaa', 'a~nj', 'gup', 'defun', 'upa-syms', 'endings', 'conj-class', 'intern-soft', 'sanget', 'copy-sequence', 'temp', 'ForC-seTCode', "'t'", 'i', 'while', 'aref', 'aset', '1+', 'bitab', '1-', '=', '"CVC"', '[[p', '-', 'benedictive-base', 'future-base', 'bfirst', 'augment-a', 'append-if-new', 'ForC-bitab', 'ForC-bitab-join']
  (defun ForC-bitab (btab itab)
  CALLS: ['n', 'length', 'make-vector', 'while', '<', 'elt', 'if', 'append', 'aset', '1+']
  (defun ForC-bitab-join (bitab endings dhaatu strengths i-insert)
  CALLS: ['ans', 'length', 'make-vector', 'while', '<', 'elt', 'ForC-join', 'if', 'sym-without-space', 'append-if-new', 'fol-msg', 'format', '%s', 'solution', 'aset', '1+']
  (defun ForC-join (base-tok seT-code sup dhaatu strength i-insert)
  CALLS: ['ans1', '(listp', 'mapcar', 'lambda', 'x', 'ForC-join', '(equal', 'seT', 't', 'ForC-join1', 'flatten', 'fol-msg', 'format']
  (defun ForC-join1 (y seT-code ending0 dhaatu strength i-insert)
  CALLS: ['ans', 'if', 'conjugation-join', 'sandhi-pair-skiprefs-set', 'elt', '(and', 'consonant-P', 'semivowel-P', 'vconcat', 'substring', 'vowel-P', 'a', 'b', 'luT', 'length', 'first-cons', 'when', 'fol-msg', 'format', 'i', 'Antoine2#110', 'wp', 'word-parts', '<', '-', '(equal', "'i", 'u', 't', '[ch', 'vector', 'vah', 'by', 'muh', 'Kale', 'Kale,', 'ans1', 'ylast1', 'j', '[bh', 'has', 'dh', 'de-aspirate', 'm', 'footnote', 'see', '(member', 'sh', 'bh', 'aspirate-first-cons', 'n', 'v', 'd', 'Antoine2', 'p.', 'k', 'solution', 'sandhi-pair', 'sandhi-single']
  (defun aspirate-last-cons (tok)
  CALLS: ['n', 'copy-sequence', 'length', '1-', 'while', '<=', 'elt', 'when', 'consonant-P', 'aspirate', 'aset']
  (defun aspirate-first-cons (tok)
  CALLS: ['n', 'copy-sequence', 'length', 'while', '<', 'elt', 'when', 'consonant-P', 'aspirate', 'aset', '1+']
  (defun first-cons (tok)
  CALLS: ['n', 'length', 'while', '<', 'elt', 'when', 'consonant-P', '1+']
  (defun augment-a (b0)
  CALLS: ['lRi~N', 'la~N', 'bfirst', 'elt', '(vowel-P', 'vconcat', 'vrddhi1', 'substring', '(equal', 't']
  (defun samprasaaraNa-P (dhaatu class)
  CALLS: ['(member', '(and', 'to']
  (defun samprasaaraNa (tok)
  CALLS: ['ans', 'word-parts', 'elt', 'length', 'when', '<', 'substring', '(equal', '(member', '[v', 'vconcat', 'vector', 'ans1', 'conjugation-join', 'fol-msg', 'format']
  (defun benedictive-base (dhaatu class pada upa-syms &optional seT-gen)
  CALLS: ['atok', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'nb', 'length', '1-', 'if', '=', '(member', '"CVC"', '[[p', 'substring', 't', '-', '(equal', '(and', 'vconcat', 'gunate-final-vowel', '<', 'labial-P', '(kale-584-P', 'samprasaaraNa-P', 'samprasaaraNa', '(or', 'daa', 'aa', 'original', 'b1', 'ForC-seTCode', 'e', '6']
  (defun future-base (dhaatu class pada upa-syms tense &optional seT-gen)
  CALLS: ['atok', 'if', 'ForC-seTCode', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'nb', 'length', '1-', '=', '(member', '"CVC"', '[[p', 'substring', 't', '-', '(equal', 'toks', 'causal-base', 'solution', '(and', 'adhi', 'vconcat', 'aa', 'mii', '5', '9', '4', 'b1', 'gunate-final-vowel', 'dhaatu-a~Nga', '([g', '(count', 'class-a-base', 'meaning', '(kuTaadi-P', 'a', 'b', 'c', '6', 'to', 'diidhii', '2']
  (defun ForC-seTCode (dhaatu class pada upa-syms &optional tense)
  CALLS: ['temp', 'if', '(and', 'aniT', 'p.', 'passive', 'seT', '(equal', 'construct-seT-code1a', 'solution']
  (defun kale-584-P (dhaatu)
  CALLS: ['if', 'a~nch']
  (defun construct-futpart1a (dhaatu class pada upasargas)
  CALLS: ['active', 'say,', 'a', 'pres-part-praatipadikas', 'sym-concat', 'p', 'gamiShyat', 'b', 'declension-pres-part-P', 'ans', 'conjugation-tab-lRiT', 'elt', 'second', 'if', 'while', '(equal', "'ati'", 'ITRANS-parse-words-1', 'symbol-name', 'substring', "'te'", 'c', 'conjugation-join', 't', 'when', 'sym-without-space', 'append-if-new']
  (defun construct-futppart1a (dhaatu class pada upasargas)
  CALLS: ['active', 'ans', 'conjugation-tab-lRiT', 'elt', 'second', 'if', 'while', 'a', "'te'", 'b', 'c', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'conjugation-join', 'when', 'sym-without-space', 'append-if-new']
gram2-liT.el 21 7
  (defvar liT-1-P-strengths [S W W  S W W  S W W])
  (defvar liT-doc-Passive ()
  (defvar liT-r-bitab nil)
  (defvar liT-r-endings nil)
  (defvar periphrastic-suffix-P nil)
  (defvar periphrastic-suffix-A nil)
  (defvar periphrastic-suffix-PASSIVE nil)
  (defun conjugation-tab-liT (upa-syms class pada dhaatu &optional voice)
  CALLS: ['if', 'ans1', 'when', 'reduplicative-liT-P', 'conjugation-tab-liT-r', 'periphrastic-liT-P', 'conjugation-tab-liT-p', '(and', 'join-arrays']
  (defun conjugation-tab-liT-r (upa-syms class pada dhaatu &optional voice)
  CALLS: ['if', 'ans', '(member', 'shvi', 'fol-msg', 'format', 'ans1', '(equal', 'conjugation-tab-liT-r-main', 'to', 'uuyatuH', 'uuyuH', 'uuyathuH', 'uuya', 'uvaaya', 'uuyiva', 'uuyima', 'uuye', 'uuyaate', 'uuyire', 'uuyiShe', 'uuyaathe', 'uuyidhve', 'uuyivahe', 'uuyimahe', 'shranth', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'vconcat', 'substring', 'sym-without-space', 'construct-seTPERF-code1a', '1P', 'chichetha', 'chichaya', '(and', '2', '1', 'i', 'length', 'while', '<', 'when', '3', 'aset', '1+', 'C', 'no', 'p.', 'join-arrays', 'vivyaaya', 'vivyidhve', 'namely,', 'elt', 'mamaarjva', 'mamaarjma', 'tmp', 'append', 'tatraptha', 'dadraptha', 'trebdhve', 'trepdhve', 'aana~NDhve', 'aanashdhve', 'jagaakShe', 'jaghaakShe', 'jagaahdhve', 'jaghaaDhve', 'jagRikShe', 'jaghRikShe', 'jagRihdhve', 'jaghRiDhve', 'juguhse', 'jughukShe', 'juguhdhve', 'jughuuDhve', 'jugoDha', 'dudroDha', 'a', 'b', 'mumoDha', 'siShNeDha', 'suShNoDha', 'adhi', 'seTPerfCodes', 'uurNunavitha', '6']
  (defun join-arrays (ans1 ans2)
  CALLS: ['ans', 'when', 'arrayp', 'length', 'make-vector', 'while', '<', 'elt', 'if', 'append-if-new', 'append', 'solution', 'aset', '1+', 'defun', 'upa-syms', 'endings', 'conj-class', 'format', 'intern-soft', 'sanget', 'copy-sequence', 'fol-msg', 'strengths', 'liT-main-get-bitab', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'aa', 'perfect-bitab-join', '(equal', 'to', 'the', '(and', 'mi', 'p.', 'mamaatha', 'mimetha', 'mimaya', 'lilaaya', 'liletha', 'lilaya', 'paprachChitha', 'babhraShTha', 'babhrajktha', 'sasraShTha', 'sasarktha', 'Kale', 'dadraShTha', 'dadagdha', 'dadahtha', 'nanaddha', 'nanahtha', 'atok', '(sam', 'saMs', 'word-parts', 'reduplicate-perfect', 'temp', 'construct-seTPERF-code1a', 'aniT', 'sam', 'seT', 'nir', 'veT', 'i', 'aref', 'bitab', 'b', '1-', '=', '(member', '"CVC"', '[[p', 't', '-', 'bth', 'vconcat', 'perfect-bitab', 'jan', 'shas', 'radh', 'bhaj', 'apa', 'shrath', 'jRI', "'tataara',", "'tatraapa'", "'raraadha',", 'bs', '1', 'gunate-final-vowel', 'tRI', '(kuTaadi-P', 'nunaava', 'otherwise,', 'nunava', 'chukoTa', '(or', 'vowel-P', 'shRI', 'bwalt', 'shortsimplevowel-P', 'other', '(shortsimplevowel-P', 'e.g.', 'jag', '']
  (defun perfect-bitab-join (bitab endings &optional ans)
  CALLS: ['i', 'length', 'if', 'make-vector', 'while', '<', 'elt', 'perfect-join', 'sym-without-space', 'append-if-new', 'fol-msg', 'format', '%s', 'solution', 'aset', '1+']
  (defun perfect-bitab (btab itab)
  CALLS: ['n', 'length', 'make-vector', 'while', '<', 'elt', 'if', 'append', 'aset', '1+']
  (defun perfect-join (base-tok seT-code sup)
  CALLS: ['(listp', 'mapcar', 'lambda', 'x', 'perfect-join', '(equal', 'seT', 't', 'perfect-join1']
  (defun perfect-join1 (y seT-code ending0)
  CALLS: ['ans', 'if', 'conjugation-join', 'sandhi-pair-skiprefs-set', 'length', 'elt', 'substring', 'when', 'fol-msg', 'format', 'consonant-P', 'semivowel-P', '(and', 'vowel-P', 'i', 'Antoine2#110', 'wp', 'word-parts', '<', '-', '(equal', 'vconcat', "'i", 'u', 'a', '[ch', 'j', '[bh', 'm', 'footnote', 'see', 'aspiration', 'sh', 'solution', 'sandhi-pair', 'sandhi-single']
  (defun reduplicate-perfect (tok &optional wparts)
  CALLS: ['possibly', 'pfxes', 'to', 'e.g.', 'e.g.,', '[u', '(and', 'elt', '[v', 'ans1', 'vconcat', 'conjugation-join', 'substring', 'if', '(equal', '[j', '[ch', 'otherwise,', '[b', '[aa', '[m', '[r', '4', '[d', '1', 't', 'reduplicative-pfx-perfect', 'while', 'reduplicate-join', 'append-if-new', 'in', 'when']
  (defun reduplicative-pfx-perfect (tok &optional wparts)
  CALLS: ['to', 'a', 'weak', 'b', 'strong', '[i', '1', '2', 'ctok', 'when', 'word-parts', 'elt', '(member', '"CV"', 'Kale', '=', 'length', 'sibilant-P', 'hard-P', 'de-aspirate', 'sh', '(equal', '(guttural-P', 'corresponding-letter', 'shorten-vowel', '(and', 'o', 'e', 'vector', '"V"', 'Note:', '???', 'Ri', 't', 'fol-msg', 'format', 'reduplicative-pfx']
  (defun kale-463-P (dhaatu)
  CALLS: ['kuTaadi-P']
  (defun kuTaadi-P (dhaatu)
  CALLS: ['In', 'parasmaipada', 'if', 'kuT']
  (defun conjugation-tab-liT-p (upa-syms class pada dhaatu &optional voice)
  CALLS: ['P', 'in', '', 'only', 'if', 'ans', 'periphrastic-suffix', 'periphrastic-base', 'when', 'fol-msg', 'format', 'length', 'make-vector', 'while', '<', 'elt', 'lambda', 'x', 'b', 'conjugation-join-sym', 'flatten', 'aset', '1+']
  (defun periphrastic-base (dhaatu class pada &optional dtype)
  CALLS: ['ans', '(member', 'format', '"c"', '10', 'construct-conjbase1a', 'bhii', 'reduplicate', 't', 'when', 'symbolp', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'sym-without-space', 'gunate-final-vowel']
  (defun periphrastic-suffix (pada)
  CALLS: ['ans', '(equal', 'if', 'periphrastic-init']
  (defun periphrastic-init (pada)
  CALLS: ['ans', '(equal', 'periphrastic-init1', 'join-arrays']
  (defun periphrastic-init1 (class pada dhaatu)
  CALLS: ['ans', 'conjugation-tab-liT-r', 'length', 'while', '<', 'elt', 'conjugation-join-sym', 'if', 'mapcar', 'lambda', 'x1', 'aset', '1+']
  (defun reduplicative-liT-P (dhaatu class)
  CALLS: ['other', 'to', 'ans', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', '(member', 'uurNu', 'uSh', '(not', '1', 'ii', '"CV"', 'day', 't']
  (defun periphrastic-liT-P (dhaatu class &optional dtype)
  CALLS: ['other', 'e.g.', 'to', 'ans', 'ITRANS-parse-words-1', 'symbol-name', 'word-parts', 'elt', 'dtype', '(member', 'uurNu', 'uSh', '(equal', 'ii', '(not', '"CV"', 'day']
  (defun unused-perfect-gunate-final-vowel (tok &optional vriddhi-flag)
  CALLS: ['ans', 'length', 'while', '<', '1-', 'elt', 'when', 'vowel-P', 'if', 'vrddhi1', 'vrddhi', 'guna', 'vconcat', 'substring', '1+', 'fol-msg', 'format', '%s', 'gunate-final-vowel']
  (defun perf-part-active-r (dhaatu class pada upa-syms)
  CALLS: ['ans', 'conjugation-tab-liT-r', '(equal', 'which', 'used', 'elt', 'if', 'length', 'while', '<', 'ITRANS-parse-words-1', 'symbol-name', '(and', 'substring', 'i', 'vconcat', 'sym-without-space', '(member', 'a', 'append-if-new', '1+', '(babha~njvas', '(bibhidvas', '(aajivas', '4', "'kaanach'", 'declension-join']
  (defun old-periphrastic-base (dhaatu class pada)
  CALLS: ['ans', '(member', '10', 'tok-list', 'class-a-base', '(equal', 'kRipay', 'sym-without-space', 'bhii', 'reduplicate', 't', 'when', 'symbolp', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'gunate-final-vowel']
gram2.el 46 4
  (defvar passive-irregs)
  (defvar passive-data)
  (defvar participle-list)
  (defvar Sangram-types)
  (defun word-parts (tokar)
  CALLS: ['types', 'length', 'vector', 'while', '<', 'elt', 'consonant-P', 'if', 'vowel-P', 'when', 'vconcat', '1+', 'concat']
  (defun dhaatu-parts (tokar)
  CALLS: ['parts', 'word-parts', 'elt', 'vector', '(<', 'length', '[s', 'substring', 'u', 'append', '[s]', 'apply', 'vconcat', '(=', '(equal', 't']
  (defun dhaatu-a~Nga-a-REGULAR (dhaatu class pada)
  CALLS: ['conjugation', "'P", 'a~Nga', 'intern', 'format', 'when', 'get', 'Warning', 'symbol-name', 'ITRANS-parse-words-1', '(=', 'dhaatu-a~Nga-1', 'dhaatu-a~Nga-4', 'dhaatu-a~Nga-6', 'dhaatu-a~Nga-10', '(member', '2', 't', 'fol-msg', 'Error']
  (defun dhaatu-a~Nga-1 (tokar)
  CALLS: ['ans', 'dhaatu-parts', 'elt', '(or', 'string=', 'guna', '(and', 'i', '<', 'length', 'kale-395', 'c2', 'it', '=', 'shortsimplevowel-P', 'long', '(equal', 'kale-394', 'if', 'sandhi-internal-diphthong-A', 'vconcat']
  (defun dhaatu-a~Nga-4 (tokar)
  CALLS: ['ans', 'vconcat', 'dhaatu-parts', 'elt', '(and', 'i', '<', 'length', 'kale-395', '(equal', 'kale-394']
  (defun dhaatu-a~Nga-6 (tokar)
  CALLS: ['Whitney', 'ans', 'dhaatu-parts', 'elt', '(and', 'i', '<', 'length', 'kale-395', '(=', '(member', 'vconcat', '(equal', 'u']
  (defun dhaatu-a~Nga-10 (tokar)
  CALLS: ['p.', 'except', 'ans', 'dhaatu-parts', 'elt', '(or', 'string=', 'vrddhi', 'sandhi-internal-diphthong-A', '(and', '=', 'length', 'Kale', 'i', '<', 'kale-395', 'shortsimplevowel-P', 'other', 'c2', 'it', 'guna', '(equal', 'long', 'when', 'kale-394', 'vconcat']
  (defun class10-base (tok &optional Eng-def)
  CALLS: ['s', 'ending', 'b1', 'sym-without-space', 'modify-Eng-def', '(member', 'shout', 'This', "'kuuNay'", 'Kale', 'vconcat', 'few', 'dhaatu-a~Nga-10', '(and', '(equal', 'if']
  (defun class-a-base (dhaatu class pada)
  CALLS: ['conjugation', "'P", 'base', 'symbol-name', 'ITRANS-parse-words-1', '(class-a-base-irreg', '(=', 'dhaatu-a~Nga-1', 'dhaatu-a~Nga-4', 'dhaatu-a~Nga-6', 'class10-base', 't', 'if']
  (defun class-a-base-irreg (dhaatu class pada)
  CALLS: ['ans', '(=', '(equal', 'gachCh', '(and', 'sar', 'gir', 'vichCh', 'e.g.', 'aMshaapay', 'aMsay', 'kalay', 'kRipay', 'kuNay', 'gaday', 'dhuunay', 'paTay', 'paNaay', 'panaay', 'puTay', 'priiNay', 'lajay', 'vasay', 'shaThay', 'dambhay', 'karpay', 't', 'when', 'if', 'lambda', 'x', 'ITRANS-parse-words-1', 'symbol-name']
  (defun class-b-base (dhaatu class pada upasargas)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'if', '<', 'length', '(equal', '(and', 'nasal-P', 'vowel-P', 'vconcat', '(kale-414-P', 'shorten-vowel', 'vector', '(kale-414-opt-P', 'tok1', 'longvowel-P', 'krii', '', 'lii', 'when', 'fol-msg', 'format', '%s']
  (defun kale-414-P (dhaatu)
  CALLS: ['laT,', 'if']
  (defun kale-414-opt-P (dhaatu)
  CALLS: ['if', 'kShii']
  (defun kale-394 (c1 v c2 type)
  CALLS: ['sec.', 'long', '(string=', 'if', 'labial-P', 'elt', 't']
  (defun kale-395 (c1 v c2 type)
  CALLS: ['sec.', '(=', 'length', '(not', 'elt', 'r', '(<', 'vector', 'lengthen-vowel', 't']
  (defun conjugation-tab-pr (a~Nga class pada dhaatu)
  CALLS: ['lambda', 'tense', 'fol-msg', 'format', 'citation-pr', 'conjugation-tab']
  (defun conjugation-tab-upa-pr (a~Nga class pada dhaatu upa)
  CALLS: ['lambda', 'tense', 'fol-msg', 'format', 'citation-pr', 'vconcat', 'mapcar', 'x', 'conjugation-join-sym', 'conjugation-tab']
  (defun conjugation-tab (a~Nga-sym tense-sym class pada dhaatu &optional voice)
  CALLS: ['if', '(equal', 'a', 'conjugation-tab-1', '(member', '1', 'conjugation-tab-5', 'conjugation-citation-irreg', 'conjugation-tab-8', 'conjugation-tab-9', 'to', '(and', 'conjugation-tab-2', 'conjugation-tab-3', 'conjugation-tab-7', 't', 'conjugation-tab-liT', 'conjugation-tab-luT', 'conjugation-tab-lRiT']
  (defun conjugation-tab-1 (a~Nga-sym tense-sym class pada)
  CALLS: ['ending', 'ITRANS-parse-words-1', 'symbol-name', 'conj-endings', 'length', 'when', 'these', 'i', 'while', '<', 'elt', 'if', 'vector', '(equal', 'Antoine', 't', 'conjugation-join', 'aset', '1+', 'fol-msg', 'format', '2', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'make-vector', 'solution', 'sandhi-single', 'sym-without-space']
  (defun conjugation-tab-5 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'a', 'progn', '(vowel-P', '(member', 'v', 't', 'b', 'conjugation-join', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-8 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'progn', '(vowel-P', '(member', 'v', 't', 'conjugation-join', 'solution', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-9 (a~Nga-sym tense-sym class pada)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'u', 'elt', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'substring', 'i', 'while', '<', 'consonant-P', 'conjugation-join', 'solution', 'sym-without-space', 'aset', '1+']
  (defun conjugation-tab-2 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['as', 'endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'when', 'u', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'fol-msg', 'format', 'i', 'it', 'word-parts', '(equal', 'part1', 'guna', 'vectorp', 'vector', 'flatten', '=', 'shortsimplevowel-P', 't', 'while', '<', 'de-aspirate', 'aspirate', 'copy-sequence', '(and', "'A", '(member', '(vowel-P', 'like', 'other', '(or', 'nasal-P', 'semivowel-P', 'consonant-P', '3', '[t]', 'aset', 'sandhi-legalise-final-cons', 'append-if-new', 'solution', '/=', 'v', 'lengthen-vowel', 'i.e.,', 'Dh', 'Note:', 'to', '(not', 'soft-P', 'dental-P', '(let', 'k', 'conjugation-join', 'sym-without-space', 'thisans1', 'rether', 'laT', 'stu', 'ending1', '2A', '2P/2A', '2P', '0', '2P/A', '#431', "'j'", '1', '2', '[t', 'a', 'b', 'ending', 'an', '[s]', '(consonant-P', 'chakaas', 'AntoineI-54', 'Kale', 'already', 'thus', 'usual', 'the', '1+']
  (defun conjugation-tab-3 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'reduplicative-pfx', 'to', 'when', 'nij', 'gunate-final-vowel', 'elt', 'substring', 'u', 'if', 'vowel-P', 'vconcat', 'vrddhi', 'fol-msg', 'format', 'i', 'aset', 'i.e.,', 'rather', 'daa', '3A', 'strong', '3P', 'abandon', 'word-parts', 'while', '<', 'in', '=', 'a0', 'labial-P', 'consonant-P', 'de-aspirate', 'aspirate', 'copy-sequence', 'a', 'b', 'short', '(and', '(equal', '(member', 'guna', '(vowel-P', 'other', '(or', 'nasal-P', 'semivowel-P', 'vector', '3', '[t]', 'sandhi-legalise-final-cons', 'append-if-new', 'solution', 't', '/=', 'v', 'lengthen-vowel', 'Dh', 'Note:', '(not', 'soft-P', 'dental-P', '(let', 'part1', 'k', 'flatten', 'conjugation-join', 'sym-without-space', 'sacrifice', 'regular', 'jahaahi', 'done', 'but', "'j'", 'Ri', '%s', '1+']
  (defun conjugation-tab-7 (a~Nga-sym tense-sym class pada dhaatu)
  CALLS: ['1', '2', '3', '4', 'endings', 'conj-endings', 'conj-strengths', 'length', 'make-vector', 'ITRANS-parse-words-1', 'symbol-name', 'rtok', 'tmp', 'substring', 'elt', 'when', 'nasal-P', 'vconcat', 'u', 'if', 'vowel-P', 'vrddhi', 'fol-msg', 'format', 'i', 'sandhi-n-N', 'weak-nasal', '(guttural-P', '(palatal-P', '(cerebral-P', 't', 'while', '<', '7P', 'consonant-P', 'de-aspirate', 'aspirate', 'copy-sequence', '(vowel-P', 'other', '(or', 'semivowel-P', 'beginning', 'vector', '(and', '[t]', 'aset', 'sandhi-legalise-final-cons', '(equal', 'append-if-new', 'solution', '/=', 'v', 'lengthen-vowel', 'i.e.,', 'Dh', 'Note:', 'to', '(not', 'soft-P', 'dental-P', '(let', 'part1', 'k', 'flatten', 'conjugation-join', 'sym-without-space', '=', '(member', 'j', "'j'", '1+']
  (defun conjugation-join-sym (base-sym sup-sym &optional option)
  CALLS: ['sym-without-space', 'ITRANS-parse-words-1', 'symbol-name']
  (defun conjugation-join (base-tok sup &optional option)
  CALLS: ['of', '(listp', 'mapcar', 'lambda', 'x', 'conjugation-join1', 't']
  (defun conjugation-join1 (y ending option)
  CALLS: ['ans', 'sandhi-pair-skiprefs-set', 'solution', 'sandhi-pair', 'vconcat', 'if', 'sandhi-single']
  (defun sym-with-space (symseq)
  CALLS: ['intern', 'mapconcat']
  (defun sym-without-space (x)
  CALLS: ['fol-msg', 'format', 'y', '(listp', 'mapcar', '(vectorp', 'mapconcat', 'if', 'stringp', 'intern']
  (defun san-symbol-name (x)
  CALLS: ['y', '(symbolp', '(equal', 'symbol-name', 't', 'symnum-name', 'fol-msg', 'format']
  (defun symnum-name (x)
  CALLS: ['if', 'symbolp', 'symbol-name', 'format']
  (defun sym-begins-with (x)
  CALLS: ['s', 'symbol-name', 'ITRANS-parse-words-1', 'if', '<', 'length', 'elt']
  (defun sym-ends-with (x)
  CALLS: ['s', 'symbol-name', 'ITRANS-parse-words-1', 'if', '<', 'length', 'elt', 'substring']
  (defun sym-concat2 (s1 s2)
  CALLS: ['intern', 'concat', 'symbol-name']
  (defun sym-concat (s1 &rest all)
  CALLS: ['ans', 'while', 'sym-concat2']
  (defun apply-seT (tok code)
  CALLS: ['toki', 'conjugation-join', '(equal', 't']
  (defun upasarga-join (upasargas sym)
  CALLS: ['ans', 'append', 'lambda', 'u', 'ITRANS-parse-words-1', 'symbol-name', 'while', 'solution', 'sandhi-pair', 'vconcat', 'sym-without-space']
  (defun conjugation-citation-irreg (dhaatu tense-sym class pada)
  CALLS: ['form', 'format', 'intern', 'sanget2']
  (defun doc-ending-gram2 ()
  CALLS: []
  (defun dhaatu-class-padas (dhaatu)
  CALLS: ['ans', 'get', 'plist-get', 'when', 'Eng-def', 'numbers', 'name1', 'while', 'P,', 'append']
  (defun dhaatu-a~Nga (dhaatu class pada)
  CALLS: ["'P", 's', 'a~Nga', 'Sangram', '03-26-03', 'get', 'plist-get', 'when', 'Eng-def', 'fol-msg', 'format', 'a~Ngas', 'lambda', 'info-class-pada', '((REGULAR', 'aeu', 'xes', 'elt', 'while', '(and', 'eq', '1', 'dhaatu-a~Nga-a-REGULAR', '(member', 'x-string', 'symbol-name', 'ITRANS-parse-words-1', '(eq', '2', 'P', 'append-if-new', 'solution', 'cons']
  (defun class-pada-a~Ngas (dhaatu)
  CALLS: ['class', 'apply', 'mapcar', 'lambda', 'class-pada', 'elt', 'dhaatu-a~Nga', 'aeu', 'a~Nga', 'sym-without-space', 'append', 'dhaatu-class-padas', 'defun', 'dhaatu', 'citations', 'conjugation-citation', 'while', 'c', 'when']
  (defun conjugation-citation (dhaatu tense-sym)
  CALLS: ['cpas', 'class-pada-a~Ngas', '02-01-03', 'while', 'cpa', 'elt', '(equal', 'conjugation-citation-irreg', 'when', 'vconcat', '(member', '1', 'conjugation-tab', 'if', 'append']
  (defun modify-conj-endings-1 (tense-sym pada)
  CALLS: ['class', 'conj-endings', 'length', 'copy-sequence', 'these', 'i', 'while', '<', 'elt', 'if', 'vector', '(equal', 'Antoine', 't', 'conjugation-join', 'aset', '1+', 'fol-msg', 'format', '1', '2']
  (defun get-form-tab (class pada)
  CALLS: ['class-type', 'if', '1', 'eval', 'intern-soft', 'format']
gram3.el 46 1
  (defvar declension-general-save nil)
  (defun declension-citation1 (citation-sym praatipadika gender form irregs)
  CALLS: ['when', 'fol-msg', 'format', 'solution', '(equal', 'declension-general-cons', '(member', '(and', 'M', 'uu1', 'declension-general-M-uu', '(M', '(symbolp', 'declension-general', '(listp', 't']
  (defun citation-pr (vec)
  CALLS: ['n', 'length', 'while', '<', 'substring', '+', '1+', 'fol-msg', 'format', 'elt']
  (defun declension-citation-other1 (citation-sym gender-form gender form type)
  CALLS: ['ans', 'if', 'elt', 'fol-msg', 'format', 'construct-subanta1', 'plist-get']
  (defun declension-citation-other (citation-sym)
  CALLS: ['other-info1', 'sanget2', 'subanta', 'while', 'praatipadika', 'append']
  (defun declension-citation (citation-sym &optional g printflag)
  CALLS: ['ans', 'declension-citation-other', 'fol-msg', 'format', 'while', 'praatipadika', 'elt', '(and', 't', 'declension-citation1', 'when', 'append-if-new', 'lambda', 'x', 'citation-pr']
  (defun declension-general (praatipadika gender form irregs)
  CALLS: ['when', 'fol-msg', 'format', 'ans', 'sup-get', 'base-tok', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'make-vector', 'while', '<', 'elt', 'aset', 'if', 'sym-without-space', 'declension-general-1', '1+', 'defun', 'citation-sym', 'intern-soft', 'apply', 'citation-tok', 'substring', '(equal', 'declension-1cons-l', 'declension-1cons-r', 'declension-1cons-ch', 'declension-1cons-Ch', 'declension-1cons-j', 'declension-1cons-sh', 'declension-1cons-s', 'declension-1cons-Sh', 'declension-1cons-h', 'declension-1cons-v', '(member', 't', 'declension-1cons-t', 'p', 'declension-1cons-p', 'k', 'declension-1cons-k']
  (defun declension-1cons-ch (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'concat', 'make-regexp', 'vrashch', 'vconcat', 'b', '1', 'a', 'Pan.', 'declension-1cons-finish']
  (defun declension-1cons-Ch (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(vowel-P', 'vconcat', 'declension-1cons-finish']
  (defun declension-1cons-j (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'concat', 'make-regexp', 'bhrasj', 'vconcat', 'substring', 'vrashch', 'b', '(string-match', 'sj', 'a', 'Pan.', 'declension-1cons-finish']
  (defun declension-1cons-sh (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'concat', 'make-regexp', 'dish', 'c', 'vconcat', 'substring', 'nash', 'b', 'when', 'dRish', 'declension-1cons-finish']
  (defun declension-1cons-l (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'declension-1cons-finish', 'aset', 'sym-without-space', 'vconcat']
  (defun declension-1cons-r (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '5', 'visarga', 'lengthen-vowel', 'vconcat', 'vector', 'if', 'declension-1cons-finish']
  (defun declension-1cons-s (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', '6', 'elt', 'substring', 'if', 'M', 'lengthen-vowel', 'vconcat', 'vector', '(and', 'a', 'z', 'N', 'anusvaara', 'other', 'vowel-P', 'm.', 'Antoine2-#78', 'declension-1cons-finish']
  (defun declension-1cons-Sh (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'concat', 'make-regexp', 'takSh', 'c', 'vconcat', 'substring', 'kSh', 'dadhRiSh', 'bold', 'if', '2', 'declension-1cons-finish']
  (defun declension-1cons-h (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', '7', '(string-match', 'vconcat', 'substring', 'concat', 'make-regexp', 'lih', 'upaanah', 'uShNih', '3', 'muh', 'a', 'druh', 'p.', 'turaasaah', 'Indra', 'Pan', 'if', 'when', 'vah', 'declension-general-1', '[a]', 'declension-1cons-finish']
  (defun declension-1cons-v (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(string-match', 'sky', 'in', 'a', 'b', 'c', 'this', "'div'", 'vconcat', 'if', 'declension-1cons-finish', '(and', 'string-match', 'M', 'tmp', 'sym-without-space', 'aset', 'when', 'aref']
  (defun declension-1cons-t (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'concat', 'make-regexp', 'budh', 'vconcat', '3', 'if', 'declension-1cons-finish']
  (defun declension-1cons-p (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '4', 'vconcat', 'if', 'declension-1cons-finish']
  (defun declension-1cons-k (citation-sym gender irregs)
  CALLS: ['procname', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'vconcat', 'if', 'declension-1cons-finish']
  (defun declension-1cons-finish (base-toks gender irregs)
  CALLS: ['ans', 'sup-get', 'length', 'i', 'make-vector', 'while', '<', 'elt', 'fol-msg', 'format', 'aset', 'if', 'sym-without-space', 'declension-general-1', '1+', 'defun', 'citation-sym', 'procname', 'when', 'symbolp', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'vconcat', '%s', '(equal', 'nomsing', '', 'base-tok']
  (defun declension-general-mat-ADJ (c p g f i)
  CALLS: ['declension-general-mat']
  (defun declension-general-vat (c p g f i)
  CALLS: ['declension-general-mat']
  (defun declension-general-vat-ADJ (c p g f i)
  CALLS: ['declension-general-mat', 'defun', 'citation-sym', 'procname', 'format', 'sup-get', 'length', 'if', 'symbolp', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'vconcat', 'fol-msg', '%s', '(equal', 'nomsing', '', 'base-tok', 'make-vector', 'i', 'while', '<', 'elt', 'aset', 'sym-without-space', 'declension-general-1', '1+', 'xtok']
  (defun declension-general-in-ADJ (c p g f i)
  CALLS: ['declension-general-in', 'defun', 'citation-sym', 'procname', 'if', 'format', 'fol-msg', 'sup-get', 'length', 'symbolp', '%s', 'ITRANS-parse-words-1', 'symbol-name', '<', 'substring', '', 'vconcat', 'declension-join', '(equal', '1S', 'base-tok', 'make-vector', 'i', 'while', 'elt', 'aset', 'sym-without-space', 'declension-general-1', '1+']
  (defun declension-general-an-ADJ (c p g f i)
  CALLS: ['f1', 'declension-general-an', 'defun', 'citation-sym', 'procname', 'format', 'when', 'fol-msg', 'sup-get', 'length', 'if', 'symbolp', '%s', 'ITRANS-parse-words-1', 'symbol-name', '<', 'substring', 'vconcat', 'puuShan', '03-16-03', 'Antoine,', 'asthi', 'Section', 'say', 'solution', 'sandhi-pair', '[m', 'consonant-P', 'elt', 'so', '(equal', '1S', '7S', 'base-tok', 'make-vector', 'i', 'while', 'sym-without-space', 'declension-general-1', 'aset', '1+', '<=', 'subanta-base', 'append', 'sym-delete-last', 'praatipadikas1', 'declension-general-M-uu-helper', 'for', '', 'progn', '(and', 'a', 'o', 'Pan.', 'b', 'i.e.,', 'word-parts', '[k', '(<=', 'e.g.', 't']
  (defun declension-general-1 (base-tok sup)
  CALLS: ['(listp', 'mapcar', 'lambda', 'x', 'declension-join', 't']
  (defun declension-join (base-tok sup)
  CALLS: ['ans', 'fol-msg', 'format', 'sandhi-pair-skiprefs-set', '(solution', 'sandhi-pair', '(and', 'arrayp', 'substring', 'ans1', 'when', '([s', '[s', 'apply', '(symbolp', 'sym-without-space', 'vector', '(arrayp', 'vconcat', 'hopefully', 'length', '<=', 'sandhi-n-N-ifirst-set', 't', '1-', 'sandhi-single']
  (defun declension-pres-part (praatipadikas gender class pada)
  CALLS: ['if', 'declension-pres-part-P', 'declension-pres-part-A', 'defun', 'citation-sym']
  (defun declension-pres-part-P (praatipadikas gender &optional class)
  CALLS: ['weak', 'nayat', 'use', 'procname', 'format', 'ITRANS-parse-words-1', 'symbol-name', 'elt', '(equal', 't', 'fol-msg', '%s', 'sup-get', 'stok1', 'if', 'base-tok', 'length', 'make-vector', 'n', 'while', '<', 'aset', 'sym-without-space', 'declension-general-1', '1+']
  (defun declension-pres-part-A (praatipadikas gender &optional class)
  CALLS: ['base', 'vartamaan', 'procname', 'format', 'elt', '(equal', 'declension-general', 'fol-msg', '%s']
  (defun declension-perf-part-passive (praatipadikas gender)
  CALLS: ['participle', 'base', 'gat', 'for', 'procname', 'format', 'elt', '(equal', 'declension-general', 'fol-msg', '%s']
  (defun declension-pot-part-passive (praatipadikas gender)
  CALLS: ['base', 'gantavy', 'for', 'procname', 'format', 'elt', '(equal', 'declension-general', 'fol-msg', '%s']
  (defun declension-perf-part-active (praatipadikas gender)
  CALLS: ['active', 'base', 'gat', 'for', 'procname', 'format', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'sym-without-space', 'vconcat', 'fol-msg', '%s', 'declension-general-mat']
  (defun declension-rperf-part (pre-praatipadikas gender pada)
  CALLS: ['active', 'citation-sym', '(equal', 'sym-concat', 'declension-general-vas-ADJ', 'fol-msg', 'format', 'declension-general']
  (defun declension-perperf-part (praatipadikas gender pada)
  CALLS: ['ans', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'if', 'substring', '(equal', 'sym-concat', 'declension-general-vas-ADJ', 'fol-msg', 'format', 'declension-general']
  (defun declension-fut-part-active (pre-praatipadikas gender pada)
  CALLS: ['(equal', 'declension-fut-part-active-P', 'declension-fut-part-active-A']
  (defun declension-fut-part-active-P (pre-praatipadikas gender)
  CALLS: ['active', 'an', 'say,', 'a', 'pres-part-praatipadikas', 'sym-concat', 'p', 'gamiShyat', 'b', 'declension-pres-part-P', 'ans', 'listify', 'while', 'when', 'if', 'join-arrays']
  (defun declension-fut-part-active-A (praatipadikas gender)
  CALLS: ['active', 'an', 'ans', 'listify', 'while', '(equal', 'declension-general', 'fol-msg', 'format', '%s', 'when', 'if', 'join-arrays']
  (defun declension-fut-part-passive (praatipadikas gender)
  CALLS: ['passive', 'declension-fut-part-active-A']
  (defun declension-adj(citation-sym praatipadikas gender form-sym)
  CALLS: ['base', 'diirgh', 'for', 'e.g.,', 'fol-msg', 'format', 'praatipadika', 'elt', 'solution', 'sym-without-space', 'vector', '(member', 'declension-general-cons', 't', 'declension-general']
  (defun declension-adj-new (citation-sym praatipadikas gender form-sym)
  CALLS: ['e.g.,', 'thisans', 'sym-without-space', 'vector', 'declension-citation', 'while', 'when', 'elt', 'append-if-new', 'solution']
  (defun declension-pron (citation-sym praatipadikas gender form-sym)
  CALLS: ['e.g.,', 'when', 'fol-msg', 'format', 'if', 'MW-', 'irreg', 'make-vector', 'aset', 'bhavan', 'declension-general-vat', 'thisans', 'sym-without-space', 'vector', 'declension-citation', 'while', 'elt', 'append-if-new']
  (defun subanta-base-1cons (citation-sym gender)
  CALLS: ['citation-tok', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(equal', '1', 'vconcat', '(member', 'vaNij', 'samraaj', 'dish', 'vish', '2', 't', '3', 'p', '4', '5', 'visarga', 'v1', 'lengthen-vowel', 'vector', '6', 'when', 'M', '7', 'sky', 'a', 'b', 'c', 'this', "'div'", 'fol-msg', 'format', 'sym-without-space']
  (defun adjust-praatipadikas (old form)
  CALLS: ['(member', '1cons', 'ans', 'while', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'if', 'consonant-P', '(and', '(equal', 't', 'sym-without-space', 'append-if-new']
  (defun init-avyayapada (&optional OBARRAY)
  CALLS: ['if', 'mapatoms']
  (defun init-avyayapada-helper-1 (sym)
  CALLS: ['when', 'sanget', 'sanput', 'defun', 'citation-sym', 'fol-msg', 'format', 'procname', 'subanta-base-1cons', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'sup-get', 'length', 'if', 'symbolp', '%s', 'lambda', 'praatipadika', '(not', '(equal', 'x', 'lengthen-vowel', 'vconcat', 'vector', '(and', 'M', 'a', 'N', 'anusvaara', 'other', 'm.', 'Antoine2-#78', 'vowel-P', 't', 'progn', 'i', 'make-vector', 'while', '<', 'aset', 'sym-without-space', 'declension-general-1', '1+', 'Antoine-II.', 'e.g.', 'dh', 'the', 'for', 'doublebase', 'i=17', 'ii1', 'ii2', 'solution', 'strii', 'set', 'senaan', '', 'tmp', 'word-parts', 'o', 'Pan.', 'b', 'i.e.,', 'tok1', '<=', '[k', '(<=', 'append']
irreg.el 7 2
  (defvar nil-declension (make-vector 24 nil)
  (defvar nil-conjugation (make-vector 9 nil)
  (defun subanta-irreg (subanta form Eng-def val)
  CALLS: ['fol-msg', 'format', 'sanput2']
  (defun dhaatu-irreg (dhaatu form Eng-def val)
  CALLS: ['fol-msg', 'format', 'sanput2', 'make-vector']
  (defun declension-M-a-IRR (vstem cstem1 &optional cstem2)
  CALLS: ['dtab-v', 'fol-msg', 'format', 'declension-general', 'if', 'declension-general-1cons', 'length', 'copy-sequence', 'while', '<=', 'aset', 'elt', '1+']
  (defun declension-F-aa-IRR (vstem cstem1 &optional cstem2)
  CALLS: ['dtab-v', 'declension-general', 'if', 'declension-general-1cons', 'length', 'copy-sequence', 'while', '<=', 'aset', 'elt', '1+']
  (defun declension-F-aa1-IRR (vstem cstem1 &optional cstem2)
  CALLS: ['dtab-v', 'declension-general', 'if', 'declension-general-1cons', 'length', 'copy-sequence', 'sup-get', 'while', '<=', 'when', 'elt', 'vowel-P', 'aset', '1+']
  (defun declension-M-aa1-IRR (vstem cstem1 &optional cstem2)
  CALLS: ['dtab-v', 'declension-general', 'if', 'declension-general-1cons', 'length', 'copy-sequence', 'sup-get', 'while', '<=', 'when', 'elt', 'vowel-P', 'aset', '1+']
  (defun declension-N-i1-IRR (citation-sym )
  CALLS: ['e.g.', '1', 'declension-general-cons', '2', 'declension-general', 'procname', 'format', 'citation-tok', 'ITRANS-parse-words-1', 'symbol-name', 'substring', 'sym-without-space', 'sup-get', 'length', '=', 'solution', 'csym', 'vector', 'i', 'make-vector', 'while', '<', 'elt', 'aset', 'if', '<=', 'vowel-P', '1+', 'subanta-irreg', 'there', 'maa,', 'just,', 'aavaam', 'P.Scharf', 'maam', 'asmaan', 'mahyam', 'aavaabhyaam', 'asmabhyam', 'mama', 'aavayoH', 'asmaakam', 'tvaa,', 'yuvaam', 'tvaam', 'yuShmaan', 'tubhyam', 'yuvaabhyaam', 'yuShmabhyam', 'tava', 'yuvayoH', 'yuShmaakam', 'imam', 'imau', 'imaan', 'anena', 'anayoH', 'imaam', 'ime', 'imaaH', 'anayaa', 'idam', 'imaani', '', 'ans', 'copy-sequence', 'etam', 'etau', 'etaan', 'etena', 'etayoH', 'etaam', 'ete', 'etaaH', 'etayaa', 'etat', 'etaani', 'nRINaam', 'a', 'sacrificial', 'aShTa', 'aShTabhiH', 'aShTabhyaH', 'aShTasu', 'declension-M-a-IRR', 'declension-F-aa-IRR', 'declension-F-aa1-IRR', 'declension-M-aa1-IRR', 'striyam', 'striyaH', 'declension-N-i1-IRR', 'kroShTunaa', 'kroShTave', 'kroShToH', 'kroShTvoH', 'kroShTau', 'path', 'which', 'day', 'b', 'ahnii', 'ahni', 'dog', 'using', 'young', 'Indra', 'vRitraghni', 'forming', 'declension-general-mat', 'declension-general-an', 'arm', 'noun', 'acc.', 'loc.', 'doShaH', 'doShaa', 'dorbhyaam', 'dorbhiH', 'doShe', 'dorbhyaH', 'doShoH', 'doShaam', 'doShi', 'doHShu', 'blessing', 'to', 'sky', 'c', 'this', "'div'", 'divam', 'time', 'name', 'man', 'ox', 'p.', 'water', 'that', 'one', 'desirous', 'suhinsu', 'jighaansu', 'aref', 'heron', 'lame', 'beautifully', 'dhaatu-irreg', 'x', 'conjugation-tab-2', 'avet', 'aveH', 'braviiti', 'bruutaH', 'bruvanti', 'braviiShi', 'bruuthaH']
itrans.el 63 110
  (defvar single-quote-sym (intern "'")
  (defvar DUMMY_TOK  257)
  (defvar A_TOK  258)
  (defvar AA_TOK  259)
  (defvar I_TOK  260)
  (defvar II_TOK  261)
  (defvar U_TOK  262)
  (defvar UU_TOK  263)
  (defvar RI_TOK  264)
  (defvar RII_TOK  265)
  (defvar LI_TOK  266)
  (defvar LII_TOK  267)
  (defvar AY_TOK  268)
  (defvar AAY_TOK  269)
  (defvar AI_TOK  270)
  (defvar O_TOK  271)
  (defvar OO_TOK  272)
  (defvar AU_TOK  273)
  (defvar AM_TOK  274)
  (defvar AHA_TOK  275)
  (defvar ANUSVARA_TOK 274)
  (defvar HALF_TOK  276)
  (defvar IMPLICIT_TOK  277)
  (defvar CONJUNCT_TOK  278)
  (defvar KA_TOK  279)
  (defvar KHA_TOK  280)
  (defvar GA_TOK  281)
  (defvar GHA_TOK  282)
  (defvar NGA_TOK  283)
  (defvar CHA_TOK  284)
  (defvar CHHA_TOK  285)
  (defvar JA_TOK  286)
  (defvar JHA_TOK  287)
  (defvar JNA_TOK  288)
  (defvar TTA_TOK  289)
  (defvar TTHA_TOK  290)
  (defvar DDA_TOK  291)
  (defvar DDHA_TOK  292)
  (defvar NNA_TOK  293)
  (defvar TA_TOK  294)
  (defvar THA_TOK  295)
  (defvar DA_TOK  296)
  (defvar DHA_TOK  297)
  (defvar NA_TOK  298)
  (defvar PA_TOK  299)
  (defvar PHA_TOK  300)
  (defvar BA_TOK  301)
  (defvar BHA_TOK  302)
  (defvar MA_TOK  303)
  (defvar YA_TOK  304)
  (defvar YYA_TOK  305)
  (defvar RA_TOK  306)
  (defvar LA_TOK  307)
  (defvar VA_TOK  308)
  (defvar SHA_TOK  309)
  (defvar SHHA_TOK  310)
  (defvar SA_TOK  311)
  (defvar HA_TOK  312)
  (defvar LDA_TOK  313)
  (defvar KSHA_TOK  314)
  (defvar GYA_TOK  315)
  (defvar NNX_TOK  316)
  (defvar NYA_TOK  317)
  (defvar RRA_TOK  318)
  (defvar KADOT_TOK  319)
  (defvar KHADOT_TOK  320)
  (defvar GADOT_TOK  321)
  (defvar DDADOT_TOK  322)
  (defvar DDHADOT_TOK  323)
  (defvar JADOT_TOK  324)
  (defvar PHADOT_TOK  325)
  (defvar RA_HALF_TOK  326)
  (defvar ANUSVARA_TOK  327)
  (defvar CHANDRA_TOK  328)
  (defvar CHANDRA_BN_TOK  329)
  (defvar VIRAAM_TOK  330)
  (defvar AVAGRAHA_TOK  331)
  (defvar SRI_TOK  332)
  (defvar AUM_TOK  333)
  (defvar BLANK_TOK  334)
  (defvar NEWLINE_TOK  335)
  (defvar NOLIG_TOK  336)
  (defvar COMMAND_TOK  337)
  (defvar ENDPREV_TOK  338)
  (defvar DANDA_TOK 338)
  (defvar IMARKER_TOK  339)
  (defvar ENDMARKER_TOK  352)
  (defvar SETIFM_TOK  353)
  (defvar SETFONT_TOK  354)
  (defvar ERR_TOK 999)
  (defvar ITRANS_PARSE nil)
  (defvar NITRANS_PARSE 256)
  (defvar ITRANS-ordering nil)
  (defvar ITRANS-alphabet nil)
  (defvar SLP1-alphabet nil)
  (defvar SLP1-ordering nil)
  (defvar HK-alphabet nil)
  (defvar HK-ordering nil)
  (defvar HK_PARSE nil)
  (defvar NHK_PARSE 256)
  (defvar HKMW_PARSE nil)
  (defvar NHKMW_PARSE 256)
  (defvar SLP1_PARSE nil)
  (defvar NSLP1_PARSE 256)
  (defvar SLP1-ITRANS-parser nil)
  (defvar ITRANS-SLP1-parser nil)
  (defvar AS_PARSE nil)
  (defvar NAS_PARSE 256)
  (defvar SLP1-AS-parser nil)
  (defvar AS-SLP1-parser nil)
  (defun temp-vowels ()
  CALLS: ['dependent']
  (defun temp-Consonants ()
  CALLS: ['dot', "`S'", 'to', 'visarga']
  (defun word-list (s)
  CALLS: ['insert', 'goto-char', 'n', 'while', '<', 'point', 'point-max', 'skip-chars-forward', 'buffer-substring', 'vconcat', 'vector']
  (defun gen-word-list (s &optional wsepin)
  CALLS: ['insert', 'goto-char', 'if', 'n', 'concat', 'while', '<', 'point', 'point-max', 'skip-chars-forward', 'buffer-substring', 'vconcat', 'vector']
  (defun reg-word-list (s wordreg)
  CALLS: ['insert', 'goto-char', 'ans', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'cons', 'point', 'when', '<', 'point-max', 'nreverse', 'vconcat']
  (defun parse_INIT_CAP ()
  CALLS: ['make-vector', 'aset']
  (defun init-transliteration ()
  CALLS: ['init-ITRANS-ordering', 'ITRANS-init', 'init-HK-ordering', 'HK-init', 'HKMW-init', 'SLP1-init', 'AS-init', 'SLP1-parsers-init', 'AS-SLP1-parsers-init']
  (defun SLP1-init ()
  CALLS: ['vector', 'init-SLP1-ordering', 'SLP1-PARSE-init', 'SLP1-parsers-init']
  (defun ITRANS-init ()
  CALLS: ['make-vector', 'aset']
  (defun any-parse-word-string (s transvec)
  CALLS: ['toks', 'meaning', 'so', 'ans', 'length', '(not', 'stringp', '(=', 'fol-msg', 'format', 'while', '<', 'aref', 'if', 'make-vector', '1-', 'aset', '1+', '+', '<=', '=', 'when', 'vconcat']
  (defun ITRANS-parse-word-string (s)
  CALLS: ['toks', 'meaning', 'so', 'any-parse-word-string']
  (defun old-ITRANS-parse-word-string (s)
  CALLS: ['toks', 'meaning', 'so', 'ans', '(not', 'stringp', '(=', 'length', 'fol-msg', 'format', 'while', '<', 'aref', 'make-vector', '1-', 'aset', '1+', '+', 'if', '<=', '=', 'when', 'vconcat']
  (defun vector-droplast (match-val v)
  CALLS: ['n', '(not', 'vectorp', 'length', '=', '(equal', 'elt', '1-', 'substring', 't']
  (defun vector-droplast-VIRAAM (v)
  CALLS: ['vector-droplast']
  (defun ITRANS-parse-words (s)
  CALLS: ['mapcar', 'word-list']
  (defun ITRANS-parse-words-1 (s)
  CALLS: ['ans1', 'mapcar', 'ITRANS-parse-words']
  (defun ITRANS-parse-words-2 (s)
  CALLS: ['apply', 'ITRANS-parse-words-1']
  (defun ITRANS-parse-words-3 (s)
  CALLS: ['append', 'ITRANS-parse-words-2', 'sort', 'aap', 'cham', 'i.e.,']
  (defun ITRANS-lt-str (x y)
  CALLS: ['ITRANS-lt-tok', 'ITRANS-parse-words-1']
  (defun ITRANS-lt-sym (x y)
  CALLS: ['ITRANS-lt-str', 'symbol-name']
  (defun any-lt-tok (x1 x2 any-ordering)
  CALLS: ['ans', 'length', 'if', '<=', 'while', '<', '(equal', 'elt', '(any-lt-char', 't', '1+', 'when']
  (defun any-lt-char (c1 c2 any-ordering)
  CALLS: ['e.g.', 'n1', 'plist-get', '<']
  (defun ITRANS-lt-tok (x1 x2)
  CALLS: ['any-lt-tok']
  (defun ITRANS-lt-char (c1 c2)
  CALLS: ['ITRANS-parse-words-1', 'any-lt-char']
  (defun old-ITRANS-lt-char (c1 c2)
  CALLS: ['ITRANS-parse-words-1', 'n1', 'plist-get', '<']
  (defun init-some-ordering (alphabet)
  CALLS: ['data', 'length', 'while', '<', 'elt', 'append', '1+']
  (defun init-ITRANS-ordering ()
  CALLS: ['init-some-ordering']
  (defun ITRANS-SLP1-sym (sym)
  CALLS: ['ans', 'plist-get', 'when', 'elt']
  (defun init-SLP1-ordering ()
  CALLS: ['init-some-ordering']
  (defun SLP1-parse-words-1 (s)
  CALLS: ['ans1', 'mapcar', 'SLP1-parse-words']
  (defun SLP1-parse-words (s)
  CALLS: ['mapcar', 'word-list']
  (defun SLP1-parse-word-string (s)
  CALLS: ['toks', 'meaning', 'so', 'any-parse-word-string']
  (defun SLP1-lt-str (x y)
  CALLS: ['SLP1-lt-tok', 'SLP1-parse-words-1']
  (defun SLP1-lt-sym (x y)
  CALLS: ['SLP1-lt-str', 'symbol-name']
  (defun SLP1-lt-tok (x1 x2)
  CALLS: ['any-lt-tok']
  (defun SLP1-ITRANS-sym (sym)
  CALLS: ['ans', 'plist-get', 'when', 'elt']
  (defun init-HK-ordering ()
  CALLS: ['init-some-ordering']
  (defun ITRANS-HK-sym (sym)
  CALLS: ['ans', 'plist-get', 'when', 'elt']
  (defun HK-ITRANS-sym (sym)
  CALLS: ['ans', 'plist-get', 'when', 'elt']
  (defun HK-init ()
  CALLS: ['vconcat', 'vector', 'make-vector', 'aset', 'char-to-string']
  (defun parse-from-to-construct (parse1 alpha1 alpha2)
  CALLS: ['ans', 'init-some-ordering', 'length', 'make-vector', 'while', '<', 'elt', 's', 'lambda', 'sym1', 'plist-get', 'if', 'substring', 'vconcat', 'cons', 'aset', '1+']
  (defun HKMW-init ()
  CALLS: ['make-vector', 'aset', 'word', 'symbol', 'vector', 'char-to-string']
  (defun SLP1-PARSE-init ()
  CALLS: ['make-vector', 'aset', 'vector']
  (defun SLP1-parsers-init ()
  CALLS: ['parse-from-to-construct']
  (defun translate-ITRANS-SLP1 (l)
  CALLS: ['lambda', 'x', 'any-parse-word-string', 'symbol-name']
  (defun translate-SLP1-ITRANS (l)
  CALLS: ['lambda', 'x', 'any-parse-word-string', 'symbol-name']
  (defun translate-string-ITRANS-SLP1 (l)
  CALLS: ['ans1', 'lambda', 'x', 'mapconcat', 'mapcar', 'y', '[D', 'any-parse-word-string', 'when', 'elt', 'vconcat', 'fol-msg', 'format', 'if']
  (defun translate-string-ITRANS-SLP1-a (l)
  CALLS: ['ans', 'insert', 'format', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'translate-string-ITRANS-SLP1', 'replace-match', 'current-line']
  (defun translate-string-ITRANS-SLP1-b (l)
  CALLS: ['ans', 'insert', 'format', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'translate-string-ITRANS-SLP1', 'replace-match', 'current-line']
  (defun translate-string-SLP1-ITRANS (l)
  CALLS: ['lambda', 'x', 'mapconcat', 'mapcar', 'y', '[D', 'any-parse-word-string', 'when', 'elt', 'vconcat', 'fol-msg', 'format']
  (defun translate-string-SLP1-ITRANS-a (l)
  CALLS: ['ans', 'insert', 'format', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'translate-string-SLP1-ITRANS', 'replace-match', 'current-line']
  (defun translate-buffer-SLP1-ITRANS (buf)
  CALLS: ['s', 'with-current-buffer', 'point', 'goto-char', 'while', 'search-forward-regexp', '[^}]+\\\\', 'match-beginning', 'match-end', 'buffer-substring', 'translate-string-SLP1-ITRANS-a', 'delete-char', '-', 'insert', 'format']
  (defun mapcar-LE (f l)
  CALLS: ['(not', '(listp', 'mapcar', 'lambda', 'x', 'mapcar-LE', '(vectorp', 'vconcat', 't', 'symbolp', 'funcall']
  (defun make-regexp (x)
  CALLS: ['non-empty', 'abc', 'abc\\\\|def\\\\', 'ans', 'concat', 'format', 'while', '"']
  (defun string-trim (s)
  CALLS: ['', 'while', '<', 'length', 'elt', 'substring']
  (defun string-delete-regexp (regexp string)
  CALLS: ['insert', 'delete-regexp', 'buffer-substring', 'point-min', 'point-max']
  (defun delete-regexp (regexp)
  CALLS: ['schg', 'goto-char', 'while', 'search-forward-regexp', 'replace-match']
  (defun AS-init ()
  CALLS: ['vconcat', 'vector', 'make-vector', 'aset', 'char-to-string']
  (defun AS-SLP1-parsers-init ()
  CALLS: ['parse-from-to-construct']
  (defun translate-AS-SLP1 (l)
  CALLS: ['lambda', 'x', 'y', 'any-parse-word-string', 'symbol-name', 'when', 'fol-msg', 'format']
  (defun translate-string-AS-SLP1 (l)
  CALLS: ['lambda', 'x', 'mapconcat', 'mapcar', 'y', '[D', 'any-parse-word-string', 'when', 'elt', 'vconcat', 'fol-msg', 'format']
  (defun translate-string-AS-SLP1-a (l)
  CALLS: ['ans', 'insert', 'format', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'translate-string-AS-SLP1', 'replace-match', 'current-line']
  (defun word-list-lines (txt)
  CALLS: ['l', 'insert', 'goto-char', 'point-min', 'while', '<', 'point', 'point-max', 'current-line', 'forward-line', 'word-list', 'append', 'fol-msg', 'format', 'cons', 'reverse']
kta.el 40 0
  (defun kta-doc ()
  CALLS: []
  (defun tvaa-doc ()
  CALLS: []
  (defun lyap-doc ()
  CALLS: []
  (defun inf-doc ()
  CALLS: []
  (defun potpart-doc ()
  CALLS: []
  (defun potpart-yat-doc ()
  CALLS: []
  (defun potpart-kyap-doc ()
  CALLS: []
  (defun potpart-Nyat-doc ()
  CALLS: ['defun', 'dhaatu', 'ending', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'kta-seT-code', '(equal', 'construct-conjbase1a', 'mapcar', 'lambda', 'b', 'solution', 'causal-conjtab1a-bases', '(samprasaaraNa-P', 't', 'samprasaaraNa', '(or', 'kale-584-P', 'dhvaMs', 'generally', 'vconcat', 'x', 'labial-P', '(member', 'e', '(kale-696-P', 'when', 'khan', 'lengthen-vowel', 'vector', 'sham', 'a']
  (defun construct-pppart1a (dhaatu class pada upasargas &optional dtype)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'when', 'kale-414-P', 'kale-692-P', '9th', 'puu', 'aa', 'consonant-P', 'semivowel-P', 'khyaa', 'to', 'kta-seT-code', 'construct-pppart1a-helper', 'fol-msg', 'format', 'kta-join', 'sym-without-space', 'c', 'construct-pppart1a-exception', 'solution']
  (defun construct-pppart1a-exception (dhaatu class pada upasargas)
  CALLS: ['ans', '(equal', 'mugdha', 'a', '(and', 'drugdha', '6', 'vitta', 'vidita', 'Chaadita', 'shapita', 'tRiShita', 'kShita', 'kShata', 'duta', 'suuna', 'RiNa', 'dyuuta', 'vaana', 'shyaana', 'nunna', 'unna', 'traaNa', 'ghraaNa', 'hriiNa', 'piina', 'haana', 'duuta', 'grathita', 'mathita', 'sita', 'tvarita', 'traata', 'jagdha', 'arNNa', 'kaShTa', 'karshita', 'kShmaayita', 'Chaata', 'dRiDha', 'dhauta', 'phalita', 'mavita', 'muurta', 'shaata', 'bRihita', 'bRiMhita', 'vRihita', 'vRiMhita', 'hlanna', 'shRita', 'Kale', 'styaana', "'niShNaata'", 'Dayita', 'buddha', 'bhraanta', 'shchutita', 'yatita', 'dhuuta', 'svidita', 'pavita', 'RiShTa', 'RiShita']
  (defun kta-seT-code (dhaatu class pada upasargas &optional tok dtype)
  CALLS: ['seT-code', 'construct-seT-code1a', 'fol-msg', 'format', 'if', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', '(member', 'c', 'riSh', '(equal', '1', 't', '(and', 'kShudh', 'chit', 'shvas', 'sam', 'aa', 'a', 'the', 'tRiSh', 'dhRiSh', 'b', 'consonant-P', 'vowel-P']
  (defun kale-696-P (dhaatu)
  CALLS: ['if']
  (defun kale-692-P (dhaatu class pada upasargas)
  CALLS: ['if', '3A', '3P', 'suu', 'bhuj', 'ruj', 'laj', 'vid']
  (defun kta-join (base-tok seT-code sup dhaatu)
  CALLS: ['(listp', 'mapcar', 'lambda', 'x', 'kta-join', '(equal', 'seT', 't', 'kta-join1']
  (defun kta-join1 (y seT-code ending0 dhaatu)
  CALLS: ['ans', 'if', 'conjugation-join', 'sandhi-pair-skiprefs-set', 'length', 'when', '<', 'elt', 'substring', '<=', '-', 'fol-msg', 'format', 'consonant-P', 'semivowel-P', '(and', 'sah', 'by', 'vconcat', 'dih', 'ylast1', '(equal', 't', 'vector', 'lih', 'lengthen-vowel', 'j', '[bh', 'declension-join', 'aset', '1+', 'khyaa', 'to', 'aorist-join1-t-th', 'sandhi-single', 'solution']
  (defun construct-ippart1a (dhaatu class pada upasargas)
  CALLS: ['if', 'construct-ippart1a-ya', 'construct-ippart1a-tvaa']
  (defun construct-ippart1a-tvaa (dhaatu class pada upasargas &optional dtype)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'tvaa-seT-code', '(equal', 'class10-base', 'lambda', 'b', 'sym-without-space', 'vconcat', 'causal-conjtab1a-bases', 'gunate-final-vowel', '(or', 'mRiD', 'kale-463-P', '(member', 'tRiSh', 'a', 'consonant-P', 'i', 'y', 'cons', 'conjugation-join', 'ans2', 'construct-ippart1a-tvaa-basic', 'thisans', 'append-if-new', 'when', 'fol-msg', 'format', 'construct-ippart1a-tvaa-exception', 'solution']
  (defun construct-ippart1a-tvaa-basic (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-pppart1a', 'if', 'while', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'elt', 'substring', '(member', 'dh', 'vconcat', '(and', '<=', '[n', 'tvaa-join1-t-th', 'when', 'sym-without-space', 'append-if-new', 'solution']
  (defun tvaa-join1-t-th (y ending  dhaatu)
  CALLS: ['ans', 'fol-msg', 'format', 'length', 'when', '<', 'elt', 'substring', 'if', '<=', '-', '(equal', 'vconcat', 't', 'kta-join1']
  (defun construct-ippart1a-tvaa-exception (dhaatu class pada upasargas)
  CALLS: ['when', 'fol-msg', 'format', 'ans', '(and', '(equal', 'vasitvaa', 'maarjitvaa', 'pavitvaa', 'guhitvaa', 'gopaayitvaa', 'gupitvaa', 'a~nchitvaa', 'devitvaa', 'kramitvaa', 'shamitvaa', 'Chittvaa', 't']
  (defun tvaa-seT-code (dhaatu class pada upasargas &optional tok)
  CALLS: ['seT-code', 'if', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'substring', 'construct-seT-code1a', 'kta-seT-code', '(equal', '(member', 'mRiSh', 'a,b', '(and', 'iSh', '(indicatory-u-P', 'shvi', 'consonant-P', '10', 't']
  (defun construct-ippart1a-ya (dhaatu class pada upasargas &optional dtype)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'if', 'samprasaaraNa-P', 've', 'samprasaaraNa', 'length', '<', 'elt', 'substring', 'dhaatu-parts', 'vconcat', '(kale-584-P', '(equal', 'toks', 'class-a-base', 'lambda', 'tok', 'append-if-new', 'shortvowel-P', 'causal-base', '(or', 'nasal-P', 'man', 'when', 'ans1', '(member', 'gam', 'khan', 'gunate-final-vowel', 'kale-394', 'aa', 'mii', '5', '9', '4', '(shortvowel-P', '(and', 'i', 'kale-395', 'conjugation-join', 'sym-without-space', 'construct-ippart1a-ya-exception', 'solution']
  (defun construct-ippart1a-ya-exception (dhaatu class pada upasargas)
  CALLS: ['ans', '(and', '(pari', 'sam', 'vyaaya', 't', '(equal', 'mugdha', 'a', 'drugdha', '6', 'vitta', 'vidita', 'Chaadita', 'shapita', 'tRiShita', 'kShita', 'duta', 'suuna', 'RiNa', 'dyuuta', 'vaana', 'shyaana', 'nunna', 'unna', 'traaNa', 'ghraaNa', 'hriiNa', 'piina', 'haana', 'duuta', 'grathita', 'mathita', 'sita', 'tvarita', 'traata', 'arNNa', 'kaShTa', 'kShmaayita', 'Chaata', 'dRiDha', 'dhauta', 'phalita', 'mavita', 'muurta', 'shaata', 'bRihita', 'bRiMhita', 'vRihita', 'vRiMhita', 'hlanna', 'shRita', 'Kale', 'styaana', "'niShNaata'", 'Dayita', 'buddha', 'bhraanta', 'shchutita', 'yatita', 'dhuuta', 'svidita', 'pavita']
  (defun construct-ippart1a-ya-basic (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-pppart1a', 'if', 'while', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'elt', 'substring', '(member', 'dh', 'vconcat', '(and', '<=', '[n', 'tvaa-join1-t-th', 'when', 'sym-without-space', 'append-if-new', 'solution']
  (defun indicatory-u-P (dhaatu class pada)
  CALLS: ['data', 'as', 'va~nch', 'while', '(symbolp', '(listp', 'elt']
  (defun construct-inf1a (dhaatu class pada upasargas)
  CALLS: ['ans', 'construct-inf1a-basic', 'construct-inf1a-exception', 'if', 'solution']
  (defun construct-inf1a-basic (dhaatu class pada upasargas)
  CALLS: ['ans', 'conjugation-tab', 'construct-conjtab1a', 'elt', 'when', 'while', 'ITRANS-parse-words-1', 'symbol-name', 'length', '<', 'substring', '(equal', 'vconcat', 't', 'fol-msg', 'format', 'sym-without-space', 'append-if-new', 'solution']
  (defun construct-inf1a-exception (dhaatu class pada upasargas)
  CALLS: ['fol-msg', 'format', 'ans', '(equal', 't', '(and']
  (defun construct-potpart1a (dhaatu class pada &optional upasargas)
  CALLS: ['ans', 'construct-potpart1a-irregular', 'if', 'construct-potpart1a-tavya', 'construct-potpart1a-aniiya', 'construct-potpart1a-yat', 'construct-potpart1a-kyap', 'construct-potpart1a-Nyat']
  (defun construct-potpart1a-irregular (dhaatu &optional class pada)
  CALLS: ['(equal', 'vadhya', 'vashya', 'MB', 'sahya', 'Kale']
  (defun construct-potpart1a-tavya (dhaatu class pada upasargas)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'seT', '(equal', 'construct-conjbase1a', 'mapcar', 'lambda', 'b', '(member', 'aa', 'vconcat', 'potpart-join1', 'gunate-final-vowel', 'flatten', 'when']
  (defun construct-potpart1a-tavya-exception (dhaatu class pada upasargas)
  CALLS: ['ans', '(equal', 'bodhitavya', 'bharShTavya', 'guuhitavya']
  (defun construct-potpart1a-aniiya (dhaatu class pada upasargas)
  CALLS: ['ans', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', '(equal', 'construct-conjbase1a', 'mapcar', 'lambda', 'b', '(member', 'aa', 'vconcat', 'potpart-join1', '(vowel-P', 'gunate-final-vowel', 'flatten', 'when']
  (defun construct-potpart1a-aniiya-exception (dhaatu class pada upasargas)
  CALLS: ['ans', '(equal', 'bharjaniiya']
  (defun potpart-join1 (base ending &optional dhaatu)
  CALLS: ['kta-join1']
  (defun construct-potpart1a-yat (dhaatu class pada upasargas)
  CALLS: ['ending', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', 'seT', '(member', 'aa', 'vconcat', 'potpart-join1', '(vowel-P', 'gunate-final-vowel', 'a', '(and', 'labial-P', 'fol-msg', 'format', 'tak', 'gad', '(equal', 'upa', 'mapcar', 'flatten', 'when']
  (defun construct-potpart1a-yat-exception (dhaatu class pada upasargas)
  CALLS: ['ans', 't', '(equal']
  (defun construct-potpart1a-kyap (dhaatu class pada upasargas)
  CALLS: ['ending', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', '(and', 'kRip', 'vconcat', '(member', 'i', 'vowel-P', 'shaMs', '(equal', 'b', 'bhid', 'puSh', 'puu', 'vi', 'mapcar', 'flatten', 'when']
  (defun construct-potpart1a-Nyat (dhaatu class pada upasargas)
  CALLS: ['ending', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', '<', 'elt', 'substring', '(equal', 'vconcat', 'gunate-final-vowel', '(member', 'u', 'conjugation-join', '(consonant-P', '(and', 'pra', 'yaj', 'mapcar', 'flatten', 'when']
  (defun construct-potpart1a-exception (dhaatu class pada upasargas)
  CALLS: ['ans', 't', '(and']
Mbh.el 22 1
  (defvar Mbh-dir "SL/Ramopakhyana")
  (defun Mbh-buf (filename)
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun Mbh-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun Mbhu-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun construct-Mbhu (&optional bufin)
  CALLS: ['regexp', 'if', 'Mbh-buffer', 'Mbhu-buffer', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'read-buffer-fields', '1+', 'length', '(not', 'elt', '(string-match', '(<', 'fol-msg', 'format', 's', 'current-line', 'insert', 'forward-line', '<', 'point', 'point-max', 'save-buffer']
  (defun Mbhu-lexid-distrib ()
  CALLS: ['bufin', 'Mbh-buf', 'with-current-buffer', 'erase-buffer', 'Mbhu-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'read-buffer-fields', 's', 'elt', 'intern', 'plist-get', 'if', '1+', 'plist-put', 'forward-line', 'x', 'insert', 'format', 'save-buffer']
  (defun Mbhu-validate1 (lexreg)
  CALLS: ['bufin', 'Mbh-buf', 'with-current-buffer', 'erase-buffer', 'Mbhu-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'read-buffer-fields', '1+', 'lex', 'elt', 'when', 'string-match', 'message', 'format', 'if', 'Mbhu-validate1-help', 'fol-msg', 'forward-line', 'nline']
  (defun Mbhu-validate1-help (inflected analysis-in base lex)
  CALLS: ['ans', 'Mbhu-alternates-list', 'Sx1', 'when', 'fol-msg', 'format', 'lambda', 'e', 'Mbhu-validate1-help-1a', 'cons']
  (defun Mbhu-alternates-list (s)
  CALLS: ['ans', 'when', 'string-match', './\\\\', 'match-beginning', '1+', 'match-end', 'fol-msg', 'format', 'substring', 'while', '<', 'elt', 'concat', 'char-to-string', 'cons', '+', 'if', 'nreverse']
  (defun Mbhu-validate1-help-1a (analysis lex base e)
  CALLS: ['ans', 'janamejaya', 'S', 'gam', 'V', 'symbol-name', 'elt', '(member', '?m', 'when', 'gender', 'vocative', 'aset', 'format', 'downcase', 'fol-msg', '(and', '(not', 'substring', '?i', '', '?1', 'ERR']
  (defun Mbhu-validate2 (altlex &optional dbg)
  CALLS: ['bufin', 'Mbh-buf', 'with-current-buffer', 'erase-buffer', 'Mbhu-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'read-buffer-fields', '1+', 'lex', 'elt', 'Mbhu-convert-lex', 'when', 'message', 'format', 'if', 'Mbhu-validate2-help', 'fol-msg', 'forward-line', 'nline']
  (defun Mbhu-validate2-help (inflected-in analysis-in base-in lex-in &optional alex dbg)
  CALLS: ['ans', 'fol-msg', 'format', '(equal', 'Mbhu-validate2-V-0', 'Mbhu-validate2-I-0', 't', 'Mbhu-validate2-S-0', 'defun', 'inflected-in', 'person-number-voice', 'x', 'read-string-fields', 'intern', 'elt', 'if', 'mapcar', 'upa-forms', 'SL-upasarga-forms', 'while', 'when', 'cons', 'class', 'Mbhu-extract-V-lex', 'Mbhu-complete-classes', 'char-to-string', 'person', 'number', '%s', 'a', 'b', 'c', 'cp', '(and', 'SL-tense-tran', 'translate-SLP1-ITRANS', 'construct-conjtab1a', 'solution', 'mapcar-LE', 'ibase', 'Mbhu-validate2-V-2']
  (defun SL-tense-tran (SL-tense)
  CALLS: ['x', 'if', 'stringp', 'upcase', 'while', 'a', 'when', 'symbol-name', '"aor"', 'lu~N1', 'fol-msg', 'format']
  (defun Mbhu-validate2-V-2 (inflected tab SL-p SL-n)
  CALLS: ['ans', 'fol-msg', 'format', 'Mbhu-validate2-match', 'string-to-number', 'intern', 'upcase', 'while', 'i', 'elt']
  (defun Mbhu-validate2-I-0 (inflected-in analysis-in subanta-in lex-in)
  CALLS: ['defun', 'inflected-in', 'ans', '(equal', 'intern', 'Mbhu-convert-lex', 'Mbhu-validate2-S-1', 'length', '(and', '<=', 'substring', 'concat', 'when', 'fol-msg', 'format', 'Mbhu-validate2-S-2', 'elt', '%s', 'Mbhu-validate2-S-compare', 'Mbhu-validate2-S-0', 'adj']
  (defun Mbhu-validate2-S-1 (SL-subanta lex)
  CALLS: ['ans', '(equal', 'form', 'SL-construct-subanta1', 'cadr', 'append', 'symbol-name', 'when', 'substring', 'intern', 'concat', 'sname', '(and', '<=', 'length', '(member', 'kowi', '(or', 'paYca', 'if', 'Mbhu-validate2-S-1', 'fol-msg', 'format', 't']
  (defun Mbhu-validate2-S-2 (inflected val)
  CALLS: ['ans', 'while', 'Mbhu-validate2-match', 'i', 'elt', 'if', 'format', 'downcase', 'intern', 'cons']
  (defun Mbhu-validate2-match (inflected tab)
  CALLS: ['n', 'length', 'while', '<', 'elt', 'if', 'cons', '1+']
  (defun Mbhu-convert-lex (lex-in)
  CALLS: ['bufin', 'Mbh-buf', 'format', 'fol-msg', 'with-current-buffer', 'goto-char', 'when', 'search-forward', 'current-line', 'p1', 'buffer-substring', 'match-beginning', 'match-end', 'point', 'end-of-line', 'elt', '(equal', 'substring']
  (defun Mbhu-validate2-S-compare (analysis-in analyses)
  CALLS: ['ain', 'Mbhu-alternates-list', 'if', 'intern']
  (defun Mbhu-extract-V-lex (lex-in)
  CALLS: ['bufin', 'Mbh-buf', 'format', 'fol-msg', 'with-current-buffer', 'goto-char', 'when', 'search-forward', 'current-line', 'p1', 'buffer-substring', 'match-beginning', 'match-end', 'point', 'end-of-line', 'while', '<', 'read', 'current-buffer', '(equal', 'exceptional', 'cons', 'nreverse', 'normalize-class-padas']
  (defun Mbhu-complete-classes (cps-in)
  CALLS: ['ans', 'while', 'elt', 'if', 'when', 'cons', 'nreverse']
  (defun Mbh-verse (num &optional opt)
  CALLS: ['ans', 'format', 'with-current-buffer', 'Mbhu-buffer', 'goto-char', 'while', 'search-forward-regexp', 'beginning-of-line', 'read-buffer-fields', 'cons', 'elt', 'end-of-line', 'nreverse', 'when', '(not', '(equal', 'mapconcat']
monier-070106.el 13 0
  (defun buf-char-examine (buftot2)
  CALLS: ['', 'SLtot2-buffer', 'with-current-buffer', 'make-vector', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', 'aset', '1+', 'aref', 'forward-char', '<', 'point', 'point-max', 'c', 'when', '+', 'fol-msg', 'format']
  (defun monier-filename (filename)
  CALLS: ['sangram-filename']
  (defun MONIER-literal ()
  CALLS: ['find-file-literally', 'sangram-filename']
  (defun MONIER0-literal ()
  CALLS: ['find-file-literally', 'monier-filename']
  (defun regexp-distrib (bufin REGEXP-gen &optional isub nmax)
  CALLS: ['ncount', 'when', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'point', 'match-beginning', 'match-end', 'buffer-substring', 'intern', 'plist-get', 'if', 'plist-put', '<', 'numberp', '<=', 'p1', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr']
  (defun regexp-dump (bufin REGEXP-gen &optional prev-line)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'current-line', 'beginning-of-line', 'forward-line', '<', 'point']
  (defun subregexp-distrib (bufin REGEXP-gen REGEXP-sub &optional isub jsub)
  CALLS: ['ncount', 'when', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', 'point', 'match-beginning', 'match-end', 'buffer-substring', '1+', 'mod', 'message', 'c1', 'intern', 'plist-get', 'if', 'plist-put', '<', 'numberp', '<=', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr']
  (defun MONIER-check-1a ()
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'c1', 'buffer-substring', 'match-beginning', 'match-end', 'substring', 'string-to-number', 'if', '<', 'point']
  (defun unused-MONIER-check-1b ()
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'c1', 'beginning-of-line', 'point', 'end-of-line', 'buffer-substring', 'match-beginning', 'match-end', 'substring', 'string-to-number', 'if', '<']
  (defun MONIER0-ALL-make ()
  CALLS: ['bufout', 'find-file-noselect', 'monier-filename', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'goto-char', 'kill-line', 'fol-msg', 'format', 'mystring-replace', '', 'regexp-replace', 'H2>\\\\', 'save-buffer', 'kill-buffer']
  (defun MONIER0-txt-make ()
  CALLS: ['MONIER0-txt-make-helper']
  (defun MONIER0-txt-make-helper (d)
  CALLS: ['message', 'format', 'bufout', 'find-file-noselect', 'monier-filename', 'when', '=', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'carriage', 'mystring-replace', 'fol-msg', '<', 'save-buffer', 'kill-buffer']
  (defun MONIER0a-txt-make ()
  CALLS: ['find-file-noselect', 'monier-filename', 'with-current-buffer', 'goto-char', 'search-forward-regexp', '#{I}<168><139><175>Vet.<133>i<133>,<133>19/20<155><168>;<168>#{ikA}', 'replace-match', 'do']
monier.el 19 0
  (defun buf-char-examine (buftot2)
  CALLS: ['', 'SLtot2-buffer', 'with-current-buffer', 'make-vector', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', 'aset', '1+', 'aref', 'forward-char', '<', 'point', 'point-max', 'c', 'when', '+', 'fol-msg', 'format']
  (defun monier-filename (filename &optional dir)
  CALLS: ['if', 'format', 'sangram-filename']
  (defun MONIER-literal (&optional filename)
  CALLS: ['if', 'find-file-literally', 'sangram-filename']
  (defun MONIER0-literal ()
  CALLS: ['find-file-literally', 'monier-filename']
  (defun regexp-distrib (bufin REGEXP-gen &optional isub nmax)
  CALLS: ['ncount', 'when', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'point', 'match-beginning', 'match-end', 'buffer-substring', 'intern', 'plist-get', 'if', 'plist-put', '<', 'numberp', '<=', 'p1', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr']
  (defun regexp-dump (bufin REGEXP-gen &optional prev-line)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'current-line', 'beginning-of-line', 'forward-line', '<', 'point']
  (defun subregexp-distrib (bufin REGEXP-gen REGEXP-sub &optional isub jsub)
  CALLS: ['ncount', 'when', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', 'point', 'match-beginning', 'match-end', 'buffer-substring', '1+', 'mod', 'message', 'c1', 'intern', 'plist-get', 'if', 'plist-put', '<', 'numberp', '<=', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr']
  (defun MONIER-check-1a ()
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'c1', 'buffer-substring', 'match-beginning', 'match-end', 'substring', 'string-to-number', 'if', '<', 'point']
  (defun unused-MONIER-check-1b ()
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'c1', 'beginning-of-line', 'point', 'end-of-line', 'buffer-substring', 'match-beginning', 'match-end', 'substring', 'string-to-number', 'if', '<']
  (defun old-MONIER0-ALL-make ()
  CALLS: ['bufout', 'find-file-noselect', 'monier-filename', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'goto-char', 'kill-line', 'fol-msg', 'format', 'mystring-replace', '', 'regexp-replace', 'H2>\\\\', 'save-buffer', 'kill-buffer']
  (defun MONIER-txt-make (suffix)
  CALLS: ['MONIER-txt-make-helper']
  (defun MONIER-txt-make-helper (suffix d)
  CALLS: ['message', 'format', 'bufout', 'find-file-noselect', 'monier-filename', 'when', '=', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'carriage', 'mystring-replace', 'fol-msg', '<', 'save-buffer', 'kill-buffer']
  (defun old-MONIER0a-make (filesfx)
  CALLS: ['namein', 'format', 'find-file-noselect', 'monier-filename', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 's', 'current-line', 'forward-line', 'if', 'string=', 'cons', 'fol-msg', 'kill-buffer', 'nreverse', 'delete-region', 'point-min', 'insert-file-literally', 'chg', '1+', 'elt', 'monier-txt2all-string', 'search-forward-regexp', 'replace-match', 'save-buffer', 'when', '#{I}<168><139><175>Vet.<133>i<133>,<133>19/20<155><168>;<168>#{ikA}', 'do']
  (defun monier-txt2all-string (s)
  CALLS: ['snew', '[0-9]+\\\\', 'insert', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'string-to-number', 'when', '<', 'format', 'replace-match', 'current-line']
  (defun MONIERa-txt-make (&optional sfx1 sfx2)
  CALLS: ['if', 'MONIERa-txt-make-helper']
  (defun MONIERa-txt-make-helper (sfx1 sfx2 d)
  CALLS: ['message', 'format', 'bufout', 'find-file-noselect', 'monier-filename', 'when', '=', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'goto-char', 'kill-line', 'fol-msg', 'mystring-replace', 'regexp-replace', 'H2>\\\\', 'MONIERa-txt-make-helper8', 'save-buffer', 'kill-buffer']
  (defun MONIERa-txt-make-helper8 (changename)
  CALLS: ['bufout', 'current-buffer', 'find-file-noselect', 'monier-filename', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 's', 'current-line', 'forward-line', 'if', 'string=', 'cons', 'fol-msg', 'format', 'kill-buffer', 'nreverse', 'chg', '1+', 'elt', 'monier-txt2all-string', 'search-forward-regexp', 'replace-match', 'when', 'save-buffer']
  (defun MONIER-ALL-make (suffix)
  CALLS: ['MONIER-ALL-make-helper']
  (defun MONIER-ALL-make-helper (suffix d)
  CALLS: ['message', 'format', 'bufout', 'find-file-noselect', 'monier-filename', 'when', '=', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'insert-file-literally', 'carriage', 'mystring-replace', 'fol-msg', '<', 'save-buffer', 'kill-buffer']
mw.el 204 8
  (defvar MW-orig-mwindx nil)
  (defvar MW-orig-mwtot2 nil)
  (defvar MW-dir nil)
  (defvar MW-mwindx nil)
  (defvar MW-mwtot2 nil)
  (defvar SL-mwtot2 nil)
  (defvar SL-mwtot3 nil)
  (defvar SL-mwindx nil)
  (defun MW-doc1 ()
  CALLS: []
  (defun MW-init ()
  CALLS: ['MW-orig-init']
  (defun MW-orig-init ()
  CALLS: []
  (defun rawindx-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun rawtot2-buffer ()
  CALLS: ['find-file-noselect', 'find-file-literally', 'sangram-filename']
  (defun SLtot2-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun SLtot3-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun MW-buffer ()
  CALLS: ['02-22-05', 'find-file-noselect', 'sangram-filename']
  (defun MW-keys-buffer ()
  CALLS: ['keytab', 'find-file-noselect', 'sangram-filename']
  (defun SLindx3-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun SLtest3-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun MW-simplerIndex-explore ()
  CALLS: ['HKMW-init', 'intab', 'rawindx-buffer', 'with-current-buffer', 'fol-msg', 'format', 'point-max', 'goto-char', 'nlines', 'while', 'when', 'mod', 'message', '1+', 'point', 'end-of-line', 'buffer-substring', 'any-parse-word-string', 'elt', 'i', 'length', '<', '(equal', 'if', 'forward-line']
  (defun MW-simplerIndex-construct ()
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'rawindx-buffer', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'fol-msg', 'format', 'point-max', 'goto-char', 'nlines', 'while', 'when', 'mod', 'message', '1+', 'point', 'end-of-line', 'buffer-substring', 'forward-line', 'any-parse-word-string', 'elt', 'i', 'length', '<', '(equal', 'if', 'key', 'sym-without-space', 'insert', 'save-buffer', 'kill-buffer']
  (defun mwtot2-data (mwindx-offset)
  CALLS: ['with-current-buffer', 'c1', '1+', 'goto-char', 'end-of-line', 'buffer-substring', 'point']
  (defun MWindx-test1 (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward', '1+', 'current-line', 'when', 'forward-line', 'coffset', 'read', 'fol-msg', 'format']
  (defun MWtot2-test1 (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward', '1+', 'current-line', 'when', 'forward-line', 'fol-msg', 'format']
  (defun MWtot2-test1r (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'format', 'current-line', 'forward-line', 'fol-msg', '<', 'point', 'point-max', 'p1', 'match-beginning', 'match-end', 'buffer-substring']
  (defun current-line ()
  CALLS: ['p1', 'point', 'beginning-of-line', 'end-of-line', 'buffer-substring', 'goto-char']
  (defun buf-char-examine (buftot2)
  CALLS: ['', 'SLtot2-buffer', 'with-current-buffer', 'make-vector', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', 'aset', '1+', 'aref', 'forward-char', '<', 'point', 'point-max', 'c', 'when', '+', 'fol-msg', 'format']
  (defun MWtot2-char-examine ()
  CALLS: ['buftot2', 'if', 'SLtot2-buffer', 'with-temp-buffer', 'make-vector', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', 'aset', '1+', 'aref', 'forward-char', '<', 'point', 'point-max', 'c', 'when', '+', 'fol-msg', 'format']
  (defun construct-SLmwtot2 ()
  CALLS: ['spurious', 'unidentified', "'circled", 'bufout', '13', '(241', '243', 'mapcar', 'apply', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', '(member', 'delete-char', 'insert-char', 'plist-get', 'forward-char', '<', 'point', 'point-max', 'save-buffer', 'kill-buffer']
  (defun MW-group-pairs (&optional itype)
  CALLS: ['(not', '"', 'concat', 'char-to-string', '(equal']
  (defun modify-SLmwtot2-1a (&optional tabout bufin)
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'if', 'SLtot2-buffer', '', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', 'MW-group-pairs', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'check-string-grouping', 'elt', 'fol-msg', '1+', 'count-lines', 'point-min', 'insert', 'forward-line', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1a-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun modify-SLmwtot2-1b (&optional tabout)
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', '%{[^}]*}\\\\', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'string-match', 'insert', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'substring', 'any-parse-word-string', 'elt', 'replace-match', 'point-min', 'point-max', '1+', 'forward-line', '<', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1b-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun modify-SLmwtot2-1c  (&optional tabout)
  CALLS: ['bufout', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', 'goto-line', 'while', 'when', 'mod', 'message', 'format', 'char-after', 'string-match', 'char-to-string', '1+', 'current-line', 'length', 'insert', 'forward-line', '+', '<', 'point', 'point-max', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1c-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun modify-SLmwtot2-1d  (&optional tabout)
  CALLS: ['bufout', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', 'goto-line', 'while', 'when', 'mod', 'message', 'format', 'end-of-line', 'char-before', 'beginning-of-line', '1+', 'current-line', 'insert', 'forward-line', '+', '<', 'point', 'point-max', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1d-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun modify-SLmwtot2-1e (&optional tabout)
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', '"', 'concat', 'char-to-string', 'forward-line', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'check-string-grouping', 'elt', 'fol-msg', 'group-bounds', 'insert', 'search-forward-regexp', 'match-end', '<=', 'temporarily', 'namely,', 'replace-match', 'point-min', 'point-max', '1+', '+', '<', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1e-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun modify-SLmwtot2-misc ()
  CALLS: ['SLmwtot2-process-changes']
  (defun SLmwtot2-process-changes (taberr &optional bufin)
  CALLS: ['nerr', 'find-file-noselect', 'sangram-filename', 'if', 'SLtot2-buffer', 'with-current-buffer', 'sym1', 'goto-char', 'point-min', 'point-max', 'while', 'when', '=', 'mod', 'message', 'format', '1+', 'read', 'current-buffer', 'eval', 'forward-line', 'current-line', '-', 'goto-line', 'beginning-of-line', 'point', 'end-of-line', 'delete-region', 'insert', 'fol-msg', '<', 'save-buffer', 'kill-buffer']
  (defun construct-SLmwtot3 ()
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'SLtot3-buffer', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'sangram-filename', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', 'while', 'when', 'mod', 'message', 'format', '1+', 'fol-msg', 'point', 'end-of-line', 'buffer-substring', 'string-match', 'any-parse-word-string', 'elt', 'mapconcat', 'delete-region', 'insert', 'count-lines', 'point-min', 'forward-line', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'replace-match', 'current-line', 'if', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun regexp-distrib (bufin REGEXP-gen &optional isub nmax)
  CALLS: ['ncount', 'when', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'point', 'match-beginning', 'match-end', 'buffer-substring', 'intern', 'plist-get', 'if', 'plist-put', '<', 'numberp', '<=', 'p1', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr']
  (defun regexp-dump (bufin REGEXP-gen &optional unused)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'current-line', 'beginning-of-line', 'forward-line', '<', 'point']
  (defun field-distrib (bufin ifield &optional sep)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'if', 'while', 'read-buffer-fields', 'when', '<', 'length', 'elt', '1+', 'mod', 'message', 'c1', 'intern', 'plist-get', 'plist-put', 'forward-line', 'point', 'ans1', 'cons', 'sort', 'lambda', 'x', 'cadr', 'defun', 'bufin', '...\\\\', 'old', 'new', 'insert', 'search-forward-regexp', 'replace-match', 'buffer-substring', 'point-min', 'match-beginning', 'match-end', 'functionp', 'funcall', 'numberp', '<=', 'save-buffer']
  (defun mystring-replace (bufin thestring newstring &optional save-flag verbose)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward', '1+', 'when', 'mod', 'message', 'replace-match', '<', 'point', 'save-buffer', 'if']
  (defun regexp-display (bufin REGEXP-gen)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'point', 'forward-line', 'current-line', '<', 'p1', 'match-beginning', 'match-end', 'buffer-substring']
  (defun regexp-display-key (bufin REGEXP-gen)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'current-line', 'beginning-of-line', 'point', 'end-of-line', '.*\\\\', 'buffer-substring', 'match-beginning', 'match-end', '<', 'p1']
  (defun regexp-display0 (bufin REGEXP-gen)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'current-line', 'end-of-line', '<', 'point']
  (defun regexp-lines (bufin REGEXP-gen)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'mod', 'message', 'current-line', 'cons', 'forward-line', '<', 'point', 'nreverse']
  (defun regexp-kill-lines (bufin REGEXP-gen &optional bufout)
  CALLS: ['ncount', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'when', 'while', 'search-forward-regexp', '1+', 'beginning-of-line', 's', 'current-line', 'insert', 'kill-line']
  (defun modify-SLmwtot3-1a ()
  CALLS: ['regexp-distrib', 'SLtot3-buffer']
  (defun modify-SLmwtot3-1a-process ()
  CALLS: ['regexp-replace', 'SLtot3-buffer', "[']\\\\"]
  (defun modify-SLmwtot3-1b ()
  CALLS: ['regexp-distrib', 'SLtot3-buffer']
  (defun modify-SLmwtot3-1b-process ()
  CALLS: ['regexp-replace', 'SLtot3-buffer', '[^']
  (defun modify-SLmwtot3-1c (&optional bufin)
  CALLS: ['nchg', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '[-a-zA-Z]*@[-a-zA-Z]*\\\\', '1+', 'buffer-substring', 'match-beginning', 'match-end', 'format', 'replace-match', 'end-of-line', 'insert', 'fol-msg', 'current-line']
  (defun modify-SLmwtot3-2 (&optional tabout)
  CALLS: ['MW-init', 'indir', 'SLtot3-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', 'while', 'when', 'mod', '1-', 'message', 'format', 'point', 'end-of-line', 'forward-line', 'string-to-number', 'char-to-string', 'char-after', 'search-forward', '<', 'insert', 'delete-char', '+', 'point-max', '-', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun SLtot3-lexical-find (lexcode)
  CALLS: ['bufin', 'SLtot3-buffer', '(equal', '[^}]*\\\\', 'concat', '%{"', '[mfn]\\\\(([^', 'fol-msg', 'format', 'when', 'regexp-distrib']
  (defun modify-SLmwtot3-3a ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer', '%{A}', '%{I}', '%{ikA}', '%{i}', '%{iRI}', '%{antI}', '%{GnI}', '%{trI}', '%{arI}', '%{atI}', '%{varI}', '%{vI}', '%{mnI}', '%{U}', '%{a}', '%{u}', '%{ntI}', '%{padI}', '%{AcI}', '%{akA}', '%{DnI}', '%{-trI}', '%{jYI}', '%{-qvI}', '%{uzI}', '%{zRI}', '%{nI}', '%{rI}', '%{ticI}', '%{GnuzI}', '%{IkA}', '%{-padI}', '%{enI}', '%{-varI}', '%{IcI}', '%{inI}', '%{-GnI}', 'nom.', '%{tI}', '%{is}', '%{sOrI}', '%{-mRI}', '%{-TI}', 'Ved.', '%{-rU}', '%{A}.', '%{-mnI}', '%{f}', '%{zRi}', '%{adI}', '%{saDrIcI}', '=', '%{satI}', '%{-tIcI}', '%{-ryuzI}', '%{SyenI}', '%{SAly-UhI}', '%{SaSvatI}', '%{gayI}', '%{t}', '%{-drIcI}', '%{-zUcI}', '%{viSvOhI}', '%{ar}', '%{-tikA}', '%{anti}', '%{yUnI}', '%{uzi}', '%{Gni}', '%{mni}', '%{mahizI}', '%{DUcI}', '%{BArOhI}', '%{tinI}', '%{minI}', '%{pUrvI}', '%{pipyuhI}', '%{RI}', '%{A}!', '%{pA}', '%{nIci}', '%{ny-ak}', '%{AtI}', '%{hnI}', 'acc.', 'pl.', '%{As}', '%{-TuzI}', '%{us}', 'ad', '%{I}.', '%{jYuzi}', '%{gmuzi}', '%{gmuzI}', '%{-kzuzI}', '%{-tuzI}', '%{gAnDarvI-}', '%{gocI}', '%{KarvikA}', '%{kadrIcI}', '%{jvI}', '%{SIrzRI}', '%{AvI}', '%{tnI}', '%{-stI}', '%{-ScuzI}', '%{-Scat}', '%{a-satI}', '%{a-SiSvi}', 'dat.', '%{vars}', '%{-rzRI}', '%{patnI}', '%{aruzi}', '%{yuzI}', 'nom.%{-pA}', 'du.', 'instr.', '%{vatI}', '%{sI}', 'gen.', '%{apyA}', '%{-enI}', '%{vati}', '%{ari}', '%{a-jaGnuzI}', '%{ati}']
  (defun modify-SLmwtot3-3b ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer']
  (defun modify-SLmwtot3-3c ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer']
  (defun modify-SLmwtot3-3d ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer', 'mfn.']
  (defun modify-SLmwtot3-3e ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer']
  (defun modify-SLmwtot3-4a (&optional bufin)
  CALLS: ['MW-init', 's', 'if', 'SLtot3-buffer', 'nlines', 'MW-group-pairs', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'check-buffer-grouping', 'elt', 'fol-msg', 'pairs', 'search-forward-regexp', 'match-beginning', 'match-end', '<=', 'replace-match', '1+', 'forward-line', '<', 'point-max']
  (defun construct-SLmwtot3-all ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'construct-SLmwtot3', 'modify-SLmwtot3-1a-process', 'modify-SLmwtot3-1b-process', 'modify-SLmwtot3-1c', 'modify-SLmwtot3-2', 'modify-SLmwtot3-3a', 'modify-SLmwtot3-3b', 'modify-SLmwtot3-3c', 'modify-SLmwtot3-3d', 'modify-SLmwtot3-3e', 'modify-SLmwtot3-4a', 'SLtot3-buffer', 'modify-SLmwtot3-4b1', 'modify-SLmwtot3-4b', 'modify-SLmwtot3-4b-revert-V', 'modify-SLmwtot3-4c1', 'modify-SLmwtot3-5a', 'modify-SLmwtot3-5a1', 'modify-SLmwtot3-5a2', 'modify-SLmwtot3-5a3', 'modify-SLmwtot3-5a4', 'modify-SLmwtot3-5a4-finish', 'modify-SLmwtot3-6b3-finish', 'modify-SLmwtot3-6b5-finish']
  (defun modify-SLmwtot3-4b1 ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer', 'regexp-replace']
  (defun MW-gather-clauses (c1 c2 &optional clause-regexp)
  CALLS: ['p1', 'if', 'goto-char', 're-search-forward', 'while', 'match-beginning', 'cons', 'match-end', 'nreverse']
  (defun modify-SLmwtot3-4b (&optional bufin)
  CALLS: ['MW-init', '', 'if', 'SLtot3-buffer', 'nlines', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'MW-gather-clauses', 'clause', 'cadr', 'search-forward-regexp', '1+', 'replace-match', 'forward-line', '<', 'point-max', 'fol-msg']
  (defun modify-SLmwtot3-4b-analyze (&optional bufin)
  CALLS: ['MW-init', 'ans', 'if', 'SLtot3-buffer', 'nlines', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'MW-gather-clauses', 'clause', 'cadr', 'search-forward-regexp', 'thisans', '1+', '.\\\\', 'match-beginning', 'match-end', 'append', 'cons', 'sort', 'intern', 'apply', 'plist-get', 'plist-put', 'forward-line', '<', 'point-max', 'fol-msg', 'x']
  (defun modify-SLmwtot3-4b-revert-V (&optional bufin)
  CALLS: ['MW-init', 'ans', 'if', 'SLtot3-buffer', 'nlines', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'forward-line', '1+', 'buffer-substring', 'MW-gather-clauses', 'clause', 'cadr', 'search-forward-regexp', 'thisans', '.\\\\', 'match-beginning', 'match-end', 'fol-msg', 'replace-match', '<', 'point-max']
  (defun modify-SLmwtot3-4c (&optional bufin)
  CALLS: ['MW-init', '', 'if', 'SLtot3-buffer', 'nlines', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'MW-gather-clauses', 'clause', 'cadr', 'search-forward-regexp', 'l1', 'match-beginning', 'my-forward-sexp', 'elt', 'fol-msg', '1+', 'replace-match', 'forward-line', '<', 'point-max']
  (defun modify-SLmwtot3-4c1 ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer']
  (defun modify-SLmwtot3-5a (&optional bufin)
  CALLS: ['MW-init', '', 'if', 'SLtot3-buffer', 'nlines', 'make-regexp', 'with-current-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'MW-gather-clauses', '<', 'length', 'clause', 'cadr', 'fol-msg', 'buffer-substring', 'search-forward-regexp', 'delete-char', 'insert', '1+', 'forward-line', '+', 'point-max']
  (defun modify-SLmwtot3-5a1 ()
  CALLS: ['MW-init', 'with-current-buffer', 'SLtot3-buffer', 'while', 'search-forward-regexp', 'fol-msg', 'format', 'current-line', 'forward-line', 'replace-match']
  (defun modify-SLmwtot3-5a2 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer']
  (defun modify-SLmwtot3-5a3 ()
  CALLS: ['MW-init', 'mystring-replace', 'SLtot3-buffer']
  (defun modify-SLmwtot3-5a4 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer']
  (defun modify-SLmwtot3-5a4-finish ()
  CALLS: ['modify-SLmwtot3-5a5a', 'modify-SLmwtot3-5a5b', 'modify-SLmwtot3-5a5', 'modify-SLmwtot3-5a6', 'modify-SLmwtot3-6a1', 'modify-SLmwtot3-6a2', 'modify-SLmwtot3-6b1', 'modify-SLmwtot3-6b2', 'modify-SLmwtot3-6b3', 'modify-SLmwtot3-6b4']
  (defun modify-SLmwtot3-6b3-finish ()
  CALLS: ['modify-SLmwtot3-6b4', 'modify-SLmwtot3-6b5']
  (defun modify-SLmwtot3-6b5-finish ()
  CALLS: ['modify-SLmwtot3-6c1', 'modify-SLmwtot3-6c2', 'modify-SLmwtot3-6c3']
  (defun modify-SLmwtot3-6c3-finish ()
  CALLS: ['modify-SLmwtot3-6c4', 'modify-SLmwtot3-6c5', 'modify-SLmwtot3-6c5-finish']
  (defun modify-SLmwtot3-6c5-finish ()
  CALLS: ['modify-SLmwtot3-6d1', 'modify-SLmwtot3-6d1-finish']
  (defun modify-SLmwtot3-6d1-finish ()
  CALLS: ['modify-SLmwtot3-6d2', 'modify-SLmwtot3-6d3', 'modify-SLmwtot3-6d4', 'modify-SLmwtot3-6d5', 'modify-SLmwtot3-6d5a', 'modify-SLmwtot3-6e1', 'modify-SLmwtot3-6e2', 'modify-SLmwtot3-7a1', 'modify-SLmwtot3-7a2', 'modify-SLmwtot3-7a3', 'modify-SLmwtot3-6d2-finish']
  (defun modify-SLmwtot3-5a5a ()
  CALLS: ['modify-SLmwtot3-1c']
  (defun modify-SLmwtot3-5a5b ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer']
  (defun modify-SLmwtot3-5a5 ( &optional bufin)
  CALLS: ['MW-init', 'construct-MW-inputs-1b', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'if', '.\\\\', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'beginning-of-line', '(hruq', 'V', '<MW=', 'read-colon-line-fields', 'current-line', 'solution', 'vform', 'plist-get', 'elt', '1', 'append', 'plist-put', 'forward-line', '<', 'point', 'point-max', 'fol-msg', 'format', '/', 'length', 'when', 'mod', 'message', 'end-of-line', 'search-forward', '+', 'progn', 'backward-char', 'buffer-substring', 'without', '1+', 'search-forward-regexp', '[', '<LEX=V', 'root', 'match-beginning', 'match-end', '1-', 'intern', 'some-pfx-sandhi-at-hyphens', '%{A-i}', '', '2.', '[0-9.', '[^}]*\\\\', 'substring', 'gen-word-list', 'SL-find-root-pfx', 'concat', 'mapconcat', '%s', '(member', 'A', 'forms', '#', '#1', 'delete', 'lexinfo', 'fields', '(1', 't', 'forward-char', 'insert', 'flatten']
  (defun modify-SLmwtot3-5a6 ()
  CALLS: ['modify-SLmwtot3-5a']
  (defun modify-SLmwtot3-6a1 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer']
  (defun modify-SLmwtot3-6a2 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-5a']
  (defun modify-SLmwtot3-6b1 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-5a']
  (defun modify-SLmwtot3-6b2 ()
  CALLS: ['regexp-replace', 'SLtot3-buffer', "'\\\\"]
  (defun modify-SLmwtot3-6b3 ()
  CALLS: ['modify-SLmwtot3-mfn', '%{A}', '%{I}', '.*%{vI}.*', '%{us}', 'regexp-replace', 'SLtot3-buffer', 'am', '%{am}', '%{am}[.]', '%{-kam}', '%{u}', '%{a}', '%{i}', '\\\\?', '?', 'prob.', 'L.', 'prefixes', 'MBh.', 'only', 'R.', 'Cat.', 'BhP.', 'Katha1s.', 'Hariv.', 'MW.', 'lambda', 'pfx', 'regexp', 'format', 'fol-msg', '3', 'a4ram2-', 'for', 'Pa1n2.', 'Un2.', 'Gi1t.', 'MaitrS.', 'Su1ryas.', 'Var.', 'Ka1ran2d2.', 'Sus3r.', 'Mr2icch.', 'Va1sav.', 'Naish.', 'A1past.', 'Col.', 'Pan5c.', 'Ka1vya7d.', 'Ragh.', 'Vas.', 'sg.', 'S3arn3gS.', 'Npr.', 'Ma1lav', 'Vop.', 'AV.', 'TPra1t.', 'Ka1v.', 'Megh.', 'Gol.', 'TBr.', 'Kir.', 'Ratna7v.', 'Ka1t2h.', 'm.c.', 'Mudr.', 'Sa1mavBr.', 'Chandom.', 'Ra1jat.', 'A1pS3r.', 'W.', 'Pan5cad.', 'm.', 'Saddhp.', 'ib.', 'Gal.', 'HParis3.', 'VP.', 'Ba1lar.', 'Ma1rkP.', 'Sa1h.', 'Car.', 'VarBr2S.', '!', '%{t}', '%{Us}', '%{is}', '4', 'cf.', 'a4-yuddha-', 'a4risht2a-', '2', '<ERR=SL:a.R>', '7', 'TA1r.', 'RV.', 'S3Br.', '<ERR=SL:-Na14>', 'G', '1', 'Ka1ni.', 'l', 'Na1r.', 'fr.', 'Das3.', 'Subh.', 'L', 'S3a1n3khGr2', 'Mn.', 'Sam2k.', 'Ka1tyS3r.', 'Kat2hUp.', '142', 'Ma1nGr2S3r.', 'Ta1n2d2Br.', 'pa14#jas', 'ChUp.', 'Ya1jn5.', '<ERR=SL:p-+RSi>', 'S3atr.', 'Kaus3.', 'Gr.', 'Ka1s3.', 'S3atr2.', 'TS.', 'Kull.', 'S3a1n3khS3r2.', 'i', '<ERR=SL:-ha4c+zar->', 'Pur.', 'A.', 'Uttarar.', 'Sin6ha7s.', 'Ta1n2d2yaBr.', 'Pan5car.', 'Ka1d.', 'HYog.', 'Pa1rGr2.', 'Pra7yas3c.', 'Ma1nGr2.', 'Nir.', 'Bhartr2.', 'with', 'Sa1y.', 'DivyA7v.', 'S3ivag.', 'Mn.iii.', 'Hcat.', 'vS.', 'Ka1m.', 'SV.', 'AitBr.', 'Pat.', 'Gaut.', 'Hit.', 'S3ak.', 'Ka1s3i1Kh.', 'VS.', 'Pan5cat.', '6', 'v.l.', 'voc.', 'S3is3.', '5', 'modify-SLmwtot3-6b3-PFX', 'modify-SLmwtot3-6b3-PFX1', 'modify-SLmwtot3-6b3-PFX2', 'modify-SLmwtot3-5a']
  (defun modify-SLmwtot3-6b4 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-mfn', '%{as}', 'modify-SLmwtot3-5a']
  (defun modify-SLmwtot3-6b5 ()
  CALLS: ['modify-SLmwtot3-mfn-key', '%{I}', 'modify-SLmwtot3-mfn', '\\\\?', '?', '%{as}', 'SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-5a', 'modify-SLmwtot3-mfn-key-sfx', 'modify-SLmwtot3-mfn-key-sfx1', '%{ikA}', '%{iRI}', 'modify-SLmwtot3-mfn-lexnote']
  (defun init-SLmwtot3-S-codes (tabin &optional dir)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'read', 'current-buffer', 'kill-buffer']
  (defun init-SLmwtot3-S-codes-question ()
  CALLS: ['"A1pGr2."', '"APra1t."', '"AdhyR."', '"BP."', '"Bh."', '"Bomb."', '"Br2S."', 's', '"Calc."', '"Cat."', '"IA."', '"Il."', '"M."', '"P."', '"Pi."', '"A1v."', '1', 'misspell?', '"HanRa1mUp."', '"S3am2k."', '"SS3am2k."']
  (defun modify-SLmwtot3-6c1 ()
  CALLS: ['modify-SLmwtot3-reformat', '[0-9]+\\\\', 'regexp-replace', 'SLtot3-buffer', "'\\\\", 'modify-SLmwtot3-1c', '[ivx]+\\\\', '[A-Z]\\\\', 'SLmwtot2-process-changes', '"', '[]&.]\\\\', '[']
  (defun modify-SLmwtot3-6c2 ()
  CALLS: ['modify-SLmwtot3-reformat', '[ivx]+\\\\', '[0-9]+\\\\', 'SLmwtot2-process-changes', 'SLtot3-buffer', '[ivx13]+\\\\', '[-ivx0-9]+\\\\']
  (defun modify-SLmwtot3-6c3 ()
  CALLS: ['modify-SLmwtot3-reformat', '[^TM]\\\\', '[^A-Z]\\\\', '[0-9]+\\\\', '[0-9xvi]+\\\\']
  (defun modify-SLmwtot3-6c4 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'e.g.,']
  (defun modify-SLmwtot3-6c5 ()
  CALLS: ['modify-SLmwtot3-reformat', '[ivx0-9]+\\\\', '[0-9]+\\\\', '[ivx0-9][ivx0-9', '[-0-9]+\\\\', '[0-9]+-\\\\sw+\\\\']
  (defun modify-SLmwtot3-6d1 ()
  CALLS: ['init-SLmwtot3-S-codes']
  (defun modify-SLmwtot3-6d2 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-reformat', '[a-zA-Z0-9]+\\\\', 'modify-SLmwtot3-mfn-key-sfx1', '%{am}', 'mystring-replace', '[0-9]\\\\', '.\\\\', '\\\\([^', '[0-9]+\\\\', '<LEX=V', '', '<S=[^>]+\\\\', '[ixlv0-9][', '[0-9][', '[x][', '[', '\\\\s-\\\\', '[0-9]+', '[clxiv]+\\\\', '[0-9clxiv]+\\\\', '[^<>]+\\\\']
  (defun modify-SLmwtot3-6d3 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-reformat', '[0-9]+\\\\', '[xliv]+\\\\', '[^>]+\\\\', '[0-9ixlvcm]+\\\\']
  (defun modify-SLmwtot3-6d4 ()
  CALLS: ['SLmwtot2-process-changes', 'SLtot3-buffer', 'modify-SLmwtot3-reformat', '[0-9]+\\\\', '[a-zA-Z0-9]+\\\\', '[^', '[^>]+\\\\', '[0-9]\\\\', 'said', '<S=[^>]+>\\\\', '[^<]*\\\\', '[ivcxl]+\\\\', '[0-9][0-9][0-9]+\\\\', '[ivcx]\\\\', '[ivcx]+\\\\', '[A-Z][A-Za-z0-9]+\\\\', '\\\\W\\\\', '[^>]+,[ivcxl]\\\\', 'i', '\\\\([ivcxl]\\\\', 'ed.', 'ed[.]', '<S=RBomb>', '[ivcxl]\\\\', 'in']
  (defun modify-SLmwtot3-6d5 ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'modify-SLmwtot3-reformat-batch']
  (defun modify-SLmwtot3-6d5a ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'modify-SLmwtot3-reformat-batch', 'modify-SLmwtot3-reformat', '\\W\\']
  (defun abbrev-edit ()
  CALLS: ['with-current-buffer', 'while', 'search-forward-regexp', "[^'.]+\\\\", '.+\\\\', 's1', 'buffer-substring', 'match-beginning', 'match-end', 'insert', 'goto-char', 'backward-char', 'delete-char', 'current-line', 'beginning-of-line', 'kill-line', 'format', '\\"%s.\\"']
  (defun temp-doc ()
  CALLS: ['regexp-distrib', 'while', 'search-forward-regexp', 'beginning-of-line', 'kill-line']
  (defun modify-SLmwtot3-6d4a ()
  CALLS: ['modify-SLmwtot3-6c-helper1', 'init-SLmwtot3-S-codes']
  (defun modify-SLmwtot3-6d4b ()
  CALLS: ['modify-SLmwtot3-6c-helper1', 'init-SLmwtot3-S-codes']
  (defun modify-SLmwtot3-6e1 ()
  CALLS: ['modify-SLmwtot3-6c-helper1', 'init-SLmwtot3-S-codes']
  (defun modify-SLmwtot3-6e2 ()
  CALLS: ['modify-SLmwtot3-reformat', '.\\\\', '\\\\W\\\\']
  (defun modify-SLmwtot3-6c-helper1 (chgsin)
  CALLS: ['chgs', 'copy-sequence', 'sort', 'lambda', 'chg1', '<=', 'length', 'while', 'elt', 'format', 'substring', 'modify-SLmwtot3-reformat', 'fol-msg']
  (defun temp-make-dates ()
  CALLS: ['i', 'while', '<', '1+', 'if', 'format', 'SLmwtot2-process-changes', 'SLtot3-buffer', 'fol-msg']
  (defun modify-SLmwtot3-6c-helper (ftlist &optional bufin)
  CALLS: ['from', 'while', 'modify-SLmwtot3-reformat', '[xiv]+', 'elt', 'substring', 're-from', 'format', '\\\\Sw\\\\', 'fol-msg', '[xiv]+\\\\', '[0-9]+\\\\']
  (defun modify-SLmwtot3-7a-helper1-old1 (chgsin)
  CALLS: ['chgs', 'copy-sequence', 'sort', 'lambda', 'chg1', '<=', 'length', 'while', 'elt', 'format', 'message', 'modify-SLmwtot3-reformat', 'fol-msg']
  (defun AS-modify1 (bufin)
  CALLS: ['ans1', 'if', '[^', '[0-9]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'x', 'buffer-substring', 'match-beginning', 'match-end', 'translate-string-AS-SLP1', 'mw', 'format', 'cons', 'reverse', 'fol-msg', 'length', 'mapcar', 'lambda']
  (defun AS-modify1a (bufin &optional regexp)
  CALLS: ['ans1', 'if', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'x', 'buffer-substring', 'match-beginning', 'match-end', 'message', 'format', 'translate-string-AS-SLP1', 'mw', 'cons', 'reverse', 'fol-msg', 'length', 'mapcar', 'lambda']
  (defun AS-modify1b (bufin &optional regexp)
  CALLS: ['ans1', 'if', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'x', 'buffer-substring', 'match-beginning', 'match-end', 'message', 'format', 'gen-word-list', 'length', '<', 'elt', 'translate-string-AS-SLP1', 'mw', 'concat', 'cons', 'reverse', 'fol-msg', 'mapcar', 'lambda']
  (defun AS-modify2 (bufin)
  CALLS: ['i.e.,', 'e.g.', 'regexp', 'with-current-buffer', 'goto-char', '[^', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'substring', 'replace-match', 'if', 'mw', 'beginning-of-line', 'which', 'string-equal', 'format', 'current-line', 'kill-line', 'fol-msg', 'save-buffer']
  (defun AS-modify3 (bufin)
  CALLS: ['ans1', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '[^}]+\\\\', 'x', 'buffer-substring', 'match-beginning', 'match-end', 'Sx2', 'when', 'beginning-of-line', 'current-line', 'fol-msg', 'format', '1+', 'kill-line', 'message']
  (defun AS-examine (bufin regexp)
  CALLS: ['ans1', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'x', 'when', 'beginning-of-line', 'current-line', 'fol-msg', 'format', '1+', 'kill-line', 'message']
  (defun modify-SLmwtot3-7a-helper1-old2 (chgsin)
  CALLS: ['chgplist', 'while', 'pair', 'elt', 'intern', 'format', 'plist-put', 'when', 'fol-msg', 'SLtot3-buffer', '[A-Za-z][A-Zaa-z-]*[0-9][A-Zaa-z0-9-]*\\\\', '[a-zA-Z0-9-]+\\\\', '[A-Za-z][A-Za-z-]*[0-9][A-Za-z0-9-]*\\\\', 'with-current-buffer', 'goto-char', 'search-forward-regexp', '1+', 'mod', 'message', 'c1', 'point', 'match-beginning', 'match-end', 'buffer-substring', 'plist-get', 'if', 'replace-match', '<', 'point-max']
  (defun modify-SLmwtot3-7a-helper1a (old new)
  CALLS: ['bufin', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'format', '%s\\\\', 'while', 'search-forward-regexp', 'replace-match', '1+', 'fol-msg']
  (defun modify-SLmwtot3-7a-helper1 (chgsin)
  CALLS: ['chgplist', 'while', 'cadr', 'message', 'format', 'modify-SLmwtot3-7a-helper1a', '+', 'fol-msg']
  (defun modify-SLmwtot3-7a-helper (tabin &optional dirin)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', '[^', '.*\\\\', '[^\\n]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', '%s', 'length', '<', 'cons', 'reverse', 'modify-SLmwtot3-7a-helper1']
  (defun modify-SLmwtot3-7b-helper (tabin &optional dirin)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', '[^', '.*\\\\', '[^:\\n]+\\\\', '[^\\n]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'message', 'format', 'mystring-replace', 'SLtot3-buffer', 'fol-msg', '+']
  (defun mystring-replace-7c (bufin old new &optional left right chk)
  CALLS: ['ncount', 'if', 'format', '%s\\\\', 'fol-msg', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'replace-match', 'con', 'buffer-substring', 'match-beginning', 'match-end', '<', 'point', 'point-max']
  (defun modify-SLmwtot3-7c-helper (tabin &optional dirin)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', '[^:\\n]+\\\\', '[^\\n]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'message', 'format', 'mystring-replace-7c', 'SLtot3-buffer', 'fol-msg', '+']
  (defun modify-SLmwtot3-7a1 ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'modify-SLmwtot3-7a-helper', 'modify-SLmwtot3-reformat', '\\\\W\\\\', '[^a-zA-Z0-9-]\\\\', 'modify-SLmwtot3-6c-helper', '("Uttamac."', '("Uttamac2."', '', '"Rase7ndrac."', '"Rase7ndrach."', '"Rase7ndr."', '"Rasar."', '"Pra7syas3c."', '"Pra7yaS3c."', '"Pra7yas3c."', '"Pra7yasc."', '.\\\\', 'modify-SLmwtot3-reformat-N-tab', '[0-9]+\\\\', '[0-9][0-9]+\\\\', '[^>]+\\\\', '/[0-9]+\\\\', '[0-9]+', '[', '[123]\\\\', '<S=[^>]+\\\\', '\\\\w+\\\\', ',*\\\\', '\\\\w*\\\\', '<S=[^>]+[0-9]\\\\', '[lxi]+\\\\', '[^,>]+\\\\', '-[0-9]+\\\\', '<S=[A-Za-z]+\\\\', '[f]\\\\', ']\\\\(<S=[^>]+>\\\\']
  (defun modify-SLmwtot3-7a2 ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'modify-SLmwtot3-reformat', '[^>]+\\\\']
  (defun modify-SLmwtot3-7a3 ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'modify-SLmwtot3-reformat', '[1-3]\\\\']
  (defun make-modify-SLmwtot3-n (&optional tabin tabout)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', '[-a-zA-Z]+\\\\', '[0-9]+\\\\', 'goto-char', 'while', 'search-forward-regexp', '1+', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'current-line', 'SL-sandhi-n', 'insert', 'save-buffer']
  (defun make-modify-SLmwtot3-nATa (&optional tabin tabout)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'nATa-[-a-zA-Z]+\\\\', '[0-9]+\\\\', 'goto-char', 'while', 'search-forward-regexp', '1+', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'current-line', 'concat', 'substring', 'insert', 'save-buffer']
  (defun make-modify-SLmwtot3-vowel-vowel (&optional tabin tabout)
  CALLS: ['bufin', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', '[-a-zA-Z]+\\\\', '[0-9]+\\\\', 'goto-char', 'while', 'search-forward-regexp', '1+', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'current-line', 'when', 'string-match', 'insert', 'save-buffer']
  (defun modify-SLmwtot3-mfn (regexp keychar schg)
  CALLS: ['', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'p', 'point', 'forward-line', 'end-of-line', 'beginning-of-line', 'current-line', 'condition-case', '[-a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'elt', 'substring', 'replace-match', 'if', 'search-forward', '1-', '%s', '<', 'defun', 'regexp', 'a', 'b', 'insert', 'non-nil', 'i.e.,', 'string-match', 'concat']
  (defun modify-SLmwtot3-mfn-lexnote (lex newlex &optional chk)
  CALLS: ['', 'SLtot3-buffer', 'concat', '[^>]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'replace-match', '<', 'point', 'point-max', 'forward-line', 'fol-msg', 'current-line']
  (defun modify-SLmwtot3-reformat (regexp newregexp &optional chk mchg bufin)
  CALLS: ['ncount', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'format', 'replace-match', '<', 'point', 'point-max', 'numberp', 'fol-msg', 'count-lines', 'point-min', '<=']
  (defun modify-SLmwtot3-reformat-N (exp newexp &optional chk mchg bufin)
  CALLS: ['ncount', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward', '1+', 'when', 'mod', 'message', 'format', 'replace-match', '<', 'point', 'point-max', 'numberp', 'fol-msg', 'count-lines', 'point-min', '<=']
  (defun modify-SLmwtot3-reformat-N-list (chgsin &optional chk mchg bufin)
  CALLS: ['ncount', 'while', 'elt', 'modify-SLmwtot3-reformat-N', '+', 'fol-msg', 'format']
  (defun modify-SLmwtot3-reformat-N-tab (tabin &optional dirin chk bufmw)
  CALLS: ['', 'bufin', 'if', 'find-file-noselect', 'sangram-filename', '[^', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'message', 'format', 'buffer-substring', 'match-beginning', 'match-end', 'cons', 'modify-SLmwtot3-reformat-N-list']
  (defun construct-MW-inputs-1-all ()
  CALLS: ['fol-msg', 'format', 'current-time-string', 'construct-MW-inputs-1a', '"PRON"', '"m"', '"adj"', '"I"', 'construct-MW-inputs-1b', 'construct-MW-inputs-1c']
  (defun construct-MW-inputs-1a (tabout lextype lexcodes &optional bufin)
  CALLS: ['MW-init', 'bufout', 'make-regexp', 'fol-msg', 'format', '[^;\\n]*\\\\', '[^>]*\\\\', 'concat', 'if', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'search-forward-regexp', 'forward-line', 'beginning-of-line', 'current-line', 'point', 'end-of-line', '1+', '(search-forward', '(not', 'buffer-substring', '(and', 'char-after', 't', '+', 'progn', 'MW-gather-clauses', 'cadr', 'when', 'match-beginning', 'match-end', 'temp', 'MW-inputs-getmwline', 'elt', '[-a-zA-Z]+\\\\', 'string-delete-regexp', 'message', 'insert', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun MW-inputs-getmwline (c1-key c2-key)
  CALLS: ['MW-key', 'goto-char', 'search-forward', 'buffer-substring', '1-', 'point', 'search-forward-regexp', '[0-9]+\\\\', 'match-beginning', 'match-end', 'string-delete-regexp']
  (defun construct-MW-inputs-1b (tabout lextype lex &optional bufin)
  CALLS: ['MW-init', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'if', '.\\\\', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'search-forward', 'forward-line', '+', 'progn', 'buffer-substring', '1-', 'search-forward-regexp', '[0-9]+\\\\', 'match-beginning', 'match-end', 'insert', 'replace-string', 'replace-match', 'point-min', 'point-max', '(eq', '(equal', 'fol-msg', '1+', 'MW-gather-clauses', 'cadr', 'string-match', 'length', 'lexout2', 'MW-standardize-vlex', '<', 'save-buffer', 'kill-buffer']
  (defun construct-MW-inputs-1c (tabout lextype lex &optional bufin)
  CALLS: ['MW-init', 'bufout', '.\\\\', '[^>]*\\\\', '[a-zA-Z]+\\\\', '[-a-zA-Z]+\\\\', 'if', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'search-forward', 'forward-line', '+', 'progn', 'buffer-substring', '1-', 'search-forward-regexp', '[0-9]+\\\\', 'match-beginning', 'match-end', '1+', 'MW-gather-clauses', 'cadr', 'string-match', 'length', 'gen-word-list', 'mapconcat', 'insert', 'fol-msg', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun construct-MW-inputs-1d (tabout &optional bufin)
  CALLS: ['construct-MW-inputs-1d', "'denominatives'", 'no', 'a', 'b', 'SLtot3-buffer', 'MW-init', 'bufout', '[PA]+\\\\', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'search-forward-regexp', 'fol-msg', 'format', 'current-line', 'buffer-substring', 'match-beginning', 'match-end', 'when', 'mod', 'message', 'forward-line', 'beginning-of-line', 'point', 'end-of-line', 'search-forward', '+', 'progn', '1-', '[0-9]+\\\\', 'insert', 'replace-string', 'replace-match', 'point-min', 'point-max', '(eq', '(equal', '1+', 'lexout2', '<', 'save-buffer', 'kill-buffer']
  (defun MW-standardize-vlex (s)
  CALLS: ['', 'string-match', 'if', 'match-end', 'length', 'concat']
  (defun MW-inputs-check ()
  CALLS: ['mw-verb-comp1', 'mw-subanta-comp1', 'mw-ind-comp1']
  (defun mw-verb-comp2 (mwbuf dkbuf)
  CALLS: ['mwdata', 'temp-init-mwbuf', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', '1+', 's', 'current-line', 'read-colon-line-fields', 'fol-msg', 'format', 'elt', 'pfx', 'verbs-dashverb', 'V', 'verbspec-standardize', 'plist-get', 'when', 'data', 'MWkey-find', 'SLtot3-buffer', 'if', 'cadr', 'MWline-decode', 'concat', 'progn', 'forward-line']
  (defun mw-verb-comp1 (mwbuf dkbuf)
  CALLS: ['mwdata', 'temp-init-mwbuf', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', '1+', 's', 'current-line', 'read-colon-line-fields', 'fol-msg', 'format', 'elt', 'pfx', 'verbs-dashverb', 'V', 'verbspec-standardize', 'plist-get', '(not', 'when', 'if', 'forward-line']
  (defun temp-init-mwbuf (mwbuf)
  CALLS: ['mwdata', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', '1+', 's', 'read-colon-line-fields', 'current-line', 'fol-msg', 'format', 'elt', 'pfx', 'verbs-dashverb', 'V', 'verbspec-standardize', 'plist-get', 'lambda', 'vf', 'append-if-new', 'plist-put', 'when', 'if', 'forward-line']
  (defun mw-abbrev-1a (bufname)
  CALLS: ['ans', 'with-current-buffer', 'goto-char', '[^', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'assumed', 'substring', 'format', 'replace-match', 'save-buffer']
  (defun mw-abbrev-1b (tabin &optional tabout dir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'concat', 'fol-msg', 'format', 'with-current-buffer', 'delete-region', 'point-min', 'point-max', 'goto-char', '[^', '<[^>]+>\\\\', 'while', 'search-forward-regexp', 'iexpr', 'buffer-substring', 'match-beginning', 'match-end', '\\W\\', 'insert', '\\\\W\\\\', 'search-forward', 'replace-match', 'current-line', 'save-buffer']
  (defun modify-SLmwtot3-reformat-batch (tabin &optional dir)
  CALLS: ['filein', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', '[^', '<[^>]+>\\\\', '[^\\"]+\\\\', 'while', 'search-forward-regexp', 'iexpr', 'buffer-substring', 'match-beginning', 'match-end', 'modify-SLmwtot3-reformat', 'fol-msg', 'format']
  (defun mw-subanta-find (sub)
  CALLS: ['files', '"MW-noun.txt"', 'format', 'lambda', 'f', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read-colon-line-fields', 'current-line', 'elt', 'mapcar', 'x', '(equal', 'M', 't', 'solution', 'cons', 'flatten']
  (defun mw-subanta-comp1 (dkbuf)
  CALLS: ['nline', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'when', 'mod', 'message', 'format', '1+', 's', 'current-line', 'read-colon-line-fields', 'fol-msg', 'elt', 'pfx', 'verbs-dashverb', 'V', 'solution', 'mw-subanta-find', '(not', 'concat', '(member', '(and', 'M', 'F', 'if', 'forward-line']
  (defun mw-ind-find (sub)
  CALLS: ['files', '"MW-ind.txt"', 'format', 'lambda', 'f', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read-colon-line-fields', 'current-line', 'elt', 'mapcar', 'solution', 'cons', 'flatten']
  (defun mw-ind-comp1 (dkbuf)
  CALLS: ['nline', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', 'when', 'mod', 'message', 'format', '1+', 's', 'current-line', 'read-colon-line-fields', 'fol-msg', 'elt', 'pfx', 'verbs-dashverb', 'V', 'solution', 'mw-ind-find', '(not', 'concat', '(member', 'if', 'forward-line']
  (defun examine-SLmwtot3-preverb-1 ( &optional bufin)
  CALLS: ['MW-init', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'if', '.\\\\', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'beginning-of-line', 'point', 'search-forward', 'backward-char', 'buffer-substring', 'intern', 'plist-put', 'forward-line', '<', 'point-max', 'fol-msg', 'format', '/', 'length', 'when', 'mod', 'message', 'end-of-line', '+', 'progn', '1+', '<LEX=V', 'root', '1-', 'plist-get', '%{A-i}', '', 'search-forward-regexp', '[^}]*\\\\', 'match-beginning', 'match-end', 'concat', 'insert', '%s', 'vconcat', 'vector', 'erase-buffer', 'roots', 'save-buffer', 'kill-buffer']
  (defun examine-SLmwtot3-preverb-1a ( &optional bufin)
  CALLS: ['MW-init', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'if', '.\\\\', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'beginning-of-line', '(hruq', 'V', '<MW=', 'read-colon-line-fields', 'current-line', 'solution', 'vform', 'plist-get', 'elt', '1', 'append', 'plist-put', 'forward-line', '<', 'point', 'point-max', 'fol-msg', 'format', '/', 'length', 'when', 'mod', 'message', 'end-of-line', 'search-forward', '+', 'progn', 'backward-char', 'buffer-substring', 'without', '1+', 'search-forward-regexp', '[', '<LEX=V', 'root', 'match-beginning', 'match-end', '1-', 'intern', 'some-pfx-sandhi-at-hyphens', '%{A-i}', '', '2.', '[0-9.', '[^}]*\\\\', 'substring', 'gen-word-list', 'r1', 'SL-find-root-pfx', 'concat', 'mapconcat', '%s', '(member', 'A', 'forms', '#', '#1', 'delete', 'lexinfo', 'fields', '(1', 't', 'insert', 'flatten', 'save-buffer', 'kill-buffer']
  (defun some-pfx-sandhi-at-hyphens (s)
  CALLS: ['s1', '?A', 'gen-word-list', 'length', '1-', 'while', '<', 'aref', 'substring', 'elt', 'fol-msg', 'format', '(and', 'capitalize', 'concat', 'aset', '(member', '"ut"', '(equal', '"anUj"', 'mapconcat']
  (defun SL-find-root-pfx (s root)
  CALLS: ['forms', '(equal', 'SL-upasarga-forms', 'if', 'while', 'cadr', 'when', 'symbol-name', 'mapcar', 'mapconcat']
  (defun MW-clause-distrib (bufin)
  CALLS: ['ncount', 'make-vector', 'with-current-buffer', 'goto-char', 'forward-line', 'while', 'beginning-of-line', 'point', 'end-of-line', 'search-forward', '1+', '+', 'when', '<=', 'fol-msg', 'format', '1-', 'aset', 'aref', '<', 'point-max', 'x', '/', '*', '%6.2f%%']
  (defun SLtot2-lexical-lines ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'concat', '%{"', '[^}]*\\\\', 'fol-msg', 'format', 'with-current-buffer', 'make-vector', 'goto-char', 'point-max', 'forward-line', 'while', '1+', 'aset', 'char-after', 'aref', '<', 'point', 'c', 'when', '+', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'mod', 'message', 'c1', 'intern', 'plist-get', 'if', 'plist-put', 'current-line', 'p1', 'ans1', 'insert', 'replace-string', 'cons', 'sort', 'lambda', 'x', 'string-lessp', 'elt']
  (defun SLtot2-line-examine (theLine)
  CALLS: ['buftot2', 'SLtot2-buffer', 'insert-file-contents-literally', 'sangram-filename', 'goto-char', 'point-min', 'while', 'when', 'count-lines', 'point', 'fol-msg', 'format', '=', 'mod', 'message', '1+', 'if', 'current-line', 'c1', 'end-of-line', 'forward-line', '<', 'point-max']
  (defun SLtot2-line-examinexxx (theLine)
  CALLS: ['MW-init', 'HKMW-init', 'indir', 'parse-from-to-construct', 'aset', 'rawindx-buffer', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', 'while', 'when', 'mod', 'message', 'format', '1+', 'fol-msg', 'point', 'end-of-line', 'buffer-substring', 'any-parse-word-string', 'elt', 'mapconcat', 'delete-region', 'insert', 'forward-line', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'replace-match', 'current-line', '<', 'point-max', 'if', 'save-buffer', 'kill-buffer']
  (defun check-string-grouping (s group-pairs)
  CALLS: ['insert', 'goto-char', 'check-buffer-grouping', 'point-min', 'point-max']
  (defun check-buffer-grouping (c1 c2 group-pairs)
  CALLS: ['psave', 'point', 'p', 'while', '1+', 'goto-char', 'search-forward', 'elt', 'cons', 'nreverse', 'begs', 'when', 'mapcar', 'lambda', 'x', 'fol-msg', 'format', 'length', 'apply', '1st', 'sort', '<', 'vconcat', 'check-group']
  (defun check-group (locs)
  CALLS: ['i', 'arrayp', 'length', 'while', '<', 'elt', 'if', 'cons', '1+']
  (defun correct-string-grouping (s group-pairs errlocpairs err-pairs)
  CALLS: ['ans', 'pair', 'while', 'elt', 'when', 'cons', 'sort', 'lambda', 'x', '<', 'fol-msg', 'format', 'loc', '1-', 'if', 'length', 'insert', 'goto-char', 'delete-char', '-', 'insert-string', 'buffer-substring', 'point-min', 'point-max']
  (defun verbspec-standardize (specin)
  CALLS: ['ans', 'if', 'while', 'classes', 'numberp', 'append', 'P', 'U', 'append-if-new', 'fol-msg', 'format', 'lambda', 'c', 'v', 'cons', 'nreverse']
  (defun verbs-dashverb (vlist)
  CALLS: ['names', 'mapcar', 'mapconcat', 'intern']
  (defun MWkey-find (key  bufin)
  CALLS: ['fkey', 'if', 'symbolp', 'symbol-name', 'format', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 's1', 'current-line', 'forward-line', 'cons', 'nreverse']
  (defun MWline-find (lnum &optional bufin)
  CALLS: ['s1', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-line', 'mod', 'forward-line', 'current-line', 'cons']
  (defun MWline-decode (s)
  CALLS: ['ans', '[0-9]+\\\\', 'when', 'string-match', 'val', 'substring', 'match-beginning', 'match-end', 'string-to-number']
  (defun print-CHG-records-1 (key mwdata)
  CALLS: ['datum', 'if', 'SLtot3-buffer', 'while', '1+', 'cadr', 'MWline-decode', 'fol-msg', 'format', 'when']
  (defun print-CHG-records (key &optional bufin)
  CALLS: ['mwdata', 'if', 'SLtot3-buffer', 'MWkey-find', 'SL-mwtot3-key-find', 'MW-key-find', 'print-CHG-records-1']
  (defun select-keys (keybuf regexp keyreg)
  CALLS: ['ans', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'end-of-line', 'point', 'beginning-of-line', 'when', 'buffer-substring', 'match-beginning', 'match-end', 'cons', 'forward-line', 'nreverse']
  (defun print-selected-CHG-records (keybuf regexp)
  CALLS: ['key', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'beginning-of-line', 'read', 'current-buffer', 'forward-line', 'print-CHG-records']
  (defun chkmfn1 (regexp keychars &optional bufin)
  CALLS: ['ncount', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'p', 'point', 'forward-line', 'end-of-line', 'beginning-of-line', 'current-line', 'search-forward', '1-', 'condition-case', '[-a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'elt', 'substring', '%s', '<']
  (defun chkmfn2 (regexp keyend &optional bufin)
  CALLS: ['ncount', 'if', 'SLtot3-buffer', 'format', 'with-current-buffer', 'goto-char', 'fol-msg', 'point-max', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'p', 'point', 'forward-line', 'end-of-line', 'beginning-of-line', 'current-line', 'search-forward', '1-', 'condition-case', '[-a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', 'string-match', '%s', '<']
  (defun modify-SLmwtot3-6b3-PFX ()
  CALLS: ['nok', '%{\\\\([a-zA-Z]+-\\\\', '[a-zA-Z]+\\\\', 'format', 'with-current-buffer', 'SLtot3-buffer', 'goto-char', 'while', 'search-forward-regexp', 'pfx', 'point', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'current-line', 'replace-match', '1+', 'point-max']
  (defun modify-SLmwtot3-6b3-PFX1 ()
  CALLS: ['nok', '%{\\\\([a-zA-Z]+-\\\\', '%{\\\\(-[a-zA-Z]+-\\\\', '[a-zA-Z]+\\\\', 'format', 'with-current-buffer', 'SLtot3-buffer', 'goto-char', 'while', 'search-forward-regexp', 'pfx', 'point', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'current-line', 'replace-match', '1+', 'point-max']
  (defun MW-validate (&optional bufin)
  CALLS: ['if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'more', 'while', '<', 'point', 'point-max', 'end-of-line', 'beginning-of-line', 'when', 'search-forward-regexp', 'fol-msg', 'format', '+', 'forward-line']
  (defun MW-validate-temp (&optional bufin)
  CALLS: ['if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'more', 'while', '<', 'point', 'point-max', 'end-of-line', 'beginning-of-line', 'char-after', 'when', 'fol-msg', 'format', '%c', '1+', '+', 'forward-line', '=']
  (defun modify-SLmwtot3-6b3-PFX2 ()
  CALLS: ['nok', '[^', '[a-zA-Z]+\\\\', 'format', 'with-current-buffer', 'SLtot3-buffer', 'goto-char', 'while', 'search-forward-regexp', 'pfx', 'point', 'buffer-substring', 'match-beginning', 'match-end', 'string-trim', 'fol-msg', 'current-line', 'replace-match', '1+', 'when', 'point-max']
  (defun allcaps-sym (sym)
  CALLS: ['s', 'copy-sequence', 'symbol-name', 'length', 'while', '<', 'aset', 'capitalize', 'elt', '1+', 'intern']
  (defun remove-dashes (k)
  CALLS: ['w', 'if', 'symbolp', 'symbol-name', 'gen-word-list', 'mapconcat', 'intern']
  (defun MW-keys-make-alt (tabout tabin dirout)
  CALLS: ['MW-keys-make-alt', 'bufin', 'find-file-noselect', 'sangram-filename', 'MW-keys-make']
  (defun MW-keys-make (&optional tabout bufin dirout)
  CALLS: ['MW-init', 'bufout', 'if', 'SLtot3-buffer', '', 'find-file-noselect', 'sangram-filename', 'fol-msg', 'format', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'search-forward-regexp', 'end-of-line', 'point', 'beginning-of-line', 'temp', 'MW-inputs-getmwline', 'elt', 'when', 'search-forward', 'current-line', 'mod', 'message', '1+', 'insert', 'forward-line', 'MW-gather-clauses', 'cadr', '[-a-zA-Z]+\\\\', 'string-delete-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'save-buffer', 'kill-buffer']
  (defun check-n-P (&optional bufin)
  CALLS: ['MW-init', 'p', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'while', '<', 'point', 'point-max', '1+', 'beginning-of-line', 'end-of-line', 'when', 'search-forward', 'read', 'current-buffer', 'remove-dashes', 'SL-n-P0', 'fol-msg', 'format', 'current-line', 'message', 'forward-line']
  (defun SL-sandhi-n (base)
  CALLS: ['ans', 'remove-dashes', 'if', 'symbolp', 'intern', 'translate-SLP1-ITRANS', 'symbol-name', 'ITRANS-parse-words-1', 'sandhi-n-N', 'n', 'mapcar-LE', 'copy-sequence', 'length', 'while', '<', 'elt', 'when', 'aset', '1+']
  (defun MW-key-find (key &optional anycase bufin keybuf)
  CALLS: ['fkey', 'SLtot3-buffer', 'if', 'MW-buffer', 'MW-keys-buffer', 'symbolp', 'symbol-name', 'format', '[0-9]+\\\\', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'goto-line', 'current-line', 'forward-line', 'cons', 'nreverse']
  (defun SO-buffer ()
  CALLS: ['ans', 'word-list', 'current-time-string', 'concat', 'elt', 'find-file-other-window', 'sangram-filename', 'find-file-noselect']
  (defun MWS ()
  CALLS: ['interactive', 'x', 'fol-msg', 'format', 'read-string', 'Old/New', 'substring', 'capitalize', '(equal', 'MW-Save-Rec', 't', 'beep']
  (defun MW-Save-Rec (ident)
  CALLS: ['savebuf', 'fol-msg', 'format', 'count-lines', 'point-min', 'point', 'current-line', 'SO-buffer', 'with-current-buffer', 'goto-char', 'point-max', 'if', 'forward-line', 'elt', 'word-list', 'insert', 'save-buffer', 'message', 'MW-prob', 'beep', 'other-window']
  (defun mwchg-display0 (&optional num)
  CALLS: ['bufin', 'if', 'SLtot3-buffer', '[0-9]+\\\\', 'with-current-buffer', 'point', 'end-of-line', 'beginning-of-line', 'search-forward-regexp', 'string-to-number', 'buffer-substring', 'match-beginning', 'match-end', 'forward-line', '1+', 'fol-msg', 'format', 'while', '<', 'current-line', 'goto-char']
  (defun old-construct-MW-inputs-1a (tabout plex lex lexout &optional bufin)
  CALLS: ['MW-init', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'concat', 'if', '.\\\\', 'SLtot3-buffer', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'while', 'search-forward-regexp', 'forward-line', 'beginning-of-line', 'fol-msg', 'format', 'current-line', 'point', 'end-of-line', '1+', 'search-forward', 'when', '+', 'progn', 'MW-gather-clauses', 'cadr', 'buffer-substring', 'match-beginning', 'match-end', 'string-match', 'length', 'temp', 'MW-inputs-getmwline', 'elt', '[-a-zA-Z]+\\\\', 'string-delete-regexp', 'message', 'insert', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun temp-MW-inputs-1a (tabout plex lex lexout &optional bufin)
  CALLS: ['MW-init', 'bufout', '[^;\\n]*\\\\', '[^>]*\\\\', 'concat', 'if', '.\\\\', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'forward-line', 'beginning-of-line', 'point', 'end-of-line', '1+', 'search-forward', 'when', '+', 'progn', 'MW-gather-clauses', 'cadr', 'buffer-substring', 'match-beginning', 'match-end', 'fol-msg', 'format', 'string-match', 'length', 'temp', 'MW-inputs-getmwline', 'elt', '[-a-zA-Z]+\\\\', 'string-delete-regexp', 'message', '<', 'point-max']
  (defun my-forward-sexp (bound begexp endexp)
  CALLS: ['ans', 'check-buffer-grouping', 'point', 'when', 'elt', 'fol-msg', 'format', 'sort', 'lambda', 'x', '<', '-', 'length']
  (defun old-mw (key &optional full noprflag)
  CALLS: ['ans', 'insert', 'goto-char', 'while', 'search-forward-regexp', 'replace-match', 'current-line', 'MW-key-find', 'old-mw-helper']
  (defun old-mw-alt (key &optional full noprflag)
  CALLS: ['bufin', 'find-file-noselect', 'sangram-filename', 'MW-key-find', 'fol-msg', 'format', 'if', 'old-mw-helper']
  (defun old-mw-helper (ans1 &optional full noprflag)
  CALLS: ['ans', 'while', 'tmp', 'elt', 'cons', 'format', 'if', 'old-mw-help1-string', 'nreverse', 'when', 'mapcar', 'lambda', 'x', 'fol-msg']
  (defun old-mw-help1-string (sin)
  CALLS: ['ans', 'insert', 'goto-char', 'while', 'my-forward-sexp', 'point-max', '"', 'delete-region', 'elt', 'if', '<', '-', 'buffer-substring', '+', '"<LEX"', 'when', 'search-forward-regexp', 'match-beginning', 'kill-line', 'point-min']
  (defun mwgo ()
  CALLS: ['interactive', 'word', 'point', 'forward-word', 'buffer-substring', 'goto-char', 'switch-to-buffer-other-window', 'SLtot3-buffer', 'search-forward', 'if', 'message', 'format']
  (defun M ()
  CALLS: ['interactive', 'word', 'point', 'while', 'forward-word', 'char-before', 'buffer-substring', 'goto-char', 'switch-to-buffer-other-window', 'point-max', 'if', 'mw', 'fol-msg', 'format']
  (defun ML ()
  CALLS: ['interactive', 'word', 'point', 'forward-word', 'buffer-substring', 'goto-char', 'string-to-number', 'switch-to-buffer-other-window', 'SLtot3-buffer', 'goto-line']
  (defun next-double-find (find1 find2 &optional isub1 isub2 bufin)
  CALLS: ['more', 'if', 'SLtot3-buffer', 'with-current-buffer', 'goto-char', 'message', 'format', 'point', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'end-of-line', 'beginning-of-line', 'when']
  (defun double-find1 (find1 find2)
  CALLS: ['key', 'with-current-buffer', 'SLtot3-buffer', 'goto-char', 'while', 'next-double-find', '+', 'message', 'format', 'when', 'elt', 'cons', 'fol-msg']
numeral.el 7 1
  (defvar san-numeral-test-result nil)
  (defun san-numeral (num)
  CALLS: ['(not', 'numberp', 'fol-msg', 'format', 'Error', '(or', '<', '(<=', 'san-numeral-1-19', 'ans', 'elt', 'mod', '/', 'pfx', '2', '(member', '(equal', 't', 'when', '<=', '-', 'numeral-join-1-sym', 'if', 'while', 'append-if-new', '6', "'tama'", 'flatten', '=', '1+']
  (defun san-numeral-1-19 (num)
  CALLS: ['when', 'numberp', '<=', 'elt', '1-', 'turiiya', 'viMsha', 'triMsha', 'chatvaariMsha', 'pa~nchaasha', 'ShaShTa', 'saptata', 'ashiita', 'navata', 'shatama', 'dvi', 'tri', 'aShTa', 'ekona']
  (defun numeral-join-1x-sym (base-sym sup-sym)
  CALLS: ['ans', '(equal', '(listp', 'mapcar', 'lambda', 'x', 'numeral-join', 'base-tok', 'ITRANS-parse-words-1', 'symbol-name', 'if']
  (defun numeral-join-1-sym (base-sym sup-sym)
  CALLS: ['(equal', '(listp', 'mapcar', 'lambda', 'x', 'numeral-join-1-sym', 'base-tok', 'ITRANS-parse-words-1', 'symbol-name', 'numeral-join', 'sym-without-space']
  (defun numeral-join (base-tok sup)
  CALLS: ['ans', 'sandhi-pair-skiprefs-set', '(solution', 'sandhi-pair', '(and', 'arrayp', 'substring', 'ans1', 'when', '([s', '[s', 'apply', '(symbolp', 'sym-without-space', 'vector', '(arrayp', 'vconcat', 'fol-msg', 'format', 'sandhi-single']
  (defun san-numeral-test (n1 &optional n2)
  CALLS: ['i', '(not', 'numberp', '(or', '<', '(<', 'while', '<=', 'san-numeral', 'fol-msg', 'format', 'append-if-new', '1+']
  (defun answers-for-19-99 ()
  CALLS: ['san-numeral-test', '(navadashan', 'navadasha', '(viMshatiH', 'viMsha', '(ekaviMshatiH', 'ekaviMsha', '(dvaaviMshatiH', 'dvaaviMsha', '(trayoviMshatiH', 'trayoviMsha', '(chaturviMshatiH', 'chaturviMsha', '(pa~nchaviMshatiH', 'pa~nchaviMsha', '(ShaDviMshatiH', 'ShaDviMsha', '(saptaviMshatiH', 'saptaviMsha', '(aShTaaviMshatiH', 'aShTaaviMsha', '(navaviMshatiH', 'navaviMsha', '(triMshat', 'triMsha', '(ekatriMshat', 'ekatriMsha', '(dvaatriMshat', 'dvaatriMsha', '(trayastriMshat', 'trayastriMsha', '(chatustriMshat', 'chatustriMsha', '(pa~nchatriMshat', 'pa~nchatriMsha', '(ShaTTriMshat', 'ShaTTriMsha', '(saptatriMshat', 'saptatriMsha', '(aShTaatriMshat', 'aShTaatriMsha', '(navatriMshat', 'navatriMsha', '(chatvaariMshat', 'chatvaariMsha', '(ekachatvaariMshat', 'ekachatvaariMsha', '(dvichatvaariMshat', 'dvichatvaariMsha', '(trichatvaariMshat', 'trichatvaariMsha', '(chatushchatvaariMshat', 'chatushchatvaariMsha', '(pa~nchachatvaariMshat', 'pa~nchachatvaariMsha', '(ShaTchatvaariMshat', 'ShaTchatvaariMsha', '(saptachatvaariMshat', 'saptachatvaariMsha', '(aShTachatvaariMshat', 'aShTachatvaariMsha', '(navachatvaariMshat', 'navachatvaariMsha', '(pa~nchaashat', 'pa~nchaasha', '(ekapa~nchaashat', 'ekapa~nchaasha', '(dvipa~nchaashat', 'dvipa~nchaasha', '(tripa~nchaashat', 'tripa~nchaasha', '(chatuHpa~nchaashat', 'chatuHpa~nchaasha', '(pa~nchapa~nchaashat', 'pa~nchapa~nchaasha', '(ShaTpa~nchaashat', 'ShaTpa~nchaasha', '(saptapa~nchaashat', 'saptapa~nchaasha', '(aShTapa~nchaashat', 'aShTapa~nchaasha', '(navapa~nchaashat', 'navapa~nchaasha', '(ShaShTiH', 'ShaShTitama', '(ekaShaShTiH', 'ekaShaShTitama', '(dviShaShTiH', 'dviShaShTitama', '(triShaShTiH', 'triShaShTitama', '(chatuHShaShTiH', 'chatuHShaShTitama', '(pa~nchaShaShTiH', 'pa~nchaShaShTitama', '(ShaTShaShTiH', 'ShaTShaShTitama', '(saptaShaShTiH', 'saptaShaShTitama', '(aShTaShaShTiH', 'aShTaShaShTitama', '(navaShaShTiH', 'navaShaShTitama', '(saptatiH', 'saptatitama', '(ekasaptatiH', 'ekasaptatitama', '(dvisaptatiH', 'dvisaptatitama', '(trisaptatiH', 'trisaptatitama', '(chatuHsaptatiH', 'chatuHsaptatitama', '(pa~nchasaptatiH', 'pa~nchasaptatitama', '(ShaTsaptatiH', 'ShaTsaptatitama', '(saptasaptatiH', 'saptasaptatitama', '(aShTasaptatiH', 'aShTasaptatitama', '(navasaptatiH', 'navasaptatitama', '(ashiitiH', 'ashiititama', '(ekaashiitiH', 'ekaashiititama', '(dvyashiitiH', 'dvyashiititama', '(tryashiitiH', 'tryashiititama', '(chaturashiitiH', 'chaturashiititama', '(pa~nchaashiitiH', 'pa~nchaashiititama', '(ShaDashiitiH', 'ShaDashiititama', '(saptaashiitiH', 'saptaashiititama', '(aShTaashiitiH', 'aShTaashiititama', '(navaashiitiH', 'navaashiititama', '(navatiH', 'navatitama', '(ekanavatiH', 'ekanavatitama', '(dvinavatiH', 'dvinavatitama', '(triNavatiH', 'triNavatitama', '(chaturNavatiH', 'chaturNavatitama', '(pa~nchanavatiH', 'pa~nchanavatitama', '(ShaDnavatiH', 'ShaDnavatitama', '(saptanavatiH', 'saptanavatitama', '(aShTanavatiH', 'aShTanavatitama', '(navanavatiH', 'navanavatitama']
old-mw.el 33 7
  (defvar MW-orig-mwindx nil)
  (defvar MW-orig-mwtot2 nil)
  (defvar MW-dir nil)
  (defvar MW-mwindx nil)
  (defvar MW-mwtot2 nil)
  (defvar SL-mwtot2 nil)
  (defvar SL-mwindx nil)
  (defun MW-doc1 ()
  CALLS: []
  (defun MW-init ()
  CALLS: ['MW-orig-init']
  (defun MW-orig-init ()
  CALLS: []
  (defun rawindx-buffer ()
  CALLS: ['find-file-noselect']
  (defun rawtot2-buffer ()
  CALLS: ['find-file-noselect', 'find-file-literally']
  (defun SLtot2-buffer ()
  CALLS: ['find-file-noselect', 'sangram-filename']
  (defun MW-simplerIndex-explore ()
  CALLS: ['HKMW-init', 'intab', 'rawindx-buffer', 'with-current-buffer', 'fol-msg', 'format', 'point-max', 'goto-char', 'nlines', 'while', 'when', 'mod', 'message', '1+', 'point', 'end-of-line', 'buffer-substring', 'any-parse-word-string', 'elt', 'i', 'length', '<', '(equal', 'if', 'forward-line']
  (defun MW-simplerIndex-construct ()
  CALLS: ['MW-init', 'HKMW-init', 'intab', 'parse-from-to-construct', 'aset', 'rawindx-buffer', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'fol-msg', 'format', 'point-max', 'goto-char', 'nlines', 'while', 'when', 'mod', 'message', '1+', 'point', 'end-of-line', 'buffer-substring', 'forward-line', 'any-parse-word-string', 'elt', 'i', 'length', '<', '(equal', 'if', 'key', 'sym-without-space', 'insert', 'save-buffer', 'kill-buffer']
  (defun mwtot2-data (mwindx-offset)
  CALLS: ['with-current-buffer', 'c1', '1+', 'goto-char', 'end-of-line', 'buffer-substring', 'point']
  (defun MWindx-test1 (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward', '1+', 'current-line', 'when', 'forward-line', 'coffset', 'read', 'fol-msg', 'format']
  (defun MWtot2-test1 (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward', '1+', 'current-line', 'when', 'forward-line', 'fol-msg', 'format']
  (defun MWtot2-test1r (find-string &optional printrec)
  CALLS: ['bufindx', 'rawindx-buffer', 'rawtot2-buffer', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', '1+', 'when', 'mod', 'message', 'format', 'current-line', 'forward-line', 'fol-msg', '<', 'point', 'point-max', 'p1', 'match-beginning', 'match-end', 'buffer-substring']
  (defun current-line ()
  CALLS: ['p1', 'point', 'beginning-of-line', 'end-of-line', 'buffer-substring', 'goto-char']
  (defun MWtot2-char-examine ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'with-temp-buffer', 'make-vector', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', 'aset', '1+', 'aref', 'forward-char', '<', 'point', 'point-max', 'c', 'when', '+', 'fol-msg', 'format']
  (defun construct-SLmwtot2 ()
  CALLS: ['bufout', '13', '(241', '243', 'mapcar', 'apply', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'goto-char', 'while', 'char-after', '(member', 'delete-char', 'insert-char', 'plist-get', 'forward-char', '<', 'point', 'point-max', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1a (&optional tabout)
  CALLS: ['MW-init', 'HKMW-init', 'intab', 'parse-from-to-construct', 'aset', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', '"', 'concat', 'char-to-string', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'check-string-grouping', 'elt', 'fol-msg', '1+', 'count-lines', 'point-min', 'insert', 'forward-line', '<', 'point-max', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1b (&optional tabout)
  CALLS: ['MW-init', 'HKMW-init', 'intab', 'parse-from-to-construct', 'aset', 'SLtot2-buffer', '', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'erase-buffer', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', '%{[^}]*}\\\\', 'while', 'when', 'mod', 'message', 'format', 'point', 'end-of-line', 'buffer-substring', 'string-match', 'insert', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'substring', 'any-parse-word-string', 'elt', 'replace-match', 'point-min', 'point-max', '1+', 'forward-line', '<', 'fol-msg', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1 ()
  CALLS: ['MW-init', 'HKMW-init', 'intab', 'parse-from-to-construct', 'aset', 'rawindx-buffer', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', 'while', 'when', 'mod', 'message', 'format', '1+', 'fol-msg', 'point', 'end-of-line', 'buffer-substring', 'any-parse-word-string', 'elt', 'mapconcat', 'delete-region', 'insert', 'count-lines', 'point-min', 'forward-line', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'replace-match', 'current-line', '<', 'point-max', 'if', 'save-buffer', 'kill-buffer']
  (defun SLmwtot2-process-changes (taberr)
  CALLS: ['nerr', 'find-file-noselect', 'sangram-filename', 'SLtot2-buffer', 'with-current-buffer', 'sym1', 'goto-char', 'while', 'when', '=', 'mod', 'message', 'format', '1+', 'read', 'current-buffer', 'eval', 'forward-line', 'current-line', '-', 'goto-line', 'beginning-of-line', 'point', 'end-of-line', 'delete-region', 'insert', 'fol-msg', '<', 'point-max', 'if', 'save-buffer', 'kill-buffer']
  (defun modify-SLmwtot2-1a-process ()
  CALLS: ['SLmwtot2-process-changes']
  (defun SLtot2-lexical-find (lexcode)
  CALLS: ['bufindx', 'rawindx-buffer', 'SLtot2-buffer', '(equal', '[^}]*\\\\', 'concat', '%{"', 'fol-msg', 'format', 'with-current-buffer', 'goto-char', 'point-max', 'when', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', '1+', 'mod', 'message', 'c1', 'point', 'intern', 'plist-get', 'if', 'plist-put', '+', 'forward-line', 'current-line', '<', 'p1', 'ans1', 'insert', 'replace-string', 'cons', 'sort', 'lambda', 'x', 'string-lessp', 'elt']
  (defun SLtot2-first-char-examine ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'with-current-buffer', 'make-vector', 'goto-char', 'fol-msg', 'format', 'point-max', 'forward-line', 'while', '1+', 'aset', 'char-after', 'aref', 'when', '<', 'point', 'c', '+']
  (defun SLtot2-first-char-correct ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'forward-line', 'while', '1+', 'char-after', 'when', '13', 'if', 'insert-char', 'delete-char', '<', 'point']
  (defun SLtot2-string-examine ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'with-current-buffer', 'make-vector', 'goto-char', 'fol-msg', 'format', 'point-max', 'forward-line', 'while', '1+', 'aset', 'char-after', 'aref', 'when', '<', 'point', 'c', '+']
  (defun SLtot2-lexical-lines ()
  CALLS: ['buftot2', 'SLtot2-buffer', 'concat', '%{"', '[^}]*\\\\', 'fol-msg', 'format', 'with-current-buffer', 'make-vector', 'goto-char', 'point-max', 'forward-line', 'while', '1+', 'aset', 'char-after', 'aref', '<', 'point', 'c', 'when', '+', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'mod', 'message', 'c1', 'intern', 'plist-get', 'if', 'plist-put', 'current-line', 'p1', 'ans1', 'insert', 'replace-string', 'cons', 'sort', 'lambda', 'x', 'string-lessp', 'elt']
  (defun old-SLtot2-line-examine (theLine)
  CALLS: ['buftot2', 'SLtot2-buffer', 'with-current-buffer', 'goto-char', 'fol-msg', 'format', 'point-max', 'while', '1+', 'if', 'current-line', 'forward-line', '<', 'point']
  (defun SLtot2-line-examine (theLine)
  CALLS: ['buftot2', 'SLtot2-buffer', 'insert-file-contents-literally', 'sangram-filename', 'goto-char', 'point-min', 'while', 'when', 'count-lines', 'point', 'fol-msg', 'format', '=', 'mod', 'message', '1+', 'if', 'current-line', 'c1', 'end-of-line', 'forward-line', '<', 'point-max']
  (defun SLtot2-line-examinexxx (theLine)
  CALLS: ['MW-init', 'HKMW-init', 'intab', 'parse-from-to-construct', 'aset', 'rawindx-buffer', 'fileout', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'insert-file-contents-literally', 'goto-char', 'nlines', '[^}]*\\\\', 'concat', 'while', 'when', 'mod', 'message', 'format', '1+', 'fol-msg', 'point', 'end-of-line', 'buffer-substring', 'any-parse-word-string', 'elt', 'mapconcat', 'delete-region', 'insert', 'forward-line', 'search-forward-regexp', 'p1', 'match-beginning', 'match-end', 'replace-match', 'current-line', '<', 'point-max', 'if', 'save-buffer', 'kill-buffer']
  (defun check-string-grouping (s group-pairs)
  CALLS: ['insert', 'goto-char', 'check-buffer-grouping', 'point-min', 'point-max']
  (defun check-buffer-grouping (c1 c2 group-pairs)
  CALLS: ['psave', 'point', 'p', 'while', '1+', 'goto-char', 'search-forward', 'elt', 'cons', 'nreverse', 'begs', 'when', 'mapcar', 'lambda', 'x', 'fol-msg', 'format', 'length', 'apply', '1st', 'sort', '<', 'vconcat', 'check-group']
  (defun check-group (locs)
  CALLS: ['i', 'arrayp', 'length', 'while', '<', 'elt', 'if', 'cons', '1+']
  (defun correct-string-grouping (s group-pairs errlocpairs err-pairs)
  CALLS: ['ans', 'pair', 'while', 'elt', 'when', 'cons', 'sort', 'lambda', 'x', '<', 'fol-msg', 'format', 'loc', '1-', 'if', 'length', 'insert', 'goto-char', 'delete-char', '-', 'insert-string', 'buffer-substring', 'point-min', 'point-max']
  (defun old-check-group (locs)
  CALLS: ['i', 'arrayp', 'length', 'while', '<', 'elt', 'if', 'cons', '1+']
sandhi.el 80 2
  (defvar sandhi-pair-skiprefs nil)
  (defvar sandhi-n-N-ifirst nil)
  (defun external-sandhi-doc ()
  CALLS: []
  (defun anusvaara-doc ()
  CALLS: []
  (defun guna (sym)
  CALLS: ['if', 'simplevowel-P', 'sanget', 'vector']
  (defun vrddhi (sym)
  CALLS: ['sanget', 'vector', 'if', 'simplevowel-P']
  (defun vrddhi1 (sym)
  CALLS: ['sanget', 'vector']
  (defun lengthen-vowel (tok)
  CALLS: ['section', 'if', 'i', 'while']
  (defun lengthen-diphthong (tok)
  CALLS: ['(member', 'e', 'o', 't']
  (defun shorten-vowel (tok)
  CALLS: ['i', 'while', 'if']
  (defun corresponding-letter (x set1 set2)
  CALLS: ['n', 'max', 'length', 'while', '<', 'when', 'elt', '1+']
  (defun sandhi-internal-diphthong-A (tokar)
  CALLS: ['ans', 'copy-sequence', 'length', 'if', '<', 'elt', '1-', '(eq', 'aset', 'vconcat', 't']
  (defun sandhi-internal-A-simplevowel (tokar1 tokar2)
  CALLS: ['ans', 'length', '(or', '=', 'vconcat', 'elt', '1-', 'a', 'simplevowel-P', 'substring', '-', 'guna']
  (defun de-aspirate (a)
  CALLS: ['ans', '(not', 'symbolp', '(progn', 'symbol-name', '(/=', 'length', '(and', 'fol-msg', 'format', 'elt', '(equal', 'intern', 'substring', 'if']
  (defun aspirate (a)
  CALLS: ['ans', '(not', 'symbolp', '(progn', 'symbol-name', '(equal', '(or', 'sym-without-space', 'vector']
  (defun reduplicate (in &optional wparts)
  CALLS: ['tok', '(arrayp', 'reduplicate-join', 'reduplicative-pfx', '(symbolp', 'ITRANS-parse-words-1', 'symbol-name', 'when', 'arrayp', 'sym-without-space']
  (defun reduplicative-pfx (tok &optional wparts)
  CALLS: ['1', '2', '3', 'partsx', 'if', 'word-parts', 'elt', '(equal', '"CV"', 'when', '=', 'length', 'sibilant-P', 'hard-P', 'sh', 'de-aspirate', '(guttural-P', 'corresponding-letter', 'shorten-vowel', '(and', 'o', 'e', '(member', 'Ri', 'vector', '"V"', 't', 'fol-msg', 'format']
  (defun reduplicate-join (base-tok sup)
  CALLS: ['ans', 'sandhi-pair-skiprefs-set', '(member', '[s', 'vconcat', 'substring', '(solution', 'sandhi-pair', '(arrayp', '(symbolp', 'sym-without-space', 'vector', 'fol-msg', 'format', 'sandhi-n-N']
  (defun Sandhi-append (v1 v2 w1 w2 action args)
  CALLS: ['sym', 'intern', 'format', 'copy-sequence', 'sanAppendElt']
  (defun Sandhi-get (v1 v2)
  CALLS: ['sym', 'intern', 'format', 'sanget']
  (defun Sandhi-initAll ()
  CALLS: ['put']
  (defun Sandhi-initElt (prop)
  CALLS: ['sanput']
  (defun Sandhi-init ()
  CALLS: ['Sandhi-initAll', 'sandhi-init-19', 'sandhi-init-19a', 'sandhi-init-20', 'sandhi-init-21', 'sandhi-init-22', 'sandhi-init-23', 'sandhi-init-24', 'sandhi-init-24a', 'sandhi-init-25', 'sandhi-init-36', 'sandhi-init-36a', 'sandhi-visarga-init-1', 'sandhi-visarga-init-2', 'sandhi-final-r-init-1', 'sandhi-final-m-init', 'sandhi-s-Sh-init', 'sandhi-cons72-4-init', 'sandhi-cons72-6-init', 'sandhi-cons87-1-init', 'sandhi-cons87-2-init', 'sandhi-cons88-1-init', 'sandhi-cons88-1a-init', 'sandhi-cons88-1b-init', 'sandhi-cons88-2-init', 'sandhi-cons88-3-init', 'sandhi-cons88-3a-init', 'sandhi-cons88-5a-init', 'sandhi-cons88-5b-init', 'sandhi-Kale33-init', 'sandhi-Kale30-init', 'Sandhi-Inverse-init', 'Sandhi-Length-init']
  (defun Sandhi-Inverse-init ()
  CALLS: ['all', 'put', 'sangetall', 'while', 'separate-symbol-pair', 'val', 'elt', 'plist-get', '(equal', 'w', 'vconcat', 'sym-without-space', 'when', 'symbolp', 'fol-msg', 'format', '%s', 'sanAppendElt', 'intern', 't', 'warning']
  (defun Sandhi-Length-init ()
  CALLS: ['all', 'put', 'sangetall', 'while', 'separate-symbol-pair', 'tokar1', 'elt', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'val', 'sanget', 'if', '<', 'aset', 'sanput']
  (defun Sandhi-unload-old ()
  CALLS: ['all', 'sangetall', 'length', '/', 'make-vector', 'while', 'aset', '1+', 'write-table-file']
  (defun Sandhi-unload ()
  CALLS: ['all', 'sangetall', 'fileout', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'keys', 'Sandhi', 'while', 'insert', 'format', 'save-buffer', 'kill-buffer']
  (defun Sandhi-load ()
  CALLS: ['tabname', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', 'put', 'fol-msg', 'format', 'length', 'if', 'end-of-file', 'kill-buffer']
  (defun Sandhi-load-init ()
  CALLS: ['Sandhi-initAll', 'Sandhi-load', 'Sandhi-Inverse-init', 'Sandhi-Length-init']
  (defun sandhi-init-default-plist (type ref &optional condition)
  CALLS: ['if']
  (defun sandhi-init-19 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'when', 'lengthen-vowel', 'w1', 'vector', 'Sandhi-append']
  (defun sandhi-init-19a ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'Ri', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'Sandhi-append']
  (defun sandhi-init-20 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'a', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'guna', 'vector', 'Sandhi-append']
  (defun sandhi-init-21 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'a', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'lengthen-diphthong', 'Sandhi-append']
  (defun sandhi-init-22()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'when', 'a', 'lengthen-vowel', 'w1', 'vector', 'sanget', 'Sandhi-append']
  (defun sandhi-init-23()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'when', 'a', 'lengthen-vowel', 'w1', 'vector', 'shorten-vowel', 'Sandhi-append']
  (defun sandhi-init-24()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', '(equal', 'if', 'vector', 'Sandhi-append']
  (defun sandhi-init-24a()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', '(and', '(equal', 'vector', 'Sandhi-append']
  (defun sandhi-init-25()
  CALLS: ['s1', 'sandhi-init-default-plist', 'e', 'a', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'Sandhi-append']
  (defun sandhi-init-36 ()
  CALLS: ["'m'", 'I', 's1', 'sandhi-init-default-plist', 'm', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'Sandhi-append']
  (defun sandhi-init-36a ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'm', 'length', 'while', '<', 'elt', '1+', 'vector', 'when', 'nasal-P', 'semivowel-P', 'Sandhi-append']
  (defun sandhi-visarga-init-1 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'append', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', '(member', 'k', 'ch', 'T', 't', '(and', 'a', 'vowel-P', 'soft-P', 'lengthen-vowel', 'fol-msg', 'format', 'vector', 'if', 'vconcat', 'sym-without-space', 'Sandhi-append']
  (defun sandhi-visarga-init-2 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'append', 'sh', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'if', 'vconcat', 'sym-without-space', 'Sandhi-append']
  (defun sandhi-final-r-init-1 ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'append', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', '(member', 'k', 'ch', 'T', 't', '(equal', 'lengthen-vowel', '(or', 'vowel-P', 'soft-P', 'vector', 'if', 'vconcat', 'sym-without-space', 'Sandhi-append']
  (defun sandhi-final-m-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'append', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', 'Sandhi-append']
  (defun sandhi-s-Sh-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'append', 'k', 't', 'length', 'while', '<', 'elt', '1+', 'when', 'a', 'w1', 'vector', '(equal', 'sym-without-space', 'Sandhi-append']
  (defun sandhi-cons72-4-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'append', 'length', 'while', '<', 'elt', '1+', 'when', 'w1', 'vector', '1-', 'if', 'vowel-P', 'semivowel-P', 'progn', 'Sandhi-append']
  (defun sandhi-cons72-6-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'w1', 'if', 't', 'softaspirate-P', 'vector', '1-', 'so', 'eq', 'Sandhi-append', 'gh', 'g', 'x', 'when']
  (defun sandhi-cons87-1-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'vector', 'n', 'sym-without-space', 'Sandhi-append']
  (defun sandhi-cons87-2-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-1-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-1a-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-1b-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-2-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'Sandhi-append']
  (defun sandhi-cons88-3-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-3a-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-5a-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-cons88-5b-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'length', 'while', '<', 'elt', '1+', 'vector', 'vconcat', 'Sandhi-append']
  (defun sandhi-Kale33-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-Kale30-init ()
  CALLS: ['s1', 'sandhi-init-default-plist', 'plist-put', 'y', 'length', 'while', '<', 'elt', '1+', 'vector', 'Sandhi-append']
  (defun sandhi-n-N-ifirst-set (ifirst)
  CALLS: []
  (defun sandhi-n-N (tokar-in)
  CALLS: ['tokar', 'if', 'copy-sequence', 'length', 'while', '<', 'elt', '1+', 'when', 'Ri', 'fol-msg', 'format', '1-', 'x3', 'vowel-P', 'n', 'y', 'guttural-P', 'labial-P', '<=', 'aset']
  (defun separate-symbol-pair (sympair &optional pairsep-str)
  CALLS: ['s', 'if', 'symbol-name', 'string-match', 'substring', '1+', 'intern', 'vector', 't']
  (defun sandhi-pair-skiprefs-set (new)
  CALLS: []
  (defun sandhi-pair-main (tokar1 tokar2 n1 n2 v1 v2 x1 x2 condition action)
  CALLS: ['ans', 'Sandhi-get', 'fol-msg', 'format', 'while', 'val', 'elt', 'plist-get', '(member', '(not', '(equal', 'vconcat', 't', 'when', 'if', 'append']
  (defun sandhi-pair (t1 t2  condition action)
  CALLS: ['ans', 'if', '(and', 'vectorp', 'symbolp', 'ITRANS-parse-words-1', 'symbol-name', 't', 'length', '<', 'lens', 'elt', 'fol-msg', 'format', 'sanget', 'while', '<=', '-', '1+', 'substring', 'when', 'sym-without-space', 'sandhi-pair-main', 'mapcar', 'lambda', 'thisans1', 'append', '(not', '(equal']
  (defun sandhi-one-final-cons (tokar)
  CALLS: ['ans', 'length', '<', 'while', '1-', 'elt', 'if', 'consonant-P', '(not', '(=', 't', '+', 'substring']
  (defun sandhi-legalise-final-cons (tokar)
  CALLS: ['ans', 'sandhi-one-final-cons', 'substring', 'fol-msg', 'format', 'elt', '(not', 'consonant-P', '(member', 'k', 's', 'vconcat', '(or', 'palatal-P', '(guttural-P', '(cerebral-P', '(dental-P', '(labial-P', 'if']
  (defun sandhi-single-main (tokar1 condition)
  CALLS: ['if', '<', 'length', 'n1', 'sandhi-n-N', 'copy-sequence', 'tok1', 'sandhi-one-final-cons', 'when', 'elt', '1-', 'substring', '-', '(equal', 'vconcat', 't']
  (defun sandhi-single (t1 &rest args)
  CALLS: ['if', 'ans', 'elt', '(vectorp', '(symbolp', 'ITRANS-parse-words-1', 'symbol-name', 't', 'condition-case', 'sandhi-single-main', 'fol-msg', 'format', 'error', '(equal', 'mapcar', 'sym-without-space']
  (defun sandhi-avagraha-separate (tokar)
  CALLS: ['n', 'length', 'while', '<', 'elt', '1+', 'if', '=', '(equal', 'vconcat', '(and', 'vector', 't']
  (defun sandhi-avagraha-separate-test (sym1)
  CALLS: ['tokar1', 'ITRANS-parse-words-1', 'symbol-name', 'sandhi-avagraha-separate', 'fol-msg', 'format', 'mapcar']
  (defun sandhi-separate (symin)
  CALLS: ['03-15-03', '1', '...', '2', '03-31-03', 'ans', 'sandhi-separate-main', 'while', 'ITRANS-parse-words-1', 'symbol-name', 'elt', 'when', 'consonant-P', 'substring', 'solution', 'sandhi-separate2', 'if', 'append-if-new']
  (defun sandhi-separate-str (s1)
  CALLS: ['symin1', 'sym-without-space', 'intern-soft', 'when', 'sandhi-separate']
  (defun sandhi-separate-main (symin)
  CALLS: ['tokar', 'ITRANS-parse-words-1', 'symbol-name', 'length', 'if', 'numberp', '<=', 'while', '<', 'j', '+', 'substring', 'sym-without-space', 'sanget', 'fol-msg', 'format', 'when', 'parse', 'vector', 'append', 'a', 'otherwise', 'b', 'c', 'elt', 'chi', 'vconcat', '(and', '06-09-03', 'vowel-P', '-', '=', 'consonant-P', 'AntoineI', '1+']
  (defun sandhi-separate2 (symin1 symin2 &optional optional)
  CALLS: ['tokar1', 'ITRANS-parse-words-1', 'symbol-name', 'length', '11-29-02', '(equal', 'vector', '02-15-03', '(and', '<=', 'substring', 'tmp', 'vconcat', 'sym-without-space', 'while', '<', 'j1', '-', 'when', 'intern', 'format', 'sanget', 'parse', 'elt', 'if', 'sandhi-pair', 'lambda', 'check', 'praatar-modify', 'append-if-new', 'append', '1+']
  (defun sandhi-separate2-str (s1 s2 &optional optional)
  CALLS: ['symin1', 'sym-without-space', 'sandhi-separate2']
  (defun sandhi-separate-final-M (symin1)
  CALLS: ['tokar1', 'ITRANS-parse-words-1', 'symbol-name', '1-', 'length', 'when', 'elt', 'aset', 'sym-without-space']
  (defun sandhi-separate-final-r (symin1)
  CALLS: ['tokar1', 'ITRANS-parse-words-1', 'symbol-name', '1-', 'length', 'praatar-modify', 'when', 'elt', 'aset', 'sym-without-space']
  (defun sandhi-separate3-str (string &optional optional)
  CALLS: ['if', 'stringp', 'fol-msg', 'format', 'prevans', 'vconcat', 'mapcar', 'word-list', 'length', '1-', 'make-vector', 'aset', 'sandhi-separate-final-r', 'elt', 'while', '<', 'w1', 'apply', 'lambda', 'w2', 'ans1', 'sandhi-separate2', 'when', 'ok', 'x', 'sandhi-pair', 'praatar-modify', 'x1', 'append', '%s', '1+']
  (defun examine-Sandhi-Inverse-nojoin ()
  CALLS: ['all', 'sangetall', 'while', '[s1', 'val', 'separate-symbol-pair', 'when', 'elt', 'fol-msg', 'format', 'if']
  (defun gunate-final-vowel (tok &optional vrddhiP parts)
  CALLS: ['ans', 'so', 'if', 'word-parts', '(equal', 'substring', 'elt', 'part1', 'guna', 'vrddhi', 'vectorp', 'vector', 'vconcat', 'flatten', 'when', '=', 'length', 'shortsimplevowel-P', 't']
start.el 21 6
  (defvar san-tables-dir "grammar/tables/")
  (defvar san-validation-dir "grammar/validation/")
  (defvar san-explain-dir "grammar/explain/")
  (defvar fol-ob nil "the 'obarray' for fol")
  (defvar fol-read-err nil)
  (defvar fol-msg-buffer "*scratch*")
  (defun fol-msg (&rest s)
  CALLS: ['with-current-buffer', 'apply']
  (defun ejf-frames (&optional n)
  CALLS: ['i', 'if', '<', 'while', '1+', 'make-frame-command', 'set-frame-height', 'set-frame-position', '*']
  (defun sangram-filename (arg  gramdir)
  CALLS: ['ans', 'concat', 'fol-filename', 'symbolp', '(symbolp', 'symbol-name', '(stringp', 't', 'if', 'expand-file-name', 'when', 'fol-msg', 'format']
  (defun sangram-buffer (arg gramdir)
  CALLS: ['file', 'sangram-filename', 'find-file-noselect']
  (defun san-tables-filename (arg)
  CALLS: ['sangram-filename']
  (defun san-validation-filename (arg)
  CALLS: ['sangram-filename']
  (defun string-endswith-p (s ending)
  CALLS: ['when', 'stringp', '<=', 'length', 'string=', 'substring', '-']
  (defun fol-filename (arg)
  CALLS: ['ans', 'symbolp', '(symbolp', 'symbol-name', '(stringp', 't', 'expand-file-name', 'if', 'when', 'fol-msg', 'format']
  (defun fol-files-verify-dir (dirin &optional endingsin)
  CALLS: ['ans', 'if', '""', 'file-name-as-directory', 'fol-filename', 'directory-files', 'while', 'when', 'string-endswith-p', '1+', 'cons']
  (defun san-search-dir (dir changes &optional all)
  CALLS: ['files', 'file-name-as-directory', '".el"', 'fol-files-verify-dir', 'while', 'concat', 'fol-filename', 'fol-msg', 'format', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'search-forward', 'p1', 'beginning-of-line', 'point', 'end-of-line', 'when', 'point-max', 'kill-buffer']
  (defun fol-ob-init ()
  CALLS: ['make-vector', 'e.g.,']
  (defun fol-read (s)
  CALLS: ['x', 'condition-case', 'read', 'xx', 'with-current-buffer', 'point', 'fol-msg', 'format']
  (defun my-load-library (s &optional skip-flag)
  CALLS: ['message', 'format', 'if', 'load-library', 'fol-filename', 'fol-msg', 'skip-flag']
  (defun sanload ()
  CALLS: ['interactive', 'my-load-library']
  (defun my-byte-compile-file (s)
  CALLS: ['byte-compile-file', 'fol-filename']
  (defun sancompile ()
  CALLS: ['interactive', 'my-byte-compile-file']
  (defun sangram-size ()
  CALLS: ['OBARRAY', 'if', 'mapatoms', 'lambda', 'sym', 'sangetall', 'when', 'length', 'format', '+', '1+', 'Xsangetall']
  (defun sangram-save (&optional outtab outdir)
  CALLS: ['OBARRAY', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'erase-buffer', 'mapatoms', 'lambda', 'sym', 'sangetall', 'when', 'length', 'format', '+', '1+', 'insert', 'Xsangetall', 'save-buffer', 'kill-buffer']
  (defun sangram-restore (&optional tabname dirname)
  CALLS: ['init-Sangram', 'filename', 'if', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', '(not', 'symbolp', 'fol-msg', 'format', '1+', '(equal', 'put', 'end-of-file', 'kill-buffer']
  (defun init-sanskrit1 (&optional options)
  CALLS: ['fol-msg', 'format', 'current-time-string', 'construct-init', 'MW-init', 'message', 'load-construct-all', 'init-gender-form-data', 'init-avyayapada-data', 'init-explain-forms']
  (defun sansession1 ()
  CALLS: ['interactive', 'x', 'read-string', 'when', '<', 'length', 'fol-msg', 'format', 'sanload', 'init-sanskrit1', 'ejf-frames', 'find-file', 'fol-filename', 'outline-mode', 'hide-sublevels', 'sansession1']
sxmw.el 27 0
  (defun my-forward-sexp (bound begexp endexp)
  CALLS: ['ans', 'check-buffer-grouping', 'point', 'when', 'elt', 'fol-msg', 'format', 'sort', 'lambda', 'x', '<', '-', 'length']
  (defun mw (key &optional full noprflag)
  CALLS: ['ans', 'insert', 'goto-char', 'while', 'search-forward-regexp', 'replace-match', 'current-line', 'MW-key-find', 'mw-helper']
  (defun mw-alt (key &optional full noprflag)
  CALLS: ['bufin', 'find-file-noselect', 'sangram-filename', 'MW-key-find', 'fol-msg', 'format', 'if', 'mw-helper']
  (defun mw-helper (ans1 &optional full noprflag)
  CALLS: ['ans', 'while', 'tmp', 'elt', 'cons', 'format', 'if', 'mw-help1-string', 'nreverse', 'when', 'mapcar', 'lambda', 'x', 'fol-msg']
  (defun mw-help1-string (sin)
  CALLS: ['ans', 'insert', 'goto-char', 'while', 'my-forward-sexp', 'point-max', '"', 'delete-region', 'elt', 'fol-msg', 'format', 'buffer-substring', 'if', 'search-forward-regexp', '[^=>]+\\\\', '[^>]+\\\\', 'key', 'match-beginning', 'match-end', 'intern-soft', 'fboundp', 'funcall', 'when', 'key/parm', 'point-min']
  (defun mw-tag-AB (parm)
  CALLS: ['ans', 'format', 'concat', '.+\\\\', 'with-current-buffer', 'find-file-noselect', 'sangram-filename', 'goto-char', 'if', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'upcase']
  (defun mw-tag-LEX (parm)
  CALLS: ['ans', 'format']
  (defun mw-tag-KEY (parm)
  CALLS: ['ans', 'format']
  (defun mw-tag-Q (parm)
  CALLS: ['ans', 'format']
  (defun mw-tag-C (parm)
  CALLS: ['ans', 'upcase']
  (defun mw-tag-BIO (parm)
  CALLS: ['ans', 'insert', 'goto-char', 'while', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'match-end', 'concat', 'upcase']
  (defun mw-tag-BOT (parm)
  CALLS: ['mw-tag-BIO']
  (defun mw-tag-V (parm)
  CALLS: ['(equal', 't']
  (defun sx2 (s)
  CALLS: ['Sx2']
  (defun Sx2 (s)
  CALLS: ['ans', 'length', '1+', 'while', '<', 'substring', 'when', 'fol-msg', 'format', 'Sx2-pfx', 'tab', 'Sx2-forms', 'append']
  (defun Sx2-forms (sin tab)
  CALLS: ['bufin', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'format', 'when', 'fol-msg', 'while', 'search-forward-regexp', 'fs', 'beginning-of-line', 'buffer-substring', 'point', '1+', 'Sx2-forms-helper', 'current-line', 'elt', 'concat', 'cons', 'forward-line', 'kill-buffer']
  (defun Sx2-forms-helper (sin line)
  CALLS: ['ans', 'gen-word-list', 'elt', 'substring', 'parse-string-to-array', 'when', '[gopayati', 'new', 'while', 'join-arrays', 'fol-msg', 'format', 'Sx2-extract-formtype', 'length', '<', '(equal', 'sym-without-space', 'symbol-name', 'if', 'concat', 'downcase', '1+', 'goto-char', 'search-forward-regexp', '[a-zA-Z]+\\\\', 'buffer-substring', 'match-beginning', 'match-end', '(not', '%s', 't']
  (defun Sx2-updateans (ans word parms ans1 dict)
  CALLS: ['thisans', 'while', 'cons']
  (defun Sx2-tabmatch (s tab inflection)
  CALLS: ['fol-msg', 'format', 'ans', 'length', 'while', '<', 'elt', 'if', 'mapcar', 'lambda', 'sym2', 'symbolp', 'when', 'symbol-name', '(equal', 'sym-without-space', 'cons', '1+']
  (defun Sx2-pfx (pfx)
  CALLS: ['ans', 'while', 'Sx2-pfxa']
  (defun Sx2-pfxa (pfx filename ans)
  CALLS: ['bufin', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'format', 'when', 'search-forward-regexp', 'p0', 'beginning-of-line', 'point', 'while', 'end-of-line', 'if', 'tab', 'buffer-substring', 'cons', 'forward-line']
  (defun Sx2-endmatch (regexp &optional bufin)
  CALLS: ['ans', 'if', 'find-file-noselect', 'sangram-filename', 'with-current-buffer', 'goto-char', 'while', 'search-forward-regexp', 'read', 'current-buffer', 'cons']
  (defun Sx2-extract-formtype (form)
  CALLS: ['ans', 'word-list', 'elt', 'if', '"c"', '<', 'length', '(equal', '(member', '"pre"', '"ppp"', '"i"', 'fol-msg', 'format']
  (defun sxmw (str &optional noprflag)
  CALLS: ['ans', 'Sx2', 'lambda', 'sx', 'words', 'gen-word-list', 'elt', 'root', ']"', 'append', 'while', 'when', '<', 'length', 'cons', 'nreverse', 'citation', 'mw', 'fixed', 'thisans', 'mw-alt', 'x', 'as', 'apply', 'if']
  (defun sxmwpr (str sxlist mwlist)
  CALLS: ['i', 'fol-msg', 'format', 'Sx2', 'length', 'while', '<', '1+', 'elt', 'mw', 'if', 'mod', '/']
  (defun sxmw-Mbh-verse (verse)
  CALLS: ['words', 'Mbh-verse', 'fol-msg', 'format', 'sxmw-Mbh-verse', 'mapcar', 'lambda', 'x']
  (defun sxmw-Mbh-verses (verse1 verse2)
  CALLS: ['verse', 'while', '<=', 'sxmw-Mbh-verse', '1+']
validation.el 80 3
  (defvar SL-dtab-directory "SL/dtabs")
  (defvar SL-dtab-tabnames nil)
  (defvar SL-ITRANS-genders '(m M f F n N)
  (defun validation (vfile)
  CALLS: ['ans', 'read-colon-file-validation', 'fol-msg', 'format', 'san-validation-filename', 'length', 'while', '1+', 'elt', 'substring', 'append', 'apply', 'condition-case', '%s', 'solution', 'when', '<', 'if']
  (defun 1cons-chk (sym &optional case-numbers)
  CALLS: ['declension', 'if', '(1', '3', '7', 'elt', 'declension-citation', 'lambda', 'case-number', '+', '*', '1-']
  (defun 1cons-chk-pr (sym &optional case-numbers)
  CALLS: ['vals', '1cons-chk', 'fol-msg', 'format']
  (defun 1cons-chk-pr-all ()
  CALLS: ['mapcar', 'vaach', '1cons-chk-pr']
  (defun validation-all (&optional files)
  CALLS: ['file', 'if', 'while', 'message', 'validation']
  (defun validation-deshpande-all (&optional files)
  CALLS: ['file', 'if', '3S', 'while', 'concat', 'message', 'validation']
  (defun liT-r (dhaatu pada &optional upa-syms voice)
  CALLS: ['class', 'get-classes', 'conjugation-tab-liT-r']
  (defun get-classes (dhaatu pada upa-syms)
  CALLS: ['forms', 'sanget2', 'dhaatu', 'while', 'sym-dcpu', 'when', 'elt', 'append-if-new']
  (defun liT-px (dhaatu class pada sfx-dhaatu &optional upa-syms voice)
  CALLS: ['conjugation-tab-liT-px', 'defun', 'upa-syms', 'if', 'ans', 'conjugation-tab-liT-p', '(equal', 'when', 'length', 'make-vector', 'while', '<', 'aset', 'elt', '1+', 'in']
  (defun luT (dhaatu class pada &optional upa-syms)
  CALLS: ['conjugation-tab-luT']
  (defun lRiT (dhaatu class pada &optional upa-syms isub)
  CALLS: ['ans', 'conjugation-tab-lRiT', 'if', 'numberp', '<=', '<', 'length', 'elt']
  (defun lRi~N (dhaatu class pada &optional upa-syms)
  CALLS: ['conjugation-tab-lRi~N']
  (defun ffc (dhaatu class pada &optional upa-syms)
  CALLS: ['ans1', 'luT', 'lRiT', 'lRi~N', 'vector', 'elt']
  (defun aashiirli~N (dhaatu class pada &optional upa-syms)
  CALLS: ['conjugation-tab-aashiirli~N']
  (defun aashiirli~N1 (dhaatu class pada &optional upa-syms)
  CALLS: ['elt', 'conjugation-tab-aashiirli~N']
  (defun futpass (dhaatu class pada &optional upa-syms)
  CALLS: ['ans1', 'luT', 'lRiT', 'lRi~N', 'aashiirli~N', 'vector', 'elt']
  (defun aorist1 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist2 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist2a (dhaatu class pada &optional upa-syms voice)
  CALLS: ['ctab', 'conjugation-tab-aorist', 'elt']
  (defun aorist3 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist3a (dhaatu class pada &optional upa-syms voice)
  CALLS: ['ctab', 'conjugation-tab-aorist', 'elt']
  (defun causal (dhaatu class &optional pada upa-syms def)
  CALLS: ['ans1', 'when', 'mapcar', 'solution']
  (defun aorist6 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist6a (dhaatu class pada &optional upa-syms voice)
  CALLS: ['ctab', 'conjugation-tab-aorist', 'elt']
  (defun aorist7 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist7a (dhaatu class pada &optional upa-syms voice)
  CALLS: ['ctab', 'conjugation-tab-aorist', 'elt']
  (defun aorist4 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist4a (dhaatu class pada &optional upa-syms isub voice)
  CALLS: ['ctab', 'fol-msg', 'format', '%s', 'numberp', '(numberp', 't', 'conjugation-tab-aorist', 'elt']
  (defun aorist5 (dhaatu class pada &optional upa-syms voice)
  CALLS: ['conjugation-tab-aorist']
  (defun aorist5a (dhaatu class pada &optional upa-syms isub voice)
  CALLS: ['ctab', 'fol-msg', 'format', '%s', 'numberp', '(numberp', 't', 'conjugation-tab-aorist', 'elt']
  (defun aorista (iaorist dhaatu class pada &optional upa-syms isub voice)
  CALLS: ['ctab', 'fol-msg', 'format', '%s', 'numberp', '(numberp', 't', 'conjugation-tab-aorist', 'elt']
  (defun aoristP (iaorist dhaatu class pada &optional upa-syms isub)
  CALLS: ['aorista']
  (defun aoristP0 (dhaatu class pada &optional upa-syms)
  CALLS: ['varieties', 'aorist-varieties', 'while', 'aoristP', 'append-if-new', 'solution']
  (defun aoristP0-make ()
  CALLS: ['tabname', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', 'if', 'end-of-file', 'fol-msg', 'format', 'dhaatu', 'sym-dcpu', 'elt', 'aoristP0', 'kill-buffer']
  (defun aoristP1 (dhaatu class pada &optional upa-syms)
  CALLS: ['varieties', 'aorist-varieties', 'while', 'aoristP', 'conjugation-tab-aorist', 'elt', 'append-if-new', 'solution']
  (defun aoristP1-make ()
  CALLS: ['tabname', 'sangram-filename', 'find-file-noselect', 'with-current-buffer', 'goto-char', 'point-min', 'while', 'condition-case', 'read', 'if', 'end-of-file', 'fol-msg', 'format', 'dhaatu', 'sym-dcpu', 'elt', 'aoristP1', 'kill-buffer']
  (defun conjpass (dhaatu &optional class pada upa-syms)
  CALLS: ['construct-conjpassbase1a']
  (defun kta (dhaatu &optional class pada upa-syms)
  CALLS: ['', 'construct-pppart1a']
  (defun tvaa (dhaatu &optional class pada upa-syms)
  CALLS: ['', 'construct-ippart1a-tvaa']
  (defun lyap (dhaatu &optional class pada upa-syms)
  CALLS: ['', 'construct-ippart1a-ya']
  (defun seT (dhaatu &optional class pada upasargas)
  CALLS: ['construct-seT-code1a']
  (defun inf (dhaatu class pada &optional upa-syms)
  CALLS: ['', 'construct-inf1a']
  (defun tavya (dhaatu class &optional pada upa-syms)
  CALLS: ['', 'construct-potpart1a-tavya']
  (defun aniiya (dhaatu class &optional pada upa-syms)
  CALLS: ['', 'construct-potpart1a-aniiya']
  (defun yat (dhaatu class &optional pada upa-syms)
  CALLS: ['', 'construct-potpart1a-yat']
  (defun kyap (dhaatu &optional class pada upa-syms)
  CALLS: ['', 'construct-potpart1a-kyap']
  (defun Nyat (dhaatu &optional class pada upa-syms)
  CALLS: ['', 'construct-potpart1a-Nyat']
  (defun rpp (dhaatu class pada &optional upa-syms)
  CALLS: ['ans1', 'construct-rppart1b', 'solution']
  (defun perpp (dhaatu class pada &optional upa-syms)
  CALLS: ['ans1', 'construct-perppart1a', 'solution', 'lambda', 'x', 'if']
  (defun futpart (dhaatu class &optional upa-syms)
  CALLS: ['ans1', 'construct-futpart1a', 'construct-futppart1a', 'mapcar', 'lambda', 'x', 'sym-concat', 'solution']
  (defun laT (dhaatu class pada  &optional upa-syms isub voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'solution', 'if', 'elt']
  (defun la~N (dhaatu class pada  &optional upa-syms isub voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'solution', 'if', 'elt']
  (defun loT (dhaatu class pada  &optional upa-syms isub voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'solution', 'if', 'elt']
  (defun vidhili~N (dhaatu class pada  &optional upa-syms isub voice)
  CALLS: ['ctab', 'construct-conjtab1a', 'solution', 'if', 'elt']
  (defun prespart (dhaatu class pada  gender &optional upa-syms isub)
  CALLS: ['dtab', 'construct-prespart1a-alt', 'plist-get', 'if', 'elt']
  (defun Vdecl (citation gen-or-mtype form &optional gender)
  CALLS: ['ans', 'construct-subanta1', '(subanta-type', 'M', 'when', 'plist-get', 'elt']
  (defun SL-dtab-extract (subanta form gender)
  CALLS: ['SL-dtab-extract1', 'format']
  (defun SL-dtab-extract1 (tabname)
  CALLS: ['filename', 'if', 'sangram-filename', 'file-exists-p', 'SL-dtab-extract2']
  (defun SL-dtab-extract2 (filename)
  CALLS: ['buf', 'make-vector', 'find-file-noselect', 'with-current-buffer', 'insert-file-contents', 'goto-char', 'point-min', 'replace-string', 'anytxt', '[a-zA-Z0-9/]+\\\\', '[a-zA-Z0-9/]*\\\\', 'concat', 'fol-msg', 'format', 'while', '<=', 'search-forward-regexp', 'buffer-substring', 'match-beginning', 'point', 'i', 'match-end', 'if', 'aset', '1-', '1+', 'kill-buffer']
  (defun init-SL-dtab-tabnames ()
  CALLS: ['m', 'noun']
  (defun SL-dtab-construct (SL-subanta SL-form SL-gender)
  CALLS: ['ans', 'SL-construct-subanta1a', 'if', 'tmp', 'mapcar-LE', 'lambda', 'irow', '(equal', 't', '1-', 'format', '1+', '*', '+', 'vconcat', 'vector', 'substring', '0']
  (defun SL-construct-subanta1a (SL-subanta SL-form SL-gender)
  CALLS: ['ans', 'if', 'stringp', 'intern', 's', 'insert', 'symbol-name', 'goto-char', 'replace-string', 're-search-forward', 'replace-match', 'buffer-substring', 'point-min', 'point-max', 'translate-SLP1-ITRANS', 'plist-get', '(member', 'prap1', 'construct-prap', 'construct-subanta1a', 'translate-ITRANS-SLP1', 'when', 'fol-msg', 'format']
  (defun construct-prap-base (subanta form gender)
  CALLS: ['Kale#116,', 'strong', '(and', 'M', 'tok', 'ITRANS-parse-words-1', 'symbol-name', 'vconcat', 'substring', 'sym-without-space', '(equal']
  (defun construct-prap (subanta form gender)
  CALLS: ['praatipadikas', 'construct-prap-base', 'declension-pres-part-P']
  (defun SL-dtab-validate-one (subanta form gender)
  CALLS: ['ans', 'SL-dtab-extract', 'SL-dtab-construct', 'format', 'when', 'fol-msg']
  (defun SL-dtab-validate-one-compare (title id1 dtab1 id2 dtab2)
  CALLS: ['ans', 'when', 'fol-msg', 'format', 'n', 'length', 'while', '<', 'elt', '1+', 'SL-dtab-validate-one-elt', '%s%s', 'if']
  (defun SL-dtab-validate-one-elt (e c)
  CALLS: ['e1', 'if', 'copy-sequence', 'SL-list', 'sort']
  (defun SL-list (s)
  CALLS: ['"xxx"', 'ans', 'insert', 'goto-char', 'while', 'search-forward', 'match-beginning', 'buffer-substring', 'append', 'match-end', 'point-max']
  (defun SL-dtab-validation (vfile)
  CALLS: ['ans', 'read-colon-file-validation', 'fol-msg', 'format', 'san-validation-filename', 'length', 'while', '1+', 'elt', 'condition-case', 'apply', '%s', 'solution', 'when', '<', 'if']
  (defun SL-dtab-validation-all (&optional files)
  CALLS: ['file', 'if', 'while', 'message', 'SL-dtab-validation']
  (defun SL-dtab-input-suggest (&optional files)
  CALLS: ['file', 'if', 'directory-files', 'file-name-as-directory', 'sangram-filename', '[a-zA-Z0-9]+\\\\', 'format', 'while', 'insert', 'goto-char', 'point-min', 'when', 'search-forward-regexp', 'make-vector', '<=', 'match-beginning', 'match-end', 'fol-msg', 'buffer-substring', 'aset', '1-', '1+', 'elt']
  (defun SL-dtab-printfile (vfile preproc)
  CALLS: ['ans', 'read-colon-file-validation', 'fol-msg', 'format', 'san-validation-filename', 'length', '(equal', 'while', '1+', 'elt', 'condition-case', 'apply', '%s', 'solution', 'when', '<', 'if']
  (defun SL-dtab-print-one-construct (subanta form gender)
  CALLS: ['dtab', 'SL-dtab-construct', 'format', 'fol-msg', 'SL-dtab-print']
  (defun SL-dtab-print-one-extract (subanta form gender)
  CALLS: ['dtab', 'SL-dtab-extract', 'format', 'fol-msg', 'SL-dtab-print']
  (defun SL-dtabs1-make ()
  CALLS: ['bufin-c', 'dirname', 'sangram-filename', 'read-colon-file', 'find-file-noselect', 'read-colon-buffer', 'fol-msg', 'format', 'length', 'with-current-buffer', 'erase-buffer', 'while', 'd', 'load', 'elt', 'when', '1+', 'praTama', 'nayat', 'subanta', '(equal', 'prap', '%s', '', 'insert', 'cdata', 'n', 'message', '+', '*', '1-', '<=', '1', 'devaH', 'devO', 'devAH', 'lambda', 'x', 'if', 'anytxt', 'solution', 'concat', 'save-buffer', 'kill-buffer']
  (defun SL-dtest-validation (vfile)
  CALLS: ['dir', 'SL-dtab-validation']
  (defun SL-extract-compare-dtabs-dtabs1-one (subanta form gender)
  CALLS: ['ans', 'SL-dtab-extract', 'format', 'if', 'when', 'fol-msg']
  (defun SL-extract-compare-dtabs-dtabs1 (vfile)
  CALLS: ['ans', 'read-colon-file-validation', 'fol-msg', 'format', 'san-validation-filename', 'length', 'while', '1+', 'elt', 'condition-case', 'apply', '%s', 'solution', 'when', 'append', '<', 'lambda', 'y', 'x', 'if']
  (defun SL-extract-copy-dtabs1-dtabs (vfile)
  CALLS: ['ans', 'read-colon-file-validation', 'fol-msg', 'format', 'san-validation-filename', 'length', 'while', '1+', 'subanta', 'elt', 'sangram-filename', 'when', 'file-exists-p', 'find-file-noselect', 'with-current-buffer', 'insert', 'insert-file-contents', 'save-buffer', 'kill-buffer']
  (defun SL-dtab-print (tab)
  CALLS: ['mapcar', 'lambda', 'r', 'y', 'mapconcat', 'x', 'format', 'fol-msg']
vt01.el 8 0
  (defun vt01-read ()
  CALLS: ['fn', 'fol-filename', 'insert-file-contents', 'goto-char', 'while', 'search-forward', 'replace-match', '<', 'point', 'point-max', 'fol-msg', 'format', 'read', 'current-buffer', 'append', 'forward-line']
  (defun vt01-act1 (vtab)
  CALLS: ['ans', 'while', 'fol-msg', 'format', 'eq', 'append', '1+', 'when']
  (defun vt01-check ()
  CALLS: ['n', 'vt01-read', 'vt01-act1', 'nth', 'length', 'fol-msg', 'format', 'while', '<', 'when', '=', '1+', 'if']
  (defun vt01-propnames ()
  CALLS: ['x', '(root', 'conj', 'meaning', 'pres-3s-P', 'pres-3s-A', 'pres-pass-3s', 'perf-3s', 'fut-3s', 'caus-pres-3s', 'desid-3s', 'pot-pass-part', 'perf-pass-part', 'ind-past-part', 'ind-past-part-pfx', 'inf', 'mapcar', 'vconcat']
  (defun vt01-putrec (sym parr rec)
  CALLS: ['vrec', 'vconcat', 'length', 'while', '<', 'put', 'elt', '1+']
  (defun vt01-act2 ()
  CALLS: ['vtab', 'vt01-read', 'vt01-act1', 'vt01-propnames', 'while', 'vt01-putrec', 'dhaatu', 'get', 'mapconcat', 'if', 'eq', 'elt', '(and', 'append', 'fol-msg', 'format']
  (defun vt01-act3 ()
  CALLS: ['vtab', 'vt01-read', 'vt01-act1', 'vt01-propnames', 'while', 'vt01-putrec', 'dhaatulist', 'get', 'if', '=', 'length', 'fol-msg', 'format', 'mapconcat', 'eq', 'elt', '(and', 'append']
  (defun vt01-act4 (prop)
  CALLS: ['vtab', 'vt01-read', 'vt01-act1', 'vt01-propnames', 'while', 'vt01-putrec', 'dhaatulist', 'get', 'if', '=', 'length', 'fol-msg', 'format', '(not', 'sym-with-space', 'vconcat']
