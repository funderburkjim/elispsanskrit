aorist.el 68 6
  (defvar aorist-tok ETC)
  (defvar aorist-id ETC)
  (defvar aorist-voice ETC)
  (defvar aorist-passive-P ETC)
  (defvar aorist-sym ETC)
  (defvar aorist-pada ETC)
  (defun aorist-doc ()
  (defun aorist1-doc ()
  (defun aorist2-doc ()
  (defun aorist3-doc ()
  (defun aorist6-doc ()
  (defun aorist7-doc ()
  (defun aorist4-doc ()
  (defun aorist5-doc ()
  (defun aorist-passive-doc ()
  (defun aorist-Deshpande-doc ()
  (defun aorist-varieties (dhaatu class pada upasargas)
  (defun aorist-1-P (dhaatu class pada upasargas)
  (defun kale-459-P (dhaatu class &optional pada tok)
  (defun aorist-2-P (dhaatu class pada upasargas)
  (defun aorist-2-542-P (dhaatu class pada upasargas)
  (defun aorist-2-543-P (dhaatu class pada upasargas)
  (defun aorist-2-544-P (dhaatu class pada upasargas)
  (defun aorist-3-P (dhaatu class pada upasargas)
  (defun aorist-6-P (dhaatu class pada upasargas)
  (defun aorist-7-P (dhaatu class pada upasargas)
  (defun aorist-4-P (dhaatu class pada upasargas)
  (defun aorist-5-P (dhaatu class pada upasargas)
  (defun aorist (dhaatu class pada &optional upasargas voice)
  (defun conjugation-tab-aorist (upasargas class pada dhaatu &optional variety voice)
  (defun conjugation-tab-aorist1 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist1-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun conjugation-tab-aorist2 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist2-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun conjugation-tab-aorist3 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist3-main (upasargas class pada dhaatux &optional seTCode i-insert)
  (defun aorist3-make-btab (b1 endings)
  (defun conjugation-tab-aorist6 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist6-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun conjugation-tab-aorist7 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist7-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun conjugation-tab-aorist4 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist4-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun conjugation-tab-aorist5 (upasargas class pada dhaatu)
  (defun conjugation-tab-aorist5-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun aorist-passive-3S (upasargas class pada dhaatu)
  (defun aorist-bitab (btab itab)
  (defun aorist-bitab-join (bitab endings dhaatu strengths i-insert)
  (defun aorist-join (base-tok seT-code sup dhaatu strength i-insert)
  (defun aorist-join1 (y seT-code ending0 dhaatu strength i-insert)
  (defun aorist-join1-adjust-y (y efirst dhaatu)
  (defun aorist-join1-vowel (y ending dhaatu)
  (defun aorist-join1-t-th (y ending dhaatu)
  (defun aorist-join1-s (y ending dhaatu)
  (defun aorist-join1-dh (y ending dhaatu)
  (defun conjugation-tab-aoristX (upasargas class pada dhaatu)
  (defun conjugation-tab-aoristX-main (upasargas class pada dhaatu &optional seTCode i-insert)
  (defun aorist-causal-base-irreg (dhaatu class pada upasargas Eng-def)
  (defun aorist-causal-base (dhaatu class pada upasargas Eng-def)
  (defun nasal-match (c)
  (defun reduplicate-cons (c)
  (defun aorist3-alter10 (tok &optional dhaatu)
  (defun aorist3-reduplicate (tok &optional dhaatu)
  (defun aorist3-alter10a (tok)
  (defun aorist3-shorten-1st-vowel (tok)
  (defun aorist3-shorten-vowel (v)
  (defun aorist3-lengthen-final-vowel (tok)
  (defun aorist3-lengthen-vowel (v)
  (defun short-syllable-P (parts)
  (defun prosodially-long-P (parts ivowel)
  (defun old-aorist3-class10-base (tok)
  (defun aorist-gunate-final-vowel (tok &optional vriddhi-flag)
  (defun aorist-endings (&optional tense-sym)
  (defun kale-461-alt (dhaatu)
causal.el 23 0
  (defun causal-doc-600 ()
  (defun causal-doc-601 ()
  (defun causal-doc-602 ()
  (defun causal-doc-603 ()
  (defun causal-doc-604 ()
  (defun causal-doc-605 ()
  (defun causal-doc-606 ()
  (defun causal-doc-607 ()
  (defun causal-doc-608 ()
  (defun causal-doc-609 ()
  (defun causal-doc-610 ()
  (defun causal-doc-611 ()
  (defun causal-base1a (dhaatu &optional class pada upasargas Eng-def)
  (defun causal-base (dhaatu &optional class pada upasargas Eng-def)
  (defun causal-adjust (b dhaatu class pada upasargas Eng-def)
  (defun causal-603-P (tok dhaatu)
  (defun indicatory-m-P (dhaatu)
  (defun indicatory-m1-P (dhaatu)
  (defun indicatory-m-P-1 (dhaatu)
  (defun indicatory-m-P-2 (dhaatu class pada upasargas Eng-def)
  (defun modify-Eng-def (Eng-def)
  (defun kale-610 (dhaatu &optional class upasargas)
  (defun kale-400-P (dhaatu)
construct.el 157 9
  (defvar noisy-load ETC)
  (defvar join-array-method ETC)
  (defvar all-voices ETC)
  (defvar all-tenses ETC)
  (defvar all-tenses-SL-plist ETC)
  (defvar participle-data ETC)
  (defvar participle-data-1 ETC)
  (defvar perppart1a-data ETC)
  (defvar construct-verb-one-data ETC)
  (defun maximal-prefix-sym (tab-in &optional min-pfx-len)
  (defun maximal-prefix (tab-in &optional min-pfx-len)
  (defun maximal-prefix-helper (toks min-pfx-len)
  (defun maximal-prefix-helper1 (toks min-pfx-len)
  (defun dcpu-sym (dhaatu class pada upasargas)
  (defun sym-dcpu (sym)
  (defun load-subfields (tabnames dirname &optional appendflag useX)
  (defun load-subfields-1 (filename appendflag useX)
  (defun load-subfields-keep (key subkey val)
  (defun load-subfields-keep-class (key subkey val)
  (defun load-subfields-keep-classPada (key subkey val)
  (defun construct-cleartemp (&optional OBARRAY)
  (defun construct-cleartemp1 (sym)
  (defun construct-dhaatukosha (&optional intab indir outtab outdir)
  (defun all-prefix-files (pfx sfx dirin)
  (defun all-dhaatukosha-inputs ()
  (defun all-subanta-inputs ()
  (defun strip-pfx-sfx (s pfx sfx)
  (defun construct-dhaatukosha-all ()
  (defun extract-dhaatukosha-forms (tabname &optional dirname)
  (defun construct-dhaatu-forms1 (&optional form-files)
  (defun construct-dhaatu-forms-all (&optional outtab outdir)
  (defun dhaatukosha-forms-sorted ()
  (defun sanforms-lt (form1 form2)
  (defun construct-join-arrays (old new)
  (defun construct-conjtabs (formtab outtab &optional outdir)
  (defun construct-conjtab-helper (bufout tense dhaatu class pada upasargas dict)
  (defun construct-conjtab-base-luT (dhaatu class pada upasargas voice)
  (defun construct-conjtab-base-lRiT (dhaatu class pada upasargas voice)
  (defun construct-conjtab-base-aashiirli~N (dhaatu class pada upasargas voice)
  (defun construct-conjtab-base-lRi~N (dhaatu class pada upasargas voice)
  (defun construct-conjtab-base-liT-p (dhaatu class pada upasargas voice)
  (defun construct-conjtab-base-lu~N (tense dhaatu class pada upasargas voice)
  (defun construct-conjtab-base1a (tense dhaatu class pada upasargas voice)
  (defun construct-conjtab1a (dhaatu class pada upasargas tense &optional voice derived-type)
  (defun construct-conjtab1a-spcltense (dhaatu class pada upasargas tense voice)
  (defun construct-conjtab1a-gentense (dhaatu class pada upasargas tense voice)
  (defun construct-conjbase1a (dhaatu class pada upasargas &optional voice)
  (defun construct-causalconjtabs (formtab outtab &optional outdir)
  (defun causal-conjtab1a (dhaatu class pada upasargas tense &optional voice)
  (defun causal-conjtab1a-chk (dhaatu class pada upasargas tense voice ans)
  (defun causal-conjtab1a-spcltense (dhaatu class pada upasargas tense voice)
  (defun causal-conjtab1a-bases (dhaatu class pada upasargas tense &optional voice)
  (defun causal-conjtab1a-gentense (dhaatu class pada upasargas tense voice)
  (defun causal-conjtab1a-bases-a (dhaatu class pada upasargas tense &optional voice)
  (defun causal-bases-gentense (dhaatu class pada upasargas tense voice)
  (defun causal-base1b (dhaatu class pada upasargas voice)
  (defun construct-seT-code1a (dhaatu class pada upasargas &optional dtype)
  (defun construct-seTPERF-code1a (dhaatu class pada upasargas)
  (defun construct-conjpassbase1a (dhaatu class pada upasargas)
  (defun load-dhaatukosha (files)
  (defun Xconstruct (tabname dirname outtab outdir)
  (defun Xalgorithm (xin)
  (defun getdhaatu (dhaatu class pada upa-syms subkey)
  (defun getdhaatu-ver0 (dhaatu class pada upa-syms subkey)
  (defun get-seTPERF-code (dhaatu class pada upa-syms)
  (defun get-seT-code (dhaatu class pada upa-syms)
  (defun sandefs (dhaatu)
  (defun construct-init ()
  (defun explore-Xconjgentab (&optional dhaatus)
  (defun explore-Xconjtab (&optional dhaatus)
  (defun explore-dhaatu-tenses (&optional dhaatus)
  (defun construct-participles-all (&optional outtab outdir)
  (defun construct-participles-reformat (outtab intab &optional outdir)
  (defun construct-participles-reformat1 (outtab &optional outdir)
  (defun construct-participles (formtab outtab &optional outdir)
  (defun construct-participles1 (bufout SL-dhaatu class pada &optional dict)
  (defun construct-participles1-helper (bufout SL-dhaatu class pada &optional dict)
  (defun sym-delete-last (sym)
  (defun construct-prespart1a-alt (dhaatu class pada upasargas)
  (defun declension-pres-part-alt (praatipadikas gender class pada)
  (defun declension-pres-part-P-alt (praatipadikas gender &optional class)
  (defun declension-pres-part-A-alt (praatipadika gender &optional class)
  (defun construct-prespart-base-alt (dhaatu class pada upasargas)
  (defun construct-prespart-base-alt-P (dhaatu class pada upasargas)
  (defun construct-prespart-base-alt-P-1 (ctabelt dhaatu class)
  (defun construct-prespart-base-alt-A (dhaatu class pada upasargas)
  (defun construct-prespart-base-alt-A-1 (ctabelt dhaatu class)
  (defun construct-prespart-base (dhaatu class pada upasargas)
  (defun construct-prespart-base-P (dhaatu class pada upasargas)
  (defun construct-prespart-base-A (dhaatu class pada upasargas)
  (defun pres-part-praatipadikas (conjelt class pada dhaatu)
  (defun construct-passpart (&optional forms outtab Xouttab outdir)
  (defun construct-passpart-base-alt (dhaatu class pada upasargas)
  (defun construct-passpart1a (dhaatu class pada upasargas)
  (defun construct-pppart (&optional forms outtab Xouttab outdir)
  (defun construct-ippart (&optional forms outtab Xouttab outdir)
  (defun construct-inf (&optional forms outtab Xouttab outdir)
  (defun construct-potpart (&optional forms outtab Xouttab outdir)
  (defun rppart-doc ()
  (defun construct-rppart (&optional forms outtab Xouttab outdir)
  (defun construct-rppart1a (dhaatu class pada upasargas)
  (defun construct-rppart1a-mod (x)
  (defun construct-rppart1b (dhaatu class pada upasargas)
  (defun perppart-doc ()
  (defun construct-perppart (&optional forms outtab Xouttab outdir)
  (defun construct-perppart1a (dhaatu class pada upasargas)
  (defun init-perppart1a-data ()
  (defun construct-futpart (&optional forms outtab Xouttab outdir)
  (defun construct-futppart (&optional forms outtab Xouttab outdir)
  (defun construct-verb-all ()
  (defun construct-verb-one (dhaatu-sfx)
  (defun filter-dhaatu-forms (forms option)
  (defun construct-verb-one-a (dhaatu-sfx fun-sfx)
  (defun construct-verb-one-a1 (dhaatu-sfxes fun-sfx)
  (defun construct-verb-causal-one (dhaatu-sfx)
  (defun load-construct-all ()
  (defun load-subanta-files ()
  (defun all-dhaatukosha-suffixes ()
  (defun load-construct-all-verbal (pfx)
  (defun load-causal-files ()
  (defun construct-subanta (intab &optional indir outtab outdir dbg)
  (defun convert-subanta-lexinfo (subanta lexinfo)
  (defun subanta-convert-form (subanta formin)
  (defun init-subanta-type-data ()
  (defun SL-construct-output-base (bufout bases key subkey &optional dict)
  (defun SL-construct-output1 (bufout key subkey keyval &optional dict)
  (defun replace-prefix0 (pfx val r)
  (defun replace-prefix (pfx vals r)
  (defun replace-prefix0-string (pfx val r)
  (defun construct-output-base (bufout bases key subkey)
  (defun construct-output1 (bufout key subkey keyval)
  (defun construct-subanta-base (subanta gender form)
  (defun subanta-base (citation-sym gender form)
  (defun construct-subanta1a (subanta formin gender)
  (defun construct-subanta1 (subanta gen-or-mtype form &optional dbg)
  (defun construct-subanta2 (citation-sym genderin form)
  (defun construct-subanta2-ADJ-at (citation-sym genderin form &optional dbg)
  (defun SL-construct-subanta1 (SL-subanta SL-gender &optional SL-form dbg)
  (defun construct-subanta-all ()
  (defun construct-dcpforms (intab &optional outtab indir outdir)
  (defun additional-preverbforms (intab intab1 outtab &optional outdir)
  (defun merge-dcpforms (outtab intabs &optional indir outdir)
  (defun remove-partial-duplicates (regexp)
  (defun normalize-class-padas (cps)
  (defun extract-dcpforms (&optional outtab outdir)
  (defun construct-avyayapada-all ()
  (defun construct-avyayapada (tabname &optional outtab outdir)
  (defun Sandhi-construct ()
  (defun construct-mw-all ()
  (defun SL-conjtab (root class evoice upas sltense dtype)
  (defun SL-prespart-base (root class evoice)
  (defun SL-prespart-base1 (root class evoice ctabeltin)
  (defun SL-prespart-declension (root class evoice ctabeltin)
  (defun SL-ppfactn (root class evoice &optional dtype)
  (defun SL-inf (root class evoice &optional dtype)
  (defun SL-abs (root class evoice &optional dtype)
  (defun SL-ppp (root class evoice &optional dtype)
  (defun SL-ppp-declension (ppp)
  (defun SL-pap-declension (ppp)
  (defun SL-gerundive (root class evoice)
  (defun SL-gerundive-declension (gerundive)
  (defun old-construct-all ()
  (defun construct-conjtabs-all (&optional outtab outdir)
  (defun construct-causalconjtabs-all (&optional outtab outdir)
  (defun old-construct-causalconjtabs (formsin outtab outdir)
  (defun old-SL-inf (root class evoice)
dictionary12.el 3 0
  (defun sortdict (bufin)
  (defun make-item1 (s)
  (defun make-item (s)
endings.el 35 222
  (defvar at-endings ETC)
  (defvar PRESPART-endings ETC)
  (defvar PASSPART-endings ETC)
  (defvar PPPART-endings ETC)
  (defvar ADJ-a-endings ETC)
  (defvar ADJ-a-endings-nN ETC)
  (defvar RPPART-P-endings ETC)
  (defvar conjtab-endings ETC)
  (defvar causal-endings ETC)
  (defvar explain-subanta-endings ETC)
  (defvar laT-1-P-endings ETC)
  (defvar laT-1-A-endings ETC)
  (defvar laT-2-P-endings ETC)
  (defvar laT-2-A-endings ETC)
  (defvar la~N-1-P-endings ETC)
  (defvar la~N-1-A-endings ETC)
  (defvar la~N-2-P-endings ETC)
  (defvar la~N-2-A-endings ETC)
  (defvar loT-1-P-endings ETC)
  (defvar loT-1-A-endings ETC)
  (defvar loT-2-P-endings ETC)
  (defvar loT-2-A-endings ETC)
  (defvar vidhili~N-1-P-endings ETC)
  (defvar vidhili~N-1-A-endings ETC)
  (defvar vidhili~N-2-P-endings ETC)
  (defvar vidhili~N-2-A-endings ETC)
  (defvar laT-2-P-strengths ETC)
  (defvar la~N-2-P-strengths ETC)
  (defvar loT-2-P-strengths ETC)
  (defvar vidhili~N-2-P-strengths ETC)
  (defvar laT-2-A-strengths ETC)
  (defvar la~N-2-A-strengths ETC)
  (defvar loT-2-A-strengths ETC)
  (defvar vidhili~N-2-A-strengths ETC)
  (defvar laT-1-P-endings-Goldman ETC)
  (defvar laT-1-A-endings-Goldman ETC)
  (defvar laT-2-P-endings-Goldman ETC)
  (defvar laT-2-A-endings-Goldman ETC)
  (defvar ending-consonants-1cons ETC)
  (defvar declension-cons-forms ETC)
  (defvar li~Nga-set ETC)
  (defvar gender-set ETC)
  (defvar vachana-set ETC)
  (defvar vibhakti-set ETC)
  (defvar case-set ETC)
  (defvar case-number-set ETC)
  (defvar sup-M-normal ETC)
  (defvar sup-F-normal ETC)
  (defvar sup-N-normal ETC)
  (defvar sup-M-a ETC)
  (defvar sup-N-a ETC)
  (defvar sup-F-aa ETC)
  (defvar sup-M-i ETC)
  (defvar sup-M-u ETC)
  (defvar sup-F-ii ETC)
  (defvar sup-F-i ETC)
  (defvar sup-F-u ETC)
  (defvar sup-M-Ri-A ETC)
  (defvar sup-M-Ri-R ETC)
  (defvar sup-F-Ri-R ETC)
  (defvar sup-F-Ri-A ETC)
  (defvar sup-F-uu ETC)
  (defvar sup-N-i ETC)
  (defvar sup-N-u ETC)
  (defvar sup-N-Ri ETC)
  (defvar sup-M-a-ADJ ETC)
  (defvar sup-F-a-ADJ ETC)
  (defvar sup-N-a-ADJ ETC)
  (defvar sup-M-i-ADJ ETC)
  (defvar sup-F-i-ADJ ETC)
  (defvar sup-N-i-ADJ ETC)
  (defvar sup-M-u-ADJ ETC)
  (defvar sup-F-u-ADJ ETC)
  (defvar sup-N-u-ADJ ETC)
  (defvar sup-M-Ri-ADJ ETC)
  (defvar sup-F-Ri-ADJ ETC)
  (defvar sup-N-Ri-ADJ ETC)
  (defvar sup-M-aI-ADJ ETC)
  (defvar sup-F-aI-ADJ ETC)
  (defvar sup-N-aI-ADJ ETC)
  (defvar sup-M-adj-PRON ETC)
  (defvar sup-N-adj-PRON ETC)
  (defvar sup-F-adj-PRON ETC)
  (defvar sup-M-a-PRON ETC)
  (defvar sup-N-a-PRON ETC)
  (defvar sup-F-a-PRON ETC)
  (defvar sup-M-c-PRON ETC)
  (defvar sup-N-c-PRON ETC)
  (defvar sup-F-c-PRON ETC)
  (defvar sup-M-d-PRON ETC)
  (defvar sup-N-d-PRON ETC)
  (defvar sup-F-d-PRON ETC)
  (defvar old-sup-M-a-PRON ETC)
  (defvar old-sup-N-a-PRON ETC)
  (defvar old-sup-F-a-PRON ETC)
  (defvar sup-M-b-PRON ETC)
  (defvar sup-F-b-PRON ETC)
  (defvar sup-N-b-PRON ETC)
  (defvar sup-empty ETC)
  (defvar sup-M-IRR-PRON ETC)
  (defvar sup-F-IRR-PRON ETC)
  (defvar sup-N-IRR-PRON ETC)
  (defvar sup-M-CARD-PRON ETC)
  (defvar sup-F-CARD-PRON ETC)
  (defvar sup-N-CARD-PRON ETC)
  (defvar sup-M-ORDa-PRON ETC)
  (defvar sup-F-ORDa-PRON ETC)
  (defvar sup-N-ORDa-PRON ETC)
  (defvar sup-M-ORDb-PRON ETC)
  (defvar sup-F-ORDb-PRON ETC)
  (defvar sup-N-ORDb-PRON ETC)
  (defvar sup-M-ORD-PRON ETC)
  (defvar sup-F-ORD-PRON ETC)
  (defvar sup-N-ORD-PRON ETC)
  (defvar sup-M-1cons ETC)
  (defvar sup-F-1cons ETC)
  (defvar sup-N-1cons ETC)
  (defvar sup-M-2cons ETC)
  (defvar sup-F-2cons ETC)
  (defvar sup-N-2cons ETC)
  (defvar sup-M-vat ETC)
  (defvar sup-F-vat ETC)
  (defvar sup-N-vat ETC)
  (defvar sup-M-vat-ADJ ETC)
  (defvar sup-F-vat-ADJ ETC)
  (defvar sup-N-vat-ADJ ETC)
  (defvar sup-M-mat ETC)
  (defvar sup-F-mat ETC)
  (defvar sup-N-mat ETC)
  (defvar sup-M-mat-ADJ ETC)
  (defvar sup-F-mat-ADJ ETC)
  (defvar sup-N-mat-ADJ ETC)
  (defvar sup-M-at-ADJ ETC)
  (defvar sup-F-at-ADJ ETC)
  (defvar sup-N-at-ADJ ETC)
  (defvar sup-M-iiyas-ADJ ETC)
  (defvar sup-F-iiyas-ADJ ETC)
  (defvar sup-N-iiyas-ADJ ETC)
  (defvar sup-M-in ETC)
  (defvar sup-F-in ETC)
  (defvar sup-N-in ETC)
  (defvar sup-M-in-ADJ ETC)
  (defvar sup-F-in-ADJ ETC)
  (defvar sup-N-in-ADJ ETC)
  (defvar sup-M-an ETC)
  (defvar sup-F-an ETC)
  (defvar sup-N-an ETC)
  (defvar sup-M-an-ADJ ETC)
  (defvar sup-F-an-ADJ ETC)
  (defvar sup-N-an-ADJ ETC)
  (defvar sup-M-vas-ADJ ETC)
  (defvar sup-F-vas-ADJ ETC)
  (defvar sup-N-vas-ADJ ETC)
  (defvar sup-M-ach-ADJ ETC)
  (defvar sup-F-ach-ADJ ETC)
  (defvar sup-N-ach-ADJ ETC)
  (defvar sup-M-aach-ADJ ETC)
  (defvar sup-F-aach-ADJ ETC)
  (defvar sup-N-aach-ADJ ETC)
  (defvar sup-M-3cons ETC)
  (defvar sup-F-3cons ETC)
  (defvar sup-N-3cons ETC)
  (defvar sup-M-IRR ETC)
  (defvar sup-F-IRR ETC)
  (defvar sup-N-IRR ETC)
  (defvar sup-M-aa ETC)
  (defvar sup-M-ii0 ETC)
  (defvar sup-M-uu ETC)
  (defvar sup-M-ii ETC)
  (defvar sup-M-ii1 ETC)
  (defvar sup-M-uu1 ETC)
  (defvar sup-F-ii1 ETC)
  (defvar sup-F-ii2 ETC)
  (defvar sup-F-ii3 ETC)
  (defvar sup-F-uu1 ETC)
  (defvar sup-N-i1 ETC)
  (defvar sup-M-o ETC)
  (defvar sup-F-o ETC)
  (defvar sup-F-au ETC)
  (defvar sup-M-au ETC)
  (defvar sup-M-ai ETC)
  (defvar sup-F-ai ETC)
  (defvar luT-1-P-endings ETC)
  (defvar luT-1-A-endings ETC)
  (defvar luT-1-P-strengths ETC)
  (defvar luT-1-A-strengths ETC)
  (defvar lRiT-1-P-endings ETC)
  (defvar lRiT-1-A-endings ETC)
  (defvar lRiT-1-P-strengths ETC)
  (defvar lRiT-1-A-strengths ETC)
  (defvar lRi~N-1-P-endings ETC)
  (defvar lRi~N-1-A-endings ETC)
  (defvar lRi~N-1-P-strengths ETC)
  (defvar lRi~N-1-A-strengths ETC)
  (defvar aashiirli~N-1-P-endings ETC)
  (defvar aashiirli~N-1-A-endings ETC)
  (defvar aashiirli~N-1-P-strengths ETC)
  (defvar aashiirli~N-1-A-strengths ETC)
  (defvar lu~N1-1-P-endings ETC)
  (defvar lu~N1-1-P-strengths ETC)
  (defvar lu~N2-1-P-endings ETC)
  (defvar lu~N2-1-A-endings ETC)
  (defvar lu~N2-1-P-strengths ETC)
  (defvar lu~N2-1-A-strengths ETC)
  (defvar lu~N3-1-P-endings ETC)
  (defvar lu~N3-1-A-endings ETC)
  (defvar lu~N3-1-P-strengths ETC)
  (defvar lu~N3-1-A-strengths ETC)
  (defvar lu~N4-1-P-endings ETC)
  (defvar lu~N4-1-A-endings ETC)
  (defvar lu~N4-1-P-strengths ETC)
  (defvar lu~N4-1-A-strengths ETC)
  (defvar lu~N5-1-P-endings ETC)
  (defvar lu~N5-1-A-endings ETC)
  (defvar lu~N5-1-P-strengths ETC)
  (defvar lu~N5-1-A-strengths ETC)
  (defvar lu~N6-1-P-endings ETC)
  (defvar lu~N6-1-P-strengths ETC)
  (defvar lu~N7-1-P-endings ETC)
  (defvar lu~N7-1-A-endings ETC)
  (defvar lu~N7-1-P-strengths ETC)
  (defvar lu~N7-1-A-strengths ETC)
  (defun solution (x)
  (defun flatten (in)
  (defun list-replace (l old new)
  (defun construct-endings-all ()
  (defun construct-endings-1 (x category-subtype-cond &optional bufin no-translate)
  (defun construct-endings-2 (endings category-subtype-cond gender &optional bufin no-translate)
  (defun format-endings (endings-in category-subtype-cond gender &optional no-translate)
  (defun init-one-sup (endar-sym)
  (defun sublist-gather (xin open-list close-list)
  (defun init-ending-consonants ()
  (defun init-one-vsup (sup-sym)
  (defun init-one-vsup-strength (sup-sym)
  (defun init-vsup-list ()
  (defun init-vsup ()
  (defun Subanta-initAll ()
  (defun Subanta-initElt (prop)
  (defun init-gender-form-data ()
  (defun init-sup-list ()
  (defun init-sup ()
  (defun sup-get (v1 v2 &optional pfx sym)
  (defun conj-endings (tense-sym class pada)
  (defun conj-strengths (tense-sym class pada)
  (defun old-init-class-a-mod-endings ()
  (defun init-causal-endings ()
  (defun init-conjtab-endings ()
  (defun init-PRESPART-endings ()
  (defun init-PASSPART-endings ()
  (defun init-PPPART-endings ()
  (defun init-ADJ-a-endings ()
  (defun get-ADJ-a-endings (base gender)
  (defun nN-P (base)
  (defun init-RPPART-P-endings ()
  (defun make-explain-subanta-endings (form)
  (defun init-explain-subanta-endings ()
  (defun get-explain-subanta-endings (type form base gender)
explain.el 108 23
  (defvar explain-dbg ETC)
  (defvar explain-pflag ETC)
  (defvar explain-pchk ETC)
  (defvar explain-ans ETC)
  (defvar explain-verbosity ETC)
  (defvar explain-shortest-flag ETC)
  (defvar upasarga-Implied-flag ETC)
  (defvar explain-upasarga-alwaysTry ETC)
  (defvar explain-exclude-types ETC)
  (defvar declension-buffer ETC)
  (defvar declension-buffer-key ETC)
  (defvar explain-knowlev ETC)
  (defvar explain-step2-num ETC)
  (defvar explain1-cur ETC)
  (defvar explain1-cur1 ETC)
  (defvar explain1-cpd ETC)
  (defvar explain1-cpd1 ETC)
  (defvar explain1-cur-pr ETC)
  (defvar explain1-cpd-pr ETC)
  (defvar cpd-flags ETC)
  (defvar explain-dhaatu-plist ETC)
  (defvar cpd-form ETC)
  (defvar san-key-sfx ETC)
  (defun explain-chapsII (n1 &optional n2)
  (defun explain-chaps (n1 &optional n2)
  (defun explain-chk (chap)
  (defun explain-chk-chaps (n1 n2)
  (defun read-explain-file (file)
  (defun read-explain-file1a (s)
  (defun compare-table-files (file1 file2)
  (defun compare-table-files1a (x y)
  (defun compare-table-files1b (x)
  (defun lt-stringRep (x y)
  (defun explain-all-files ()
  (defun explain-file (vfile)
  (defun explain-file1 (data)
  (defun explain-chap-unknowns (chap)
  (defun explain-chap-unknowns-all ()
  (defun explain-Antoine1 (&optional chk)
  (defun explain-pr (ans)
  (defun explain-pr0 (pfxin ians sym expls)
  (defun explain-pr1 (pfxin jexpl expl)
  (defun explain-pr-item (pfx defs)
  (defun explain-pr-CPD-item (pfx cpds)
  (defun explain-CPD-straighten (csym)
  (defun explain-pr-CPD (pfx wlist)
  (defun explain-pr-keyval-modify-a (xin)
  (defun explain-pr-keyval-modify (xlist)
  (defun explain-pr-keyval-modify1 (x)
  (defun explain (string &optional optional)
  (defun explain-exactly-1 (sym1 &optional verbose)
  (defun explain-single (sym)
  (defun explain1 (sym1)
  (defun explain-cpd (sym &optional verbose)
  (defun explain-cpd1 (sym1 cpd-form-in)
  (defun explain1a (sym1)
  (defun explain-pair (sym &optional verbose)
  (defun explain-pair1 (sym &optional verbose)
  (defun cpd-separate (sym)
  (defun vowel-separate (sym)
  (defun cons-separate (sym)
  (defun explain-exactly-1-shortest (expls)
  (defun explain-exactly-1-shortest-remove-aa (expls)
  (defun shortest-check (syms)
  (defun praatar-modify (sym1)
  (defun explain-str (s theforms &optional extra)
  (defun explain-str-step1-incr (s s0 theforms &optional extra)
  (defun explain-str-step2 (s-sym san-key san-key-info expforms &optional extra)
  (defun explain-str-step2-CAUSAL (formans s-sym san-key info-data extra)
  (defun update-form-ans (formans ans xtype)
  (defun adjust-dhaatu-forms (forms upa-syms)
  (defun explain-str-VERB (s-sym san-key san-info-data tense-sym &optional voice-sym upa-syms)
  (defun explain-str-VERB-CAUSAL (s-sym san-key san-info-data tense-sym &optional voice-sym upa-syms)
  (defun explain-knowlev-P (xtype &rest args)
  (defun explain-str-PART (s-sym san-key san-info tense-sym &optional voice-sym upa-syms)
  (defun explain-str-PART1 (s-sym san-key san-key-info upa-syms subkey subkey-id)
  (defun explain-PART-IPP (s-sym a~Nga san-key-info &optional upa-syms subkey subkey-id)
  (defun explain-PART-INF (s-sym a~Nga san-key-info &optional upa-syms subkey subkey-id)
  (defun explain-str-subanta (s-sym san-key san-key-info subanta-type)
  (defun explain-str-subanta-normal (s-sym san-key san-key-info subanta-type)
  (defun explain-str-subanta-cpd (s-sym san-key san-key-info subanta-type)
  (defun explain-substring-subanta1 (ans s-match dtab subanta gender subanta-form Eng-def)
  (defun explain-ADJ-degree (s-sym san-key san-key-info)
  (defun explain-subanta-makeans (subanta gender form case number Eng-def degree)
  (defun explain-str-INDECL (s-sym san-key san-info)
  (defun upasarga-forms (s &optional oldans)
  (defun upasarga-forms2 (s)
  (defun upasarga-forms1 (s)
  (defun upasarga-forms1-check (pfx-sym sfx-sym)
  (defun upasarga-forms-sandhi (s)
  (defun upasarga-forms-nosandhi (s)
  (defun saveold-upasarga-P (sym)
  (defun upasarga-P (sym &optional code)
  (defun SL-upasarga-P (sym &optional code)
  (defun upasargas-get (code)
  (defun SL-upasargas-get (code)
  (defun SL-upasarga-forms (s)
  (defun SL-upasarga-forms1 (old-forms)
  (defun inverse-aagama (s)
  (defun explain-VERB-makeans (tense-sym dhaatu class pada person number Eng-def upasargas &optional voice-sym)
  (defun explain-PRON (s-sym a~Nga san-info)
  (defun explain-PRON-makeans (subanta gender form case number Eng-def)
  (defun explain-ADJ (s-sym a~Nga san-info)
  (defun explain-ADJ-makeans (subanta gender form case number Eng-def &optional degree)
  (defun explain-PART-makeans (type upasargas dhaatu Eng-def gender case number &optional class pada voice-sym)
  (defun explain-PART-IPP-makeans (type upasargas dhaatu Eng-def class)
  (defun explain-PART-INF-makeans (type upasargas dhaatu Eng-def class)
  (defun remove-INDECL-upasarga (x-list)
  (defun extract-Subanta ()
  (defun extract-Subanta1 (x sym)
  (defun replace-n (x)
  (defun inverse-vrddhis (tok)
  (defun check-duals (w1 ans1 w2)
  (defun init-explain-forms ()
  (defun explain-declension-init (sym)
  (defun explain-declension-get (type key)
  (defun explain-declension-put (type key ans)
  (defun explain-declension-noun (subanta)
  (defun explain-declension-perperf-part (praatipadikas gender pada)
  (defun explain-declension-pron (subanta praatipadikas gender form-sym)
  (defun explain-declension-adj (subanta praatipadikas gender form-sym)
  (defun explain-conjugation (a~Nga tense-sym classtmp padatmp dhaatu)
  (defun Sx1 (s)
  (defun Sx1-updateans (ans word parms ans1 dict)
  (defun Sx1-tabmatch (s tab inflection)
  (defun Sx1-pfx (pfx)
  (defun Sx1-pfxa (regexp filename ans)
  (defun Sx1-endmatch (regexp &optional bufin)
  (defun SL-n-P (base)
  (defun SL-n-P0 (base)
  (defun old-Sx1-pfxa (regexp filename ans)
fileutil.el 21 0
  (defun write-table-file (nout out filename &optional dirname)
  (defun read-colon-file-table (tabname nfields &optional dirname)
  (defun read-colon-file-validation (fname nfields)
  (defun read-colon-file (filename nfields)
  (defun read-colon-buffer (buf nfields &optional sep)
  (defun read-colon-line (stemp)
  (defun read-colon-line-fields (stemp sep)
  (defun read-string-fields (s sep &optional keepsep)
  (defun read-buffer-fields (sep &optional keepsep)
  (defun read-expr-file-table (tabname nfields &optional dirname)
  (defun read-expr-file (filename nfields)
  (defun read-expr-buffer (buf &optional nfields skips)
  (defun gather-fields (xin separator)
  (defun load-roots-seT ()
  (defun load-dhaatu-data (tabname &optional subkey do-inversion)
  (defun fol-delete-files (dirin ending &optional verbose)
  (defun sangram-clean ()
  (defun remove-duplicate-lines (intab indir &optional remove-orig)
  (defun non-system-files (dir)
  (defun dispLineLim (file)
  (defun fol-search-files (dirin regexp &optional verbose)
forms.el 118 0
  (defun doc_v-root-make ()
  (defun doc_v-root-filenames-make ()
  (defun doc_v-file-init1 ()
  (defun doc_v-file-init1-file (tab)
  (defun doc_v-file-init2a (intab indir)
  (defun doc_v-file-init2b--incomplete ()
  (defun doc_v-root-files ()
  (defun doc_v-file-init3 (action intab indir)
  (defun doc_v-file-init3-pre (tab)
  (defun doc_v-file-init3-pre-p (tab)
  (defun doc_v-file-init3-prespart (tab)
  (defun doc_v-file-init3-ppfactn (tab)
  (defun doc_v-file-init3-inf (tab)
  (defun doc_v-file-init3-abs (tab)
  (defun doc_v-file-init3-prf (tab)
  (defun doc_v-file-init3-ppp (tab)
  (defun doc_v-file-init3-pap (tab)
  (defun doc_v-file-init3-gerundive (tab)
  (defun doc_v-file-init3-fut (tab)
  (defun doc_v-file-init-aor (intab indir)
  (defun doc_v-file-init-aor1 (tab class voice aornum)
  (defun doc_v-derived ()
  (defun doc-emacs-array ()
  (defun doc_v-file-init3-ptrs ()
  (defun doc_v-file-ptrs (outtab &optional outdir)
  (defun doc_s-file-init3-ptrs ()
  (defun doc_s-file-init3-ptrs-helper (tab)
  (defun doc_s-file-ptrs (outtab outdir)
  (defun doc_form-file-ptrs-helper (tab subdir)
  (defun v-root-remake0 ()
  (defun v-root-remake ()
  (defun vc-root-remake ()
  (defun vc-root-remake-file (file)
  (defun forms-remake-extra ()
  (defun v-root-remake1 (tab)
  (defun vc-root-remake1 (root)
  (defun vc-root-remake1-helper (tab tmpfile)
  (defun v-root-make ()
  (defun v-root-filenames-make ()
  (defun v-root-filename-get (root)
  (defun v-file-init1 ()
  (defun v-file-init1-helper (root file)
  (defun v-file-init1-file (file)
  (defun v-file-init2a (intab indir)
  (defun v-file-init2a-helper (root class pada)
  (defun v-file-init3 (action intab indir)
  (defun v-file-init3-pre (tab)
  (defun v-file-init3-pre-p (tab)
  (defun v-file-init3-fut (tab)
  (defun v-file-init3-prespart (tab &optional dir1)
  (defun v-file-init3-ppfactn (tab &optional dir1)
  (defun v-file-init3-inf (tab &optional dir1)
  (defun v-file-init3-abs (tab &optional dir1)
  (defun v-file-init3-prf (tab)
  (defun v-file-init3-ppp (tab &optional dir1)
  (defun v-file-init3-pap (tab)
  (defun v-file-init3-gerundive (tab)
  (defun v-file-init-aor (intab indir)
  (defun v-file-init-aor1 (tab class voice aornum)
  (defun v-file-init3-ptrs ()
  (defun v-file-ptrs (outtab outdir)
  (defun form-file-ptrs (outtab outdir subdir)
  (defun form-file-ptrs-helper (tab subdir)
  (defun parse-dict-ref (dict)
  (defun v-file-init3-helper (root)
  (defun v-file-init3-helpera (fileout)
  (defun parse-string-to-array (sin)
  (defun s-work1a (intab outtab &optional indir)
  (defun s-work1b (intab intab1 outtab &optional indir)
  (defun s-work2a (intab outtab npfx &optional indir)
  (defun s-file-init (intab indir &optional outdir)
  (defun s-file-init-alt (intab indir outtab outdir &optional dbg)
  (defun s-file-init-alt1 (intab indir outtab outdir n1 n2 &optional dbg)
  (defun s-file-init-alt-helper (subanta fg mw-word &optional dbg)
  (defun s-file-init-helper (outtab subanta fg mw-word &optional outdir dbg)
  (defun s-file-init-helper1 (subwords dtab)
  (defun s-file-init-genform (subanta fg)
  (defun form-file-init3-ptrs-helper (tab subdir)
  (defun form-file-init3-ptrs (subdir)
  (defun s-file-init3-ptrs ()
  (defun s-file-ptrs (outtab outdir)
  (defun subtler-s-file-ptrs (outtab outdir)
  (defun i-file-init (intab indir)
  (defun i-file-init-helper (outtab subanta fg mw-word)
  (defun i-file-init3-ptrs ()
  (defun i-file-ptrs (outtab outdir)
  (defun chk-s-file-init (intab indir)
  (defun chk-s-file-init-helper (outtab subanta fg mw-word)
  (defun work-praps (&optional tabout)
  (defun work-praps-helper (tab)
  (defun work-praps1 (&optional tabin tabout)
  (defun vc-file-init1 ()
  (defun vc-file-init1-helper (root file)
  (defun vc-file-init2a (intab indir)
  (defun vc-file-init2a-helper (root class pada)
  (defun vc-file-init3 (action intab indir)
  (defun vc-file-init3-prefut (tab)
  (defun vc-file-init3-prespart (tab)
  (defun vc-file-init3-inf (tab)
  (defun vc-file-init3-ppfactn (tab)
  (defun vc-file-init3-abs (tab)
  (defun vc-file-init3-ppp (tab)
  (defun vc-file-init3-ptrs ()
  (defun vc-file-ptrs (outtab outdir)
  (defun old-s-file-init3-ptrs-helper (tab)
  (defun old-i-file-init3-ptrs-helper (tab)
  (defun old-v-file-init3-ptrs (tab)
  (defun old-i-file-ptrs (outtab outdir)
  (defun old-v-file-ptrs (intabs indir outtab &optional outdir)
  (defun old-v-file-ptrs-main (intab indir outtab &optional outdir)
  (defun regexp-lines (bufin REGEXP-gen)
  (defun regexp-kill-lines (bufin REGEXP-gen &optional bufout)
  (defun v-file-init-alt1-pre (intab indir outtab outdir n1 n2 &optional dbg)
  (defun v-file-init-alt1-pre-helper (root class voice tenses &optional dbg)
  (defun v-file-init-alt1-pre-p (intab indir outtab outdir n1 n2 &optional dbg)
  (defun v-file-init-alt1-fut (intab indir outtab outdir n1 n2 &optional dbg)
  (defun v-file-init-alt1-prf (intab indir outtab outdir n1 n2 &optional dbg)
  (defun v-file-init-alt1-ppfactn (intab indir outtab outdir n1 n2 &optional dbg)
gram1.el 60 0
  (defun init-sets-helper (s)
  (defun init-sets ()
  (defun init-vs-helper (s1 p s2)
  (defun init-vowelstrength ()
  (defun init-semivowels ()
  (defun set-to-property (s p)
  (defun init-properties ()
  (defun init-Sangram-helper (sym)
  (defun init-Sangram (&optional OBARRAY)
  (defun count-Sangram ()
  (defun sangetall (sym)
  (defun sanget (sym prop)
  (defun plist-get2 (plist proplist)
  (defun plist-AppendElt (plist prop newelt)
  (defun sanget2 (sym proplist)
  (defun sanput (sym prop val)
  (defun sanput2 (sym proplist val)
  (defun sanAppendElt (sym prop newelt)
  (defun sanAppendElt2 (sym proplist val)
  (defun shortsimplevowel-P (tok)
  (defun disjoint-P (list1 list2)
  (defun isect-lists (list1 list2)
  (defun append-if-new (ans thisans)
  (defun longsimplevowel-P (tok)
  (defun simplevowel-P (tok)
  (defun diphthong-P (tok)
  (defun vowel-P (tok)
  (defun K-P (tok)
  (defun CH-P (tok)
  (defun TT-P (tok)
  (defun T-P (tok)
  (defun P-P (tok)
  (defun semivowel-P (tok)
  (defun sibilant-P (tok)
  (defun consonant-P (tok)
  (defun guttural-P (tok)
  (defun palatal-P (tok)
  (defun cerebral-P (tok)
  (defun dental-P (tok)
  (defun labial-P (tok)
  (defun hardnonaspirate-P (tok)
  (defun hardaspirate-P (tok)
  (defun softnonaspirate-P (tok)
  (defun softaspirate-P (tok)
  (defun nasal-P (tok)
  (defun hard-P (tok)
  (defun soft-P (tok)
  (defun mute-P (tok)
  (defun shortvowel-P (v)
  (defun longvowel-P (v)
  (defun count-XSangram ()
  (defun Xsangetall (sym)
  (defun Xsanget (sym prop)
  (defun Xsanget2 (sym proplist)
  (defun Xsanput (sym prop val)
  (defun Xsanput2 (sym proplist val)
  (defun XsanAppendElt (sym prop newelt)
  (defun XsanAppendElt2 (sym proplist val)
  (defun listify (x)
  (defun prog-comments (tab &optional dir)
gram2-future.el 36 1
  (defvar ForC-sym ETC)
  (defun future-doc ()
  (defun luT-doc-Antoine ()
  (defun luT-doc-Kale ()
  (defun lRiT-doc-Antoine ()
  (defun lRiT-lRi~N-doc-Kale ()
  (defun future-passive-doc-Antoine ()
  (defun future-passive-doc-Kale ()
  (defun aashiirli~N-doc-Antoine ()
  (defun Kale-459-doc ()
  (defun Kale-502-doc ()
  (defun aashiirli~N-doc-Kale ()
  (defun future-part-doc ()
  (defun participles-at-doc ()
  (defun future-part-doc-Antoine ()
  (defun conjugation-tab-lRiT (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-lRi~N (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-luT (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-aashiirli~N (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-ForC (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-ForC-main (upa-syms class pada dhaatu &optional seTCode i-insert)
  (defun ForC-bitab (btab itab)
  (defun ForC-bitab-join (bitab endings dhaatu strengths i-insert)
  (defun ForC-join (base-tok seT-code sup dhaatu strength i-insert)
  (defun ForC-join1 (y seT-code ending0 dhaatu strength i-insert)
  (defun aspirate-last-cons (tok)
  (defun aspirate-first-cons (tok)
  (defun first-cons (tok)
  (defun augment-a (b0)
  (defun samprasaaraNa-P (dhaatu class)
  (defun samprasaaraNa (tok)
  (defun benedictive-base (dhaatu class pada upa-syms &optional seT-gen)
  (defun future-base (dhaatu class pada upa-syms tense &optional seT-gen)
  (defun ForC-seTCode (dhaatu class pada upa-syms &optional tense)
  (defun kale-584-P (dhaatu)
  (defun construct-futpart1a (dhaatu class pada upasargas)
  (defun construct-futppart1a (dhaatu class pada upasargas)
gram2-liT.el 23 9
  (defvar liT-1-P-endings ETC)
  (defvar liT-1-A-endings ETC)
  (defvar liT-1-P-strengths ETC)
  (defvar liT-doc-Passive ETC)
  (defvar liT-r-bitab ETC)
  (defvar liT-r-endings ETC)
  (defvar periphrastic-suffix-P ETC)
  (defvar periphrastic-suffix-A ETC)
  (defvar periphrastic-suffix-PASSIVE ETC)
  (defun conjugation-tab-liT (upa-syms class pada dhaatu &optional voice)
  (defun conjugation-tab-liT-r (upa-syms class pada dhaatu &optional voice)
  (defun join-arrays (ans1 ans2)
  (defun conjugation-tab-liT-r-main (upa-syms class pada dhaatu &optional seTPerfCodes)
  (defun liT-main-get-bitab (upa-syms class pada dhaatu &optional seTPerfCodes)
  (defun perfect-bitab-join (bitab endings &optional ans)
  (defun perfect-bitab (btab itab)
  (defun perfect-join (base-tok seT-code sup)
  (defun perfect-join1 (y seT-code ending0)
  (defun reduplicate-perfect (tok &optional wparts)
  (defun reduplicative-pfx-perfect (tok &optional wparts)
  (defun kale-463-P (dhaatu)
  (defun kuTaadi-P (dhaatu)
  (defun conjugation-tab-liT-p (upa-syms class pada dhaatu &optional voice)
  (defun periphrastic-base (dhaatu class pada &optional dtype)
  (defun periphrastic-suffix (pada)
  (defun periphrastic-init (pada)
  (defun periphrastic-init1 (class pada dhaatu)
  (defun reduplicative-liT-P (dhaatu class)
  (defun periphrastic-liT-P (dhaatu class &optional dtype)
  (defun unused-perfect-gunate-final-vowel (tok &optional vriddhi-flag)
  (defun perf-part-active-r (dhaatu class pada upa-syms)
  (defun old-periphrastic-base (dhaatu class pada)
gram2.el 47 6
  (defvar all-special-tenses ETC)
  (defvar person-number-set ETC)
  (defvar 1-P-properties-set ETC)
  (defvar 1-A-properties-set ETC)
  (defvar 2-P-properties-set ETC)
  (defvar 2-A-properties-set ETC)
  (defun word-parts (tokar)
  (defun dhaatu-parts (tokar)
  (defun dhaatu-a~Nga-a-REGULAR (dhaatu class pada)
  (defun dhaatu-a~Nga-1 (tokar)
  (defun dhaatu-a~Nga-4 (tokar)
  (defun dhaatu-a~Nga-6 (tokar)
  (defun dhaatu-a~Nga-10 (tokar)
  (defun class10-base (tok &optional Eng-def)
  (defun class-a-base (dhaatu class pada)
  (defun class-a-base-irreg (dhaatu class pada)
  (defun class-b-base (dhaatu class pada upasargas)
  (defun kale-414-P (dhaatu)
  (defun kale-414-opt-P (dhaatu)
  (defun kale-394 (c1 v c2 type)
  (defun kale-395 (c1 v c2 type)
  (defun conjugation-tab-pr (a~Nga class pada dhaatu)
  (defun conjugation-tab-upa-pr (a~Nga class pada dhaatu upa)
  (defun conjugation-tab (a~Nga-sym tense-sym class pada dhaatu &optional voice)
  (defun conjugation-tab-1 (a~Nga-sym tense-sym class pada)
  (defun conjugation-tab-5 (a~Nga-sym tense-sym class pada)
  (defun conjugation-tab-8 (a~Nga-sym tense-sym class pada)
  (defun conjugation-tab-9 (a~Nga-sym tense-sym class pada)
  (defun conjugation-tab-2 (a~Nga-sym tense-sym class pada dhaatu)
  (defun conjugation-tab-3 (a~Nga-sym tense-sym class pada dhaatu)
  (defun conjugation-tab-7 (a~Nga-sym tense-sym class pada dhaatu)
  (defun conjugation-join-sym (base-sym sup-sym &optional option)
  (defun conjugation-join (base-tok sup &optional option)
  (defun conjugation-join1 (y ending option)
  (defun sym-with-space (symseq)
  (defun sym-without-space (x)
  (defun san-symbol-name (x)
  (defun symnum-name (x)
  (defun sym-begins-with (x)
  (defun sym-ends-with (x)
  (defun sym-concat2 (s1 s2)
  (defun sym-concat (s1 &rest all)
  (defun apply-seT (tok code)
  (defun upasarga-join (upasargas sym)
  (defun conjugation-citation-irreg (dhaatu tense-sym class pada)
  (defun doc-ending-gram2 ()
  (defun dhaatu-class-padas (dhaatu)
  (defun dhaatu-a~Nga (dhaatu class pada)
  (defun class-pada-a~Ngas (dhaatu)
  (defun conjugation-citation-cp (dhaatu tense-sym class pada &optional upa-list)
  (defun conjugation-citation (dhaatu tense-sym)
  (defun modify-conj-endings-1 (tense-sym pada)
  (defun get-form-tab (class pada)
gram3.el 63 1
  (defvar declension-general-save ETC)
  (defun declension-citation1 (citation-sym praatipadika gender form irregs &optional dbg)
  (defun citation-pr (vec)
  (defun declension-citation-other1 (citation-sym gender-form gender form type &optional dbg)
  (defun declension-citation-other (citation-sym &optional dbg)
  (defun declension-citation (citation-sym &optional g printflag dbg)
  (defun declension-general (praatipadika gender form irregs &optional dbg)
  (defun declension-general-cons (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-1cons (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-1cons-finish (base-toks gender irregs &optional dbg)
  (defun declension-1cons-ch (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-Ch (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-j (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-sh (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-l (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-r (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-s (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-Sh (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-h (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-v (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-t (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-p (citation-sym gender irregs &optional dbg)
  (defun declension-1cons-k (citation-sym gender irregs &optional dbg)
  (defun declension-general-mat (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-mat-ADJ (c p g f i &optional dbg)
  (defun declension-general-vat (c p g f i &optional dbg)
  (defun declension-general-vat-ADJ (c p g f i &optional dbg)
  (defun declension-general-iiyas-ADJ (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-in (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-in-ADJ (c p g f i &optional dbg)
  (defun declension-general-vas-ADJ (citation-sym praatipadikas gender &optional form irregs dbg)
  (defun declension-general-an-ADJ (c p g f i &optional dbg)
  (defun declension-general-an (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-ach-ADJ (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-aach-ADJ (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-M-uu (citation-sym praatipadikas gender form irregs &optional dbg)
  (defun declension-general-M-uu-helper (citation-sym gender form)
  (defun declension-general-1 (base-tok sup)
  (defun declension-join (base-tok sup)
  (defun declension-pres-part (praatipadikas gender class pada)
  (defun declension-general-at-ADJ (citation-sym praatipadikas gender form irregs)
  (defun declension-pres-part-P (praatipadikas gender &optional class)
  (defun declension-pres-part-A (praatipadikas gender &optional class)
  (defun declension-perf-part-passive (praatipadikas gender)
  (defun declension-pot-part-passive (praatipadikas gender)
  (defun declension-perf-part-active (praatipadikas gender)
  (defun declension-rperf-part (pre-praatipadikas gender pada)
  (defun declension-perperf-part (praatipadikas gender pada)
  (defun declension-fut-part-active (pre-praatipadikas gender pada)
  (defun declension-fut-part-active-P (pre-praatipadikas gender)
  (defun declension-fut-part-active-A (praatipadikas gender)
  (defun declension-fut-part-passive (praatipadikas gender)
  (defun declension-adj (citation-sym praatipadikas gender form-sym)
  (defun declension-adj-new (citation-sym praatipadikas gender form-sym)
  (defun declension-pron (citation-sym praatipadikas gender form-sym)
  (defun subanta-base-1cons (citation-sym gender)
  (defun adjust-praatipadikas (old form)
  (defun init-avyayapada (&optional OBARRAY)
  (defun init-avyayapada-helper-1 (sym)
  (defun old-declension-general-1cons (citation-sym praatipadikas gender form irregs)
  (defun old-declension-general-F-ii1 (citation-sym praatipadikas gender form irregs)
  (defun old-declension-general-F-ii2 (citation-sym praatipadikas gender form irregs)
  (defun old-declension-general-M-ii (citation-sym praatipadikas gender form irregs)
  (defun old-declension-general-M-uu (citation-sym praatipadikas gender form irregs)
inits.el 4 0
  (defun init-sanskrit1 (&optional options)
  (defun sangram-size ()
  (defun sangram-restore (&optional tabname dirname)
  (defun sangram-save (&optional outtab outdir)
irreg.el 8 2
  (defvar nil-declension ETC)
  (defvar nil-conjugation ETC)
  (defun subanta-irreg (subanta form Eng-def val)
  (defun dhaatu-irreg (dhaatu form Eng-def val)
  (defun declension-M-a-IRR (vstem cstem1 &optional cstem2)
  (defun declension-F-aa-IRR (vstem cstem1 &optional cstem2)
  (defun declension-F-aa1-IRR (vstem cstem1 &optional cstem2)
  (defun declension-M-aa1-IRR (vstem cstem1 &optional cstem2)
  (defun declension-N-i1-IRR (citation-sym)
  (defun irregs-init ()
itrans.el 63 21
  (defvar single-quote-sym ETC)
  (defvar ITRANS_PARSE ETC)
  (defvar NITRANS_PARSE ETC)
  (defvar ITRANS-ordering ETC)
  (defvar ITRANS-alphabet ETC)
  (defvar SLP1-alphabet ETC)
  (defvar SLP1-ordering ETC)
  (defvar HK-alphabet ETC)
  (defvar HK-ordering ETC)
  (defvar HK_PARSE ETC)
  (defvar NHK_PARSE ETC)
  (defvar HKMW_PARSE ETC)
  (defvar NHKMW_PARSE ETC)
  (defvar SLP1_PARSE ETC)
  (defvar NSLP1_PARSE ETC)
  (defvar SLP1-ITRANS-parser ETC)
  (defvar ITRANS-SLP1-parser ETC)
  (defvar AS_PARSE ETC)
  (defvar NAS_PARSE ETC)
  (defvar SLP1-AS-parser ETC)
  (defvar AS-SLP1-parser ETC)
  (defun temp-vowels ()
  (defun temp-Consonants ()
  (defun word-list (s)
  (defun gen-word-list (s &optional wsepin)
  (defun reg-word-list (s wordreg)
  (defun parse_INIT_CAP ()
  (defun init-transliteration ()
  (defun SLP1-init ()
  (defun ITRANS-init ()
  (defun any-parse-word-string (s transvec)
  (defun ITRANS-parse-word-string (s)
  (defun old-ITRANS-parse-word-string (s)
  (defun vector-droplast (match-val v)
  (defun vector-droplast-VIRAAM (v)
  (defun ITRANS-parse-words (s)
  (defun ITRANS-parse-words-1 (s)
  (defun ITRANS-parse-words-2 (s)
  (defun ITRANS-parse-words-3 (s)
  (defun ITRANS-lt-str (x y)
  (defun ITRANS-lt-sym (x y)
  (defun any-lt-tok (x1 x2 any-ordering)
  (defun any-lt-char (c1 c2 any-ordering)
  (defun ITRANS-lt-tok (x1 x2)
  (defun ITRANS-lt-char (c1 c2)
  (defun old-ITRANS-lt-char (c1 c2)
  (defun init-some-ordering (alphabet)
  (defun init-ITRANS-ordering ()
  (defun ITRANS-SLP1-sym (sym)
  (defun init-SLP1-ordering ()
  (defun SLP1-parse-words-1 (s)
  (defun SLP1-parse-words (s)
  (defun SLP1-parse-word-string (s)
  (defun SLP1-lt-str (x y)
  (defun SLP1-lt-sym (x y)
  (defun SLP1-lt-tok (x1 x2)
  (defun SLP1-ITRANS-sym (sym)
  (defun init-HK-ordering ()
  (defun ITRANS-HK-sym (sym)
  (defun HK-ITRANS-sym (sym)
  (defun HK-init ()
  (defun parse-from-to-construct (parse1 alpha1 alpha2)
  (defun HKMW-init ()
  (defun SLP1-PARSE-init ()
  (defun SLP1-parsers-init ()
  (defun translate-ITRANS-SLP1 (l)
  (defun translate-SLP1-ITRANS (l)
  (defun translate-string-ITRANS-SLP1 (l)
  (defun translate-string-ITRANS-SLP1-a (l)
  (defun translate-string-ITRANS-SLP1-b (l)
  (defun translate-string-SLP1-ITRANS (l)
  (defun translate-string-SLP1-ITRANS-a (l)
  (defun translate-buffer-SLP1-ITRANS (buf)
  (defun mapcar-LE (f l)
  (defun make-regexp (x)
  (defun string-trim (s)
  (defun string-delete-regexp (regexp string)
  (defun delete-regexp (regexp)
  (defun AS-init ()
  (defun AS-SLP1-parsers-init ()
  (defun translate-AS-SLP1 (l)
  (defun translate-string-AS-SLP1 (l)
  (defun translate-string-AS-SLP1-a (l)
  (defun word-list-lines (txt)
kta.el 41 0
  (defun kta-doc ()
  (defun tvaa-doc ()
  (defun lyap-doc ()
  (defun inf-doc ()
  (defun potpart-doc ()
  (defun potpart-yat-doc ()
  (defun potpart-kyap-doc ()
  (defun potpart-Nyat-doc ()
  (defun construct-pppart1a-helper (dhaatu class pada upasargas &optional seT-kta dtype)
  (defun construct-pppart1a (dhaatu class pada upasargas &optional dtype)
  (defun construct-pppart1a-exception (dhaatu class pada upasargas)
  (defun kta-seT-code (dhaatu class pada upasargas &optional tok dtype)
  (defun kale-696-P (dhaatu)
  (defun kale-692-P (dhaatu class pada upasargas)
  (defun kta-join (base-tok seT-code sup dhaatu)
  (defun kta-join1 (y seT-code ending0 dhaatu)
  (defun construct-ippart1a (dhaatu class pada upasargas)
  (defun construct-ippart1a-tvaa (dhaatu class pada upasargas &optional dtype)
  (defun construct-ippart1a-tvaa-basic (dhaatu class pada upasargas)
  (defun tvaa-join1-t-th (y ending dhaatu)
  (defun construct-ippart1a-tvaa-exception (dhaatu class pada upasargas)
  (defun tvaa-seT-code (dhaatu class pada upasargas &optional tok)
  (defun construct-ippart1a-ya (dhaatu class pada upasargas &optional dtype)
  (defun construct-ippart1a-ya-exception (dhaatu class pada upasargas)
  (defun construct-ippart1a-ya-basic (dhaatu class pada upasargas)
  (defun indicatory-u-P (dhaatu class pada)
  (defun construct-inf1a (dhaatu class pada upasargas)
  (defun construct-inf1a-basic (dhaatu class pada upasargas)
  (defun construct-inf1a-exception (dhaatu class pada upasargas)
  (defun construct-potpart1a (dhaatu class pada &optional upasargas)
  (defun construct-potpart1a-irregular (dhaatu &optional class pada)
  (defun construct-potpart1a-tavya (dhaatu class pada upasargas)
  (defun construct-potpart1a-tavya-exception (dhaatu class pada upasargas)
  (defun construct-potpart1a-aniiya (dhaatu class pada upasargas)
  (defun construct-potpart1a-aniiya-exception (dhaatu class pada upasargas)
  (defun potpart-join1 (base ending &optional dhaatu)
  (defun construct-potpart1a-yat (dhaatu class pada upasargas)
  (defun construct-potpart1a-yat-exception (dhaatu class pada upasargas)
  (defun construct-potpart1a-kyap (dhaatu class pada upasargas)
  (defun construct-potpart1a-Nyat (dhaatu class pada upasargas)
  (defun construct-potpart1a-exception (dhaatu class pada upasargas)
Mbh.el 24 1
  (defvar Mbh-dir ETC)
  (defun Mbh-buf (filename)
  (defun Mbh-buffer ()
  (defun Mbhu-buffer ()
  (defun construct-Mbhu (&optional bufin)
  (defun Mbhu-lexid-distrib ()
  (defun Mbhu-validate1 (lexreg)
  (defun Mbhu-validate1-help (inflected analysis-in base lex)
  (defun Mbhu-alternates-list (s)
  (defun Mbhu-validate1-help-1a (analysis lex base e)
  (defun Mbhu-validate2 (altlex &optional dbg)
  (defun Mbhu-validate2-help (inflected-in analysis-in base-in lex-in &optional alex dbg)
  (defun Mbhu-validate2-V-0 (inflected-in analysis-in verb-in lex-in &optional dbg)
  (defun SL-tense-tran (SL-tense)
  (defun Mbhu-validate2-V-2 (inflected tab SL-p SL-n)
  (defun Mbhu-validate2-I-0 (inflected-in analysis-in subanta-in lex-in)
  (defun Mbhu-validate2-S-0 (inflected-in analysis-in subanta-in lex-in &optional dbg)
  (defun Mbhu-validate2-S-1 (SL-subanta lex)
  (defun Mbhu-validate2-S-2 (inflected val)
  (defun Mbhu-validate2-match (inflected tab)
  (defun Mbhu-convert-lex (lex-in)
  (defun Mbhu-validate2-S-compare (analysis-in analyses)
  (defun Mbhu-extract-V-lex (lex-in)
  (defun Mbhu-complete-classes (cps-in)
  (defun Mbh-verse (num &optional opt)
numeral.el 7 7
  (defvar cardinals-1-19 ETC)
  (defvar ordinals-1-19 ETC)
  (defvar card-multiples-of-10-2-10 ETC)
  (defvar ord-multiples-of-10-2-10 ETC)
  (defvar cardinal-pfx ETC)
  (defvar cardinal-pfx-1-less ETC)
  (defvar san-numeral-test-result ETC)
  (defun san-numeral (num)
  (defun san-numeral-1-19 (num)
  (defun numeral-join-1x-sym (base-sym sup-sym)
  (defun numeral-join-1-sym (base-sym sup-sym)
  (defun numeral-join (base-tok sup)
  (defun san-numeral-test (n1 &optional n2)
  (defun answers-for-19-99 ()
sandhi.el 80 2
  (defvar sandhi-pair-skiprefs ETC)
  (defvar sandhi-n-N-ifirst ETC)
  (defun external-sandhi-doc ()
  (defun anusvaara-doc ()
  (defun guna (sym)
  (defun vrddhi (sym)
  (defun vrddhi1 (sym)
  (defun lengthen-vowel (tok)
  (defun lengthen-diphthong (tok)
  (defun shorten-vowel (tok)
  (defun corresponding-letter (x set1 set2)
  (defun sandhi-internal-diphthong-A (tokar)
  (defun sandhi-internal-A-simplevowel (tokar1 tokar2)
  (defun de-aspirate (a)
  (defun aspirate (a)
  (defun reduplicate (in &optional wparts)
  (defun reduplicative-pfx (tok &optional wparts)
  (defun reduplicate-join (base-tok sup)
  (defun Sandhi-append (v1 v2 w1 w2 action args)
  (defun Sandhi-get (v1 v2)
  (defun Sandhi-initAll ()
  (defun Sandhi-initElt (prop)
  (defun Sandhi-init ()
  (defun Sandhi-Inverse-init ()
  (defun Sandhi-Length-init ()
  (defun Sandhi-unload-old ()
  (defun Sandhi-unload ()
  (defun Sandhi-load ()
  (defun Sandhi-load-init ()
  (defun sandhi-init-default-plist (type ref &optional condition)
  (defun sandhi-init-19 ()
  (defun sandhi-init-19a ()
  (defun sandhi-init-20 ()
  (defun sandhi-init-21 ()
  (defun sandhi-init-22 ()
  (defun sandhi-init-23 ()
  (defun sandhi-init-24 ()
  (defun sandhi-init-24a ()
  (defun sandhi-init-25 ()
  (defun sandhi-init-36 ()
  (defun sandhi-init-36a ()
  (defun sandhi-visarga-init-1 ()
  (defun sandhi-visarga-init-2 ()
  (defun sandhi-final-r-init-1 ()
  (defun sandhi-final-m-init ()
  (defun sandhi-s-Sh-init ()
  (defun sandhi-cons72-4-init ()
  (defun sandhi-cons72-6-init ()
  (defun sandhi-cons87-1-init ()
  (defun sandhi-cons87-2-init ()
  (defun sandhi-cons88-1-init ()
  (defun sandhi-cons88-1a-init ()
  (defun sandhi-cons88-1b-init ()
  (defun sandhi-cons88-2-init ()
  (defun sandhi-cons88-3-init ()
  (defun sandhi-cons88-3a-init ()
  (defun sandhi-cons88-5a-init ()
  (defun sandhi-cons88-5b-init ()
  (defun sandhi-Kale33-init ()
  (defun sandhi-Kale30-init ()
  (defun sandhi-n-N-ifirst-set (ifirst)
  (defun sandhi-n-N (tokar-in)
  (defun separate-symbol-pair (sympair &optional pairsep-str)
  (defun sandhi-pair-skiprefs-set (new)
  (defun sandhi-pair-main (tokar1 tokar2 n1 n2 v1 v2 x1 x2 condition action)
  (defun sandhi-pair (t1 t2 condition action)
  (defun sandhi-one-final-cons (tokar)
  (defun sandhi-legalise-final-cons (tokar)
  (defun sandhi-single-main (tokar1 condition)
  (defun sandhi-single (t1 &rest args)
  (defun sandhi-avagraha-separate (tokar)
  (defun sandhi-avagraha-separate-test (sym1)
  (defun sandhi-separate (symin)
  (defun sandhi-separate-str (s1)
  (defun sandhi-separate-main (symin)
  (defun sandhi-separate2 (symin1 symin2 &optional optional)
  (defun sandhi-separate2-str (s1 s2 &optional optional)
  (defun sandhi-separate-final-M (symin1)
  (defun sandhi-separate-final-r (symin1)
  (defun sandhi-separate3-str (string &optional optional)
  (defun examine-Sandhi-Inverse-nojoin ()
  (defun gunate-final-vowel (tok &optional vrddhiP parts)
start.el 0 0
start0.el 9 0
  (defun fol-msg (&rest s)
  (defun sangram-filename (arg gramdir)
  (defun sangram-buffer (arg gramdir)
  (defun san-validation-filename (arg)
  (defun fol-filename (arg)
  (defun fol-ob-init ()
  (defun fol-read (s)
  (defun my-load-library (sin &optional skip-flag)
  (defun current-line ()
sxmw.el 34 0
  (defun my-forward-sexp (bound begexp endexp)
  (defun mw (key &optional full noprflag)
  (defun mw-alt (key &optional full noprflag)
  (defun mw-helper (ans1 &optional full noprflag)
  (defun mw-help1-string (sin)
  (defun mw-tag-AB (parm)
  (defun mw-tag-LEX (parm)
  (defun mw-tag-KEY (parm)
  (defun mw-tag-Q (parm)
  (defun mw-tag-C (parm)
  (defun mw-tag-BIO (parm)
  (defun mw-tag-BOT (parm)
  (defun mw-tag-V (parm)
  (defun sx2 (s)
  (defun Sx2 (s)
  (defun Sx2-forms (sin tab)
  (defun Sx2-forms-helper (sin line)
  (defun Sx2-updateans (ans word parms ans1 dict)
  (defun Sx2-tabmatch (s tab inflection)
  (defun Sx2-pfx (pfx)
  (defun Sx2-pfxa (pfx filename ans)
  (defun Sx2-endmatch (regexp &optional bufin)
  (defun Sx2-extract-formtype (form)
  (defun sxmw (str &optional noprflag)
  (defun sxmwpr (str sxlist mwlist)
  (defun sxmw-Mbh-verse (verse)
  (defun sxmw-Mbh-verses (verse1 verse2)
  (defun MW-init ()
  (defun MW-orig-init ()
  (defun MW-key-find (key &optional anycase bufin keybuf)
  (defun MW-buffer ()
  (defun MW-keys-buffer ()
  (defun check-buffer-grouping (c1 c2 group-pairs)
  (defun check-group (locs)
validation.el 81 4
  (defvar SL-dtab-directory ETC)
  (defvar SL-dtab-tabnames ETC)
  (defvar SL-ITRANS-genders ETC)
  (defvar SL-ITRANS-forms ETC)
  (defun validation (vfile)
  (defun 1cons-chk (sym &optional case-numbers)
  (defun 1cons-chk-pr (sym &optional case-numbers)
  (defun 1cons-chk-pr-all ()
  (defun validation-all (&optional files)
  (defun validation-deshpande-all (&optional files)
  (defun liT-r (dhaatu pada &optional upa-syms voice)
  (defun get-classes (dhaatu pada upa-syms)
  (defun liT-px (dhaatu class pada sfx-dhaatu &optional upa-syms voice)
  (defun conjugation-tab-liT-px (upa-syms class pada dhaatu dhaatu-sfx &optional voice)
  (defun luT (dhaatu class pada &optional upa-syms)
  (defun lRiT (dhaatu class pada &optional upa-syms isub)
  (defun lRi~N (dhaatu class pada &optional upa-syms)
  (defun ffc (dhaatu class pada &optional upa-syms)
  (defun aashiirli~N (dhaatu class pada &optional upa-syms)
  (defun aashiirli~N1 (dhaatu class pada &optional upa-syms)
  (defun futpass (dhaatu class pada &optional upa-syms)
  (defun aorist1 (dhaatu class pada &optional upa-syms voice)
  (defun aorist2 (dhaatu class pada &optional upa-syms voice)
  (defun aorist2a (dhaatu class pada &optional upa-syms voice)
  (defun aorist3 (dhaatu class pada &optional upa-syms voice)
  (defun aorist3a (dhaatu class pada &optional upa-syms voice)
  (defun causal (dhaatu class &optional pada upa-syms def)
  (defun aorist6 (dhaatu class pada &optional upa-syms voice)
  (defun aorist6a (dhaatu class pada &optional upa-syms voice)
  (defun aorist7 (dhaatu class pada &optional upa-syms voice)
  (defun aorist7a (dhaatu class pada &optional upa-syms voice)
  (defun aorist4 (dhaatu class pada &optional upa-syms voice)
  (defun aorist4a (dhaatu class pada &optional upa-syms isub voice)
  (defun aorist5 (dhaatu class pada &optional upa-syms voice)
  (defun aorist5a (dhaatu class pada &optional upa-syms isub voice)
  (defun aorista (iaorist dhaatu class pada &optional upa-syms isub voice)
  (defun aoristP (iaorist dhaatu class pada &optional upa-syms isub)
  (defun aoristP0 (dhaatu class pada &optional upa-syms)
  (defun aoristP0-make ()
  (defun aoristP1 (dhaatu class pada &optional upa-syms)
  (defun aoristP1-make ()
  (defun conjpass (dhaatu &optional class pada upa-syms)
  (defun kta (dhaatu &optional class pada upa-syms)
  (defun tvaa (dhaatu &optional class pada upa-syms)
  (defun lyap (dhaatu &optional class pada upa-syms)
  (defun seT (dhaatu &optional class pada upasargas)
  (defun inf (dhaatu class pada &optional upa-syms)
  (defun tavya (dhaatu class &optional pada upa-syms)
  (defun aniiya (dhaatu class &optional pada upa-syms)
  (defun yat (dhaatu class &optional pada upa-syms)
  (defun kyap (dhaatu &optional class pada upa-syms)
  (defun Nyat (dhaatu &optional class pada upa-syms)
  (defun rpp (dhaatu class pada &optional upa-syms)
  (defun perpp (dhaatu class pada &optional upa-syms)
  (defun futpart (dhaatu class &optional upa-syms)
  (defun laT (dhaatu class pada &optional upa-syms isub voice)
  (defun la~N (dhaatu class pada &optional upa-syms isub voice)
  (defun loT (dhaatu class pada &optional upa-syms isub voice)
  (defun vidhili~N (dhaatu class pada &optional upa-syms isub voice)
  (defun prespart (dhaatu class pada gender &optional upa-syms isub)
  (defun Vdecl (citation gen-or-mtype form &optional gender)
  (defun SL-dtab-extract (subanta form gender)
  (defun SL-dtab-extract1 (tabname)
  (defun SL-dtab-extract2 (filename)
  (defun init-SL-dtab-tabnames ()
  (defun SL-dtab-construct (SL-subanta SL-form SL-gender)
  (defun SL-construct-subanta1a (SL-subanta SL-form SL-gender)
  (defun construct-prap-base (subanta form gender)
  (defun construct-prap (subanta form gender)
  (defun SL-dtab-validate-one (subanta form gender)
  (defun SL-dtab-validate-one-compare (title id1 dtab1 id2 dtab2)
  (defun SL-dtab-validate-one-elt (e c)
  (defun SL-list (s)
  (defun SL-dtab-validation (vfile)
  (defun SL-dtab-validation-all (&optional files)
  (defun SL-dtab-input-suggest (&optional files)
  (defun SL-dtab-printfile (vfile preproc)
  (defun SL-dtab-print-one-construct (subanta form gender)
  (defun SL-dtab-print-one-extract (subanta form gender)
  (defun SL-dtabs1-make ()
  (defun SL-dtest-validation (vfile)
  (defun SL-extract-compare-dtabs-dtabs1-one (subanta form gender)
  (defun SL-extract-compare-dtabs-dtabs1 (vfile)
  (defun SL-extract-copy-dtabs1-dtabs (vfile)
  (defun SL-dtab-print (tab)
vt01.el 8 0
  (defun vt01-read ()
  (defun vt01-act1 (vtab)
  (defun vt01-check ()
  (defun vt01-propnames ()
  (defun vt01-putrec (sym parr rec)
  (defun vt01-act2 ()
  (defun vt01-act3 ()
  (defun vt01-act4 (prop)
